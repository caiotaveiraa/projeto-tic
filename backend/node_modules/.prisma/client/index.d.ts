
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model tbEstoque
 * 
 */
export type tbEstoque = {
  idestoque: number
  idproduto: number
  idlocal: number | null
  quantidade: Prisma.Decimal | null
  dtinc: Date | null
}

/**
 * Model tbFornecedores
 * 
 */
export type tbFornecedores = {
  idfor: number
  nomefor: string | null
  fisjur: string | null
  cnpjcpf: string | null
  telefone: string | null
  cep: string | null
  cidade: string | null
  rua: string | null
  bairro: string | null
  numero: number | null
  complemento: string | null
  email: string | null
}

/**
 * Model tbLocais
 * 
 */
export type tbLocais = {
  idlocal: number
  nomelocal: string | null
}

/**
 * Model tbMovimentos
 * 
 */
export type tbMovimentos = {
  idmovimento: number
  tipmov: string | null
  idfor: number | null
  idusuario_alteracao: number | null
  dtinc: Date | null
}

/**
 * Model tbMovitens
 * 
 */
export type tbMovitens = {
  idmovimento: number
  seqitem: number
  idproduto: number
  idlocal: number | null
  dtinc: Date | null
  quantidade: Prisma.Decimal | null
}

/**
 * Model tbNf
 * 
 */
export type tbNf = {
  idnf: number
  numnf: number | null
  idmovimento: number | null
  serienf: number | null
  idfor: number | null
  idusuario_inclusao: number | null
  dtemissao: Date | null
  vlrtotal: Prisma.Decimal | null
}

/**
 * Model tbNfitens
 * 
 */
export type tbNfitens = {
  idnf: number
  idmovimento: number | null
  seqitem: number
  idproduto: number
  vlrunitario: Prisma.Decimal | null
  quantidade: Prisma.Decimal | null
  vlrtotitem: Prisma.Decimal | null
}

/**
 * Model tbProdcomposicao
 * 
 */
export type tbProdcomposicao = {
  idcomp: number
  idproduto: number
  idprodutocomp: number
  quantidade: Prisma.Decimal | null
}

/**
 * Model tbProdutos
 * 
 */
export type tbProdutos = {
  idproduto: number
  nomeprod: string | null
  idtipprod: number | null
  idunidade: number | null
  quantminima: number | null
}

/**
 * Model tbTiposprodutos
 * 
 */
export type tbTiposprodutos = {
  idtipprod: number
  nometipprod: string | null
}

/**
 * Model tbUnidademedida
 * 
 */
export type tbUnidademedida = {
  idunidade: number
  siglaun: string | null
  nomeunidade: string | null
}

/**
 * Model tbUsuarios
 * 
 */
export type tbUsuarios = {
  idusuario: number
  usu_login: string | null
  nome: string | null
  senha: string | null
  dtcriacao: Date | null
  usu_admin: boolean | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TbEstoques
 * const tbEstoques = await prisma.tbEstoque.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TbEstoques
   * const tbEstoques = await prisma.tbEstoque.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.tbEstoque`: Exposes CRUD operations for the **tbEstoque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbEstoques
    * const tbEstoques = await prisma.tbEstoque.findMany()
    * ```
    */
  get tbEstoque(): Prisma.tbEstoqueDelegate<GlobalReject>;

  /**
   * `prisma.tbFornecedores`: Exposes CRUD operations for the **tbFornecedores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbFornecedores
    * const tbFornecedores = await prisma.tbFornecedores.findMany()
    * ```
    */
  get tbFornecedores(): Prisma.tbFornecedoresDelegate<GlobalReject>;

  /**
   * `prisma.tbLocais`: Exposes CRUD operations for the **tbLocais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbLocais
    * const tbLocais = await prisma.tbLocais.findMany()
    * ```
    */
  get tbLocais(): Prisma.tbLocaisDelegate<GlobalReject>;

  /**
   * `prisma.tbMovimentos`: Exposes CRUD operations for the **tbMovimentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbMovimentos
    * const tbMovimentos = await prisma.tbMovimentos.findMany()
    * ```
    */
  get tbMovimentos(): Prisma.tbMovimentosDelegate<GlobalReject>;

  /**
   * `prisma.tbMovitens`: Exposes CRUD operations for the **tbMovitens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbMovitens
    * const tbMovitens = await prisma.tbMovitens.findMany()
    * ```
    */
  get tbMovitens(): Prisma.tbMovitensDelegate<GlobalReject>;

  /**
   * `prisma.tbNf`: Exposes CRUD operations for the **tbNf** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbNfs
    * const tbNfs = await prisma.tbNf.findMany()
    * ```
    */
  get tbNf(): Prisma.tbNfDelegate<GlobalReject>;

  /**
   * `prisma.tbNfitens`: Exposes CRUD operations for the **tbNfitens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbNfitens
    * const tbNfitens = await prisma.tbNfitens.findMany()
    * ```
    */
  get tbNfitens(): Prisma.tbNfitensDelegate<GlobalReject>;

  /**
   * `prisma.tbProdcomposicao`: Exposes CRUD operations for the **tbProdcomposicao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbProdcomposicaos
    * const tbProdcomposicaos = await prisma.tbProdcomposicao.findMany()
    * ```
    */
  get tbProdcomposicao(): Prisma.tbProdcomposicaoDelegate<GlobalReject>;

  /**
   * `prisma.tbProdutos`: Exposes CRUD operations for the **tbProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbProdutos
    * const tbProdutos = await prisma.tbProdutos.findMany()
    * ```
    */
  get tbProdutos(): Prisma.tbProdutosDelegate<GlobalReject>;

  /**
   * `prisma.tbTiposprodutos`: Exposes CRUD operations for the **tbTiposprodutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbTiposprodutos
    * const tbTiposprodutos = await prisma.tbTiposprodutos.findMany()
    * ```
    */
  get tbTiposprodutos(): Prisma.tbTiposprodutosDelegate<GlobalReject>;

  /**
   * `prisma.tbUnidademedida`: Exposes CRUD operations for the **tbUnidademedida** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbUnidademedidas
    * const tbUnidademedidas = await prisma.tbUnidademedida.findMany()
    * ```
    */
  get tbUnidademedida(): Prisma.tbUnidademedidaDelegate<GlobalReject>;

  /**
   * `prisma.tbUsuarios`: Exposes CRUD operations for the **tbUsuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbUsuarios
    * const tbUsuarios = await prisma.tbUsuarios.findMany()
    * ```
    */
  get tbUsuarios(): Prisma.tbUsuariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    tbEstoque: 'tbEstoque',
    tbFornecedores: 'tbFornecedores',
    tbLocais: 'tbLocais',
    tbMovimentos: 'tbMovimentos',
    tbMovitens: 'tbMovitens',
    tbNf: 'tbNf',
    tbNfitens: 'tbNfitens',
    tbProdcomposicao: 'tbProdcomposicao',
    tbProdutos: 'tbProdutos',
    tbTiposprodutos: 'tbTiposprodutos',
    tbUnidademedida: 'tbUnidademedida',
    tbUsuarios: 'tbUsuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TbFornecedoresCountOutputType
   */


  export type TbFornecedoresCountOutputType = {
    tbmovimentos: number
    tbnf: number
  }

  export type TbFornecedoresCountOutputTypeSelect = {
    tbmovimentos?: boolean
    tbnf?: boolean
  }

  export type TbFornecedoresCountOutputTypeGetPayload<S extends boolean | null | undefined | TbFornecedoresCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbFornecedoresCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbFornecedoresCountOutputTypeArgs)
    ? TbFornecedoresCountOutputType 
    : S extends { select: any } & (TbFornecedoresCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbFornecedoresCountOutputType ? TbFornecedoresCountOutputType[P] : never
  } 
      : TbFornecedoresCountOutputType




  // Custom InputTypes

  /**
   * TbFornecedoresCountOutputType without action
   */
  export type TbFornecedoresCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbFornecedoresCountOutputType
     */
    select?: TbFornecedoresCountOutputTypeSelect | null
  }



  /**
   * Count Type TbLocaisCountOutputType
   */


  export type TbLocaisCountOutputType = {
    tbestoque: number
    tbmovitens: number
  }

  export type TbLocaisCountOutputTypeSelect = {
    tbestoque?: boolean
    tbmovitens?: boolean
  }

  export type TbLocaisCountOutputTypeGetPayload<S extends boolean | null | undefined | TbLocaisCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbLocaisCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbLocaisCountOutputTypeArgs)
    ? TbLocaisCountOutputType 
    : S extends { select: any } & (TbLocaisCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbLocaisCountOutputType ? TbLocaisCountOutputType[P] : never
  } 
      : TbLocaisCountOutputType




  // Custom InputTypes

  /**
   * TbLocaisCountOutputType without action
   */
  export type TbLocaisCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbLocaisCountOutputType
     */
    select?: TbLocaisCountOutputTypeSelect | null
  }



  /**
   * Count Type TbMovimentosCountOutputType
   */


  export type TbMovimentosCountOutputType = {
    tbmovitens: number
  }

  export type TbMovimentosCountOutputTypeSelect = {
    tbmovitens?: boolean
  }

  export type TbMovimentosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbMovimentosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbMovimentosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbMovimentosCountOutputTypeArgs)
    ? TbMovimentosCountOutputType 
    : S extends { select: any } & (TbMovimentosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbMovimentosCountOutputType ? TbMovimentosCountOutputType[P] : never
  } 
      : TbMovimentosCountOutputType




  // Custom InputTypes

  /**
   * TbMovimentosCountOutputType without action
   */
  export type TbMovimentosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbMovimentosCountOutputType
     */
    select?: TbMovimentosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbMovitensCountOutputType
   */


  export type TbMovitensCountOutputType = {
    tbnfitens: number
  }

  export type TbMovitensCountOutputTypeSelect = {
    tbnfitens?: boolean
  }

  export type TbMovitensCountOutputTypeGetPayload<S extends boolean | null | undefined | TbMovitensCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbMovitensCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbMovitensCountOutputTypeArgs)
    ? TbMovitensCountOutputType 
    : S extends { select: any } & (TbMovitensCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbMovitensCountOutputType ? TbMovitensCountOutputType[P] : never
  } 
      : TbMovitensCountOutputType




  // Custom InputTypes

  /**
   * TbMovitensCountOutputType without action
   */
  export type TbMovitensCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbMovitensCountOutputType
     */
    select?: TbMovitensCountOutputTypeSelect | null
  }



  /**
   * Count Type TbNfCountOutputType
   */


  export type TbNfCountOutputType = {
    tbnfitens: number
  }

  export type TbNfCountOutputTypeSelect = {
    tbnfitens?: boolean
  }

  export type TbNfCountOutputTypeGetPayload<S extends boolean | null | undefined | TbNfCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbNfCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbNfCountOutputTypeArgs)
    ? TbNfCountOutputType 
    : S extends { select: any } & (TbNfCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbNfCountOutputType ? TbNfCountOutputType[P] : never
  } 
      : TbNfCountOutputType




  // Custom InputTypes

  /**
   * TbNfCountOutputType without action
   */
  export type TbNfCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbNfCountOutputType
     */
    select?: TbNfCountOutputTypeSelect | null
  }



  /**
   * Count Type TbProdutosCountOutputType
   */


  export type TbProdutosCountOutputType = {
    tbestoque: number
    tbmovitens: number
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos: number
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos: number
  }

  export type TbProdutosCountOutputTypeSelect = {
    tbestoque?: boolean
    tbmovitens?: boolean
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: boolean
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: boolean
  }

  export type TbProdutosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbProdutosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbProdutosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbProdutosCountOutputTypeArgs)
    ? TbProdutosCountOutputType 
    : S extends { select: any } & (TbProdutosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbProdutosCountOutputType ? TbProdutosCountOutputType[P] : never
  } 
      : TbProdutosCountOutputType




  // Custom InputTypes

  /**
   * TbProdutosCountOutputType without action
   */
  export type TbProdutosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbProdutosCountOutputType
     */
    select?: TbProdutosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbTiposprodutosCountOutputType
   */


  export type TbTiposprodutosCountOutputType = {
    tbprodutos: number
  }

  export type TbTiposprodutosCountOutputTypeSelect = {
    tbprodutos?: boolean
  }

  export type TbTiposprodutosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbTiposprodutosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbTiposprodutosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbTiposprodutosCountOutputTypeArgs)
    ? TbTiposprodutosCountOutputType 
    : S extends { select: any } & (TbTiposprodutosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbTiposprodutosCountOutputType ? TbTiposprodutosCountOutputType[P] : never
  } 
      : TbTiposprodutosCountOutputType




  // Custom InputTypes

  /**
   * TbTiposprodutosCountOutputType without action
   */
  export type TbTiposprodutosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbTiposprodutosCountOutputType
     */
    select?: TbTiposprodutosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbUnidademedidaCountOutputType
   */


  export type TbUnidademedidaCountOutputType = {
    tbprodutos: number
  }

  export type TbUnidademedidaCountOutputTypeSelect = {
    tbprodutos?: boolean
  }

  export type TbUnidademedidaCountOutputTypeGetPayload<S extends boolean | null | undefined | TbUnidademedidaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbUnidademedidaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbUnidademedidaCountOutputTypeArgs)
    ? TbUnidademedidaCountOutputType 
    : S extends { select: any } & (TbUnidademedidaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbUnidademedidaCountOutputType ? TbUnidademedidaCountOutputType[P] : never
  } 
      : TbUnidademedidaCountOutputType




  // Custom InputTypes

  /**
   * TbUnidademedidaCountOutputType without action
   */
  export type TbUnidademedidaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbUnidademedidaCountOutputType
     */
    select?: TbUnidademedidaCountOutputTypeSelect | null
  }



  /**
   * Count Type TbUsuariosCountOutputType
   */


  export type TbUsuariosCountOutputType = {
    tbmovimentos: number
    tbnf: number
  }

  export type TbUsuariosCountOutputTypeSelect = {
    tbmovimentos?: boolean
    tbnf?: boolean
  }

  export type TbUsuariosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbUsuariosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbUsuariosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbUsuariosCountOutputTypeArgs)
    ? TbUsuariosCountOutputType 
    : S extends { select: any } & (TbUsuariosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbUsuariosCountOutputType ? TbUsuariosCountOutputType[P] : never
  } 
      : TbUsuariosCountOutputType




  // Custom InputTypes

  /**
   * TbUsuariosCountOutputType without action
   */
  export type TbUsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbUsuariosCountOutputType
     */
    select?: TbUsuariosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model tbEstoque
   */


  export type AggregateTbEstoque = {
    _count: TbEstoqueCountAggregateOutputType | null
    _avg: TbEstoqueAvgAggregateOutputType | null
    _sum: TbEstoqueSumAggregateOutputType | null
    _min: TbEstoqueMinAggregateOutputType | null
    _max: TbEstoqueMaxAggregateOutputType | null
  }

  export type TbEstoqueAvgAggregateOutputType = {
    idestoque: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
  }

  export type TbEstoqueSumAggregateOutputType = {
    idestoque: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
  }

  export type TbEstoqueMinAggregateOutputType = {
    idestoque: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
    dtinc: Date | null
  }

  export type TbEstoqueMaxAggregateOutputType = {
    idestoque: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
    dtinc: Date | null
  }

  export type TbEstoqueCountAggregateOutputType = {
    idestoque: number
    idproduto: number
    idlocal: number
    quantidade: number
    dtinc: number
    _all: number
  }


  export type TbEstoqueAvgAggregateInputType = {
    idestoque?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbEstoqueSumAggregateInputType = {
    idestoque?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbEstoqueMinAggregateInputType = {
    idestoque?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
    dtinc?: true
  }

  export type TbEstoqueMaxAggregateInputType = {
    idestoque?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
    dtinc?: true
  }

  export type TbEstoqueCountAggregateInputType = {
    idestoque?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
    dtinc?: true
    _all?: true
  }

  export type TbEstoqueAggregateArgs = {
    /**
     * Filter which tbEstoque to aggregate.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbEstoques
    **/
    _count?: true | TbEstoqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbEstoqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbEstoqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbEstoqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbEstoqueMaxAggregateInputType
  }

  export type GetTbEstoqueAggregateType<T extends TbEstoqueAggregateArgs> = {
        [P in keyof T & keyof AggregateTbEstoque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbEstoque[P]>
      : GetScalarType<T[P], AggregateTbEstoque[P]>
  }




  export type TbEstoqueGroupByArgs = {
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithAggregationInput>
    by: TbEstoqueScalarFieldEnum[]
    having?: tbEstoqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbEstoqueCountAggregateInputType | true
    _avg?: TbEstoqueAvgAggregateInputType
    _sum?: TbEstoqueSumAggregateInputType
    _min?: TbEstoqueMinAggregateInputType
    _max?: TbEstoqueMaxAggregateInputType
  }


  export type TbEstoqueGroupByOutputType = {
    idestoque: number
    idproduto: number
    idlocal: number | null
    quantidade: Decimal | null
    dtinc: Date | null
    _count: TbEstoqueCountAggregateOutputType | null
    _avg: TbEstoqueAvgAggregateOutputType | null
    _sum: TbEstoqueSumAggregateOutputType | null
    _min: TbEstoqueMinAggregateOutputType | null
    _max: TbEstoqueMaxAggregateOutputType | null
  }

  type GetTbEstoqueGroupByPayload<T extends TbEstoqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbEstoqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbEstoqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbEstoqueGroupByOutputType[P]>
            : GetScalarType<T[P], TbEstoqueGroupByOutputType[P]>
        }
      >
    >


  export type tbEstoqueSelect = {
    idestoque?: boolean
    idproduto?: boolean
    idlocal?: boolean
    quantidade?: boolean
    dtinc?: boolean
    tblocais?: boolean | tbLocaisArgs
    tbprodutos?: boolean | tbProdutosArgs
  }


  export type tbEstoqueInclude = {
    tblocais?: boolean | tbLocaisArgs
    tbprodutos?: boolean | tbProdutosArgs
  }

  export type tbEstoqueGetPayload<S extends boolean | null | undefined | tbEstoqueArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbEstoque :
    S extends undefined ? never :
    S extends { include: any } & (tbEstoqueArgs | tbEstoqueFindManyArgs)
    ? tbEstoque  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tblocais' ? tbLocaisGetPayload<S['include'][P]> | null :
        P extends 'tbprodutos' ? tbProdutosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbEstoqueArgs | tbEstoqueFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tblocais' ? tbLocaisGetPayload<S['select'][P]> | null :
        P extends 'tbprodutos' ? tbProdutosGetPayload<S['select'][P]> :  P extends keyof tbEstoque ? tbEstoque[P] : never
  } 
      : tbEstoque


  type tbEstoqueCountArgs = 
    Omit<tbEstoqueFindManyArgs, 'select' | 'include'> & {
      select?: TbEstoqueCountAggregateInputType | true
    }

  export interface tbEstoqueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbEstoque that matches the filter.
     * @param {tbEstoqueFindUniqueArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbEstoqueFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbEstoqueFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbEstoque'> extends True ? Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>> : Prisma__tbEstoqueClient<tbEstoqueGetPayload<T> | null, null>

    /**
     * Find one TbEstoque that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbEstoqueFindUniqueOrThrowArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbEstoqueFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbEstoqueFindUniqueOrThrowArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Find the first TbEstoque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindFirstArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbEstoqueFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbEstoqueFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbEstoque'> extends True ? Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>> : Prisma__tbEstoqueClient<tbEstoqueGetPayload<T> | null, null>

    /**
     * Find the first TbEstoque that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindFirstOrThrowArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbEstoqueFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbEstoqueFindFirstOrThrowArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Find zero or more TbEstoques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbEstoques
     * const tbEstoques = await prisma.tbEstoque.findMany()
     * 
     * // Get first 10 TbEstoques
     * const tbEstoques = await prisma.tbEstoque.findMany({ take: 10 })
     * 
     * // Only select the `idestoque`
     * const tbEstoqueWithIdestoqueOnly = await prisma.tbEstoque.findMany({ select: { idestoque: true } })
     * 
    **/
    findMany<T extends tbEstoqueFindManyArgs>(
      args?: SelectSubset<T, tbEstoqueFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>>

    /**
     * Create a TbEstoque.
     * @param {tbEstoqueCreateArgs} args - Arguments to create a TbEstoque.
     * @example
     * // Create one TbEstoque
     * const TbEstoque = await prisma.tbEstoque.create({
     *   data: {
     *     // ... data to create a TbEstoque
     *   }
     * })
     * 
    **/
    create<T extends tbEstoqueCreateArgs>(
      args: SelectSubset<T, tbEstoqueCreateArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Create many TbEstoques.
     *     @param {tbEstoqueCreateManyArgs} args - Arguments to create many TbEstoques.
     *     @example
     *     // Create many TbEstoques
     *     const tbEstoque = await prisma.tbEstoque.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbEstoqueCreateManyArgs>(
      args?: SelectSubset<T, tbEstoqueCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbEstoque.
     * @param {tbEstoqueDeleteArgs} args - Arguments to delete one TbEstoque.
     * @example
     * // Delete one TbEstoque
     * const TbEstoque = await prisma.tbEstoque.delete({
     *   where: {
     *     // ... filter to delete one TbEstoque
     *   }
     * })
     * 
    **/
    delete<T extends tbEstoqueDeleteArgs>(
      args: SelectSubset<T, tbEstoqueDeleteArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Update one TbEstoque.
     * @param {tbEstoqueUpdateArgs} args - Arguments to update one TbEstoque.
     * @example
     * // Update one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbEstoqueUpdateArgs>(
      args: SelectSubset<T, tbEstoqueUpdateArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Delete zero or more TbEstoques.
     * @param {tbEstoqueDeleteManyArgs} args - Arguments to filter TbEstoques to delete.
     * @example
     * // Delete a few TbEstoques
     * const { count } = await prisma.tbEstoque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbEstoqueDeleteManyArgs>(
      args?: SelectSubset<T, tbEstoqueDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbEstoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbEstoques
     * const tbEstoque = await prisma.tbEstoque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbEstoqueUpdateManyArgs>(
      args: SelectSubset<T, tbEstoqueUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbEstoque.
     * @param {tbEstoqueUpsertArgs} args - Arguments to update or create a TbEstoque.
     * @example
     * // Update or create a TbEstoque
     * const tbEstoque = await prisma.tbEstoque.upsert({
     *   create: {
     *     // ... data to create a TbEstoque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbEstoque we want to update
     *   }
     * })
    **/
    upsert<T extends tbEstoqueUpsertArgs>(
      args: SelectSubset<T, tbEstoqueUpsertArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Count the number of TbEstoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueCountArgs} args - Arguments to filter TbEstoques to count.
     * @example
     * // Count the number of TbEstoques
     * const count = await prisma.tbEstoque.count({
     *   where: {
     *     // ... the filter for the TbEstoques we want to count
     *   }
     * })
    **/
    count<T extends tbEstoqueCountArgs>(
      args?: Subset<T, tbEstoqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbEstoqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbEstoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbEstoqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbEstoqueAggregateArgs>(args: Subset<T, TbEstoqueAggregateArgs>): Prisma.PrismaPromise<GetTbEstoqueAggregateType<T>>

    /**
     * Group by TbEstoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbEstoqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbEstoqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbEstoqueGroupByArgs['orderBy'] }
        : { orderBy?: TbEstoqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbEstoqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbEstoqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbEstoque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbEstoqueClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tblocais<T extends tbLocaisArgs= {}>(args?: Subset<T, tbLocaisArgs>): Prisma__tbLocaisClient<tbLocaisGetPayload<T> | Null>;

    tbprodutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbEstoque base type for findUnique actions
   */
  export type tbEstoqueFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where: tbEstoqueWhereUniqueInput
  }

  /**
   * tbEstoque findUnique
   */
  export interface tbEstoqueFindUniqueArgs extends tbEstoqueFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbEstoque findUniqueOrThrow
   */
  export type tbEstoqueFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque base type for findFirst actions
   */
  export type tbEstoqueFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbEstoques.
     */
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }

  /**
   * tbEstoque findFirst
   */
  export interface tbEstoqueFindFirstArgs extends tbEstoqueFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbEstoque findFirstOrThrow
   */
  export type tbEstoqueFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbEstoques.
     */
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbEstoque findMany
   */
  export type tbEstoqueFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoques to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbEstoque create
   */
  export type tbEstoqueCreateArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The data needed to create a tbEstoque.
     */
    data: XOR<tbEstoqueCreateInput, tbEstoqueUncheckedCreateInput>
  }


  /**
   * tbEstoque createMany
   */
  export type tbEstoqueCreateManyArgs = {
    /**
     * The data used to create many tbEstoques.
     */
    data: Enumerable<tbEstoqueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbEstoque update
   */
  export type tbEstoqueUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The data needed to update a tbEstoque.
     */
    data: XOR<tbEstoqueUpdateInput, tbEstoqueUncheckedUpdateInput>
    /**
     * Choose, which tbEstoque to update.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque updateMany
   */
  export type tbEstoqueUpdateManyArgs = {
    /**
     * The data used to update tbEstoques.
     */
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyInput>
    /**
     * Filter which tbEstoques to update
     */
    where?: tbEstoqueWhereInput
  }


  /**
   * tbEstoque upsert
   */
  export type tbEstoqueUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The filter to search for the tbEstoque to update in case it exists.
     */
    where: tbEstoqueWhereUniqueInput
    /**
     * In case the tbEstoque found by the `where` argument doesn't exist, create a new tbEstoque with this data.
     */
    create: XOR<tbEstoqueCreateInput, tbEstoqueUncheckedCreateInput>
    /**
     * In case the tbEstoque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbEstoqueUpdateInput, tbEstoqueUncheckedUpdateInput>
  }


  /**
   * tbEstoque delete
   */
  export type tbEstoqueDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter which tbEstoque to delete.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque deleteMany
   */
  export type tbEstoqueDeleteManyArgs = {
    /**
     * Filter which tbEstoques to delete
     */
    where?: tbEstoqueWhereInput
  }


  /**
   * tbEstoque without action
   */
  export type tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
  }



  /**
   * Model tbFornecedores
   */


  export type AggregateTbFornecedores = {
    _count: TbFornecedoresCountAggregateOutputType | null
    _avg: TbFornecedoresAvgAggregateOutputType | null
    _sum: TbFornecedoresSumAggregateOutputType | null
    _min: TbFornecedoresMinAggregateOutputType | null
    _max: TbFornecedoresMaxAggregateOutputType | null
  }

  export type TbFornecedoresAvgAggregateOutputType = {
    idfor: number | null
    numero: number | null
  }

  export type TbFornecedoresSumAggregateOutputType = {
    idfor: number | null
    numero: number | null
  }

  export type TbFornecedoresMinAggregateOutputType = {
    idfor: number | null
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
  }

  export type TbFornecedoresMaxAggregateOutputType = {
    idfor: number | null
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
  }

  export type TbFornecedoresCountAggregateOutputType = {
    idfor: number
    nomefor: number
    fisjur: number
    cnpjcpf: number
    telefone: number
    cep: number
    cidade: number
    rua: number
    bairro: number
    numero: number
    complemento: number
    email: number
    _all: number
  }


  export type TbFornecedoresAvgAggregateInputType = {
    idfor?: true
    numero?: true
  }

  export type TbFornecedoresSumAggregateInputType = {
    idfor?: true
    numero?: true
  }

  export type TbFornecedoresMinAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
  }

  export type TbFornecedoresMaxAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
  }

  export type TbFornecedoresCountAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
    _all?: true
  }

  export type TbFornecedoresAggregateArgs = {
    /**
     * Filter which tbFornecedores to aggregate.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbFornecedores
    **/
    _count?: true | TbFornecedoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbFornecedoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbFornecedoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbFornecedoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbFornecedoresMaxAggregateInputType
  }

  export type GetTbFornecedoresAggregateType<T extends TbFornecedoresAggregateArgs> = {
        [P in keyof T & keyof AggregateTbFornecedores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbFornecedores[P]>
      : GetScalarType<T[P], AggregateTbFornecedores[P]>
  }




  export type TbFornecedoresGroupByArgs = {
    where?: tbFornecedoresWhereInput
    orderBy?: Enumerable<tbFornecedoresOrderByWithAggregationInput>
    by: TbFornecedoresScalarFieldEnum[]
    having?: tbFornecedoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbFornecedoresCountAggregateInputType | true
    _avg?: TbFornecedoresAvgAggregateInputType
    _sum?: TbFornecedoresSumAggregateInputType
    _min?: TbFornecedoresMinAggregateInputType
    _max?: TbFornecedoresMaxAggregateInputType
  }


  export type TbFornecedoresGroupByOutputType = {
    idfor: number
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
    _count: TbFornecedoresCountAggregateOutputType | null
    _avg: TbFornecedoresAvgAggregateOutputType | null
    _sum: TbFornecedoresSumAggregateOutputType | null
    _min: TbFornecedoresMinAggregateOutputType | null
    _max: TbFornecedoresMaxAggregateOutputType | null
  }

  type GetTbFornecedoresGroupByPayload<T extends TbFornecedoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbFornecedoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbFornecedoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbFornecedoresGroupByOutputType[P]>
            : GetScalarType<T[P], TbFornecedoresGroupByOutputType[P]>
        }
      >
    >


  export type tbFornecedoresSelect = {
    idfor?: boolean
    nomefor?: boolean
    fisjur?: boolean
    cnpjcpf?: boolean
    telefone?: boolean
    cep?: boolean
    cidade?: boolean
    rua?: boolean
    bairro?: boolean
    numero?: boolean
    complemento?: boolean
    email?: boolean
    tbmovimentos?: boolean | tbFornecedores$tbmovimentosArgs
    tbnf?: boolean | tbFornecedores$tbnfArgs
    _count?: boolean | TbFornecedoresCountOutputTypeArgs
  }


  export type tbFornecedoresInclude = {
    tbmovimentos?: boolean | tbFornecedores$tbmovimentosArgs
    tbnf?: boolean | tbFornecedores$tbnfArgs
    _count?: boolean | TbFornecedoresCountOutputTypeArgs
  }

  export type tbFornecedoresGetPayload<S extends boolean | null | undefined | tbFornecedoresArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbFornecedores :
    S extends undefined ? never :
    S extends { include: any } & (tbFornecedoresArgs | tbFornecedoresFindManyArgs)
    ? tbFornecedores  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbmovimentos' ? Array < tbMovimentosGetPayload<S['include'][P]>>  :
        P extends 'tbnf' ? Array < tbNfGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbFornecedoresCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbFornecedoresArgs | tbFornecedoresFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbmovimentos' ? Array < tbMovimentosGetPayload<S['select'][P]>>  :
        P extends 'tbnf' ? Array < tbNfGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbFornecedoresCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbFornecedores ? tbFornecedores[P] : never
  } 
      : tbFornecedores


  type tbFornecedoresCountArgs = 
    Omit<tbFornecedoresFindManyArgs, 'select' | 'include'> & {
      select?: TbFornecedoresCountAggregateInputType | true
    }

  export interface tbFornecedoresDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbFornecedores that matches the filter.
     * @param {tbFornecedoresFindUniqueArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbFornecedoresFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbFornecedoresFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbFornecedores'> extends True ? Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>> : Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | null, null>

    /**
     * Find one TbFornecedores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbFornecedoresFindUniqueOrThrowArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbFornecedoresFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbFornecedoresFindUniqueOrThrowArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Find the first TbFornecedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindFirstArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbFornecedoresFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbFornecedoresFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbFornecedores'> extends True ? Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>> : Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | null, null>

    /**
     * Find the first TbFornecedores that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindFirstOrThrowArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbFornecedoresFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbFornecedoresFindFirstOrThrowArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Find zero or more TbFornecedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findMany()
     * 
     * // Get first 10 TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findMany({ take: 10 })
     * 
     * // Only select the `idfor`
     * const tbFornecedoresWithIdforOnly = await prisma.tbFornecedores.findMany({ select: { idfor: true } })
     * 
    **/
    findMany<T extends tbFornecedoresFindManyArgs>(
      args?: SelectSubset<T, tbFornecedoresFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbFornecedoresGetPayload<T>>>

    /**
     * Create a TbFornecedores.
     * @param {tbFornecedoresCreateArgs} args - Arguments to create a TbFornecedores.
     * @example
     * // Create one TbFornecedores
     * const TbFornecedores = await prisma.tbFornecedores.create({
     *   data: {
     *     // ... data to create a TbFornecedores
     *   }
     * })
     * 
    **/
    create<T extends tbFornecedoresCreateArgs>(
      args: SelectSubset<T, tbFornecedoresCreateArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Create many TbFornecedores.
     *     @param {tbFornecedoresCreateManyArgs} args - Arguments to create many TbFornecedores.
     *     @example
     *     // Create many TbFornecedores
     *     const tbFornecedores = await prisma.tbFornecedores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbFornecedoresCreateManyArgs>(
      args?: SelectSubset<T, tbFornecedoresCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbFornecedores.
     * @param {tbFornecedoresDeleteArgs} args - Arguments to delete one TbFornecedores.
     * @example
     * // Delete one TbFornecedores
     * const TbFornecedores = await prisma.tbFornecedores.delete({
     *   where: {
     *     // ... filter to delete one TbFornecedores
     *   }
     * })
     * 
    **/
    delete<T extends tbFornecedoresDeleteArgs>(
      args: SelectSubset<T, tbFornecedoresDeleteArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Update one TbFornecedores.
     * @param {tbFornecedoresUpdateArgs} args - Arguments to update one TbFornecedores.
     * @example
     * // Update one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbFornecedoresUpdateArgs>(
      args: SelectSubset<T, tbFornecedoresUpdateArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Delete zero or more TbFornecedores.
     * @param {tbFornecedoresDeleteManyArgs} args - Arguments to filter TbFornecedores to delete.
     * @example
     * // Delete a few TbFornecedores
     * const { count } = await prisma.tbFornecedores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbFornecedoresDeleteManyArgs>(
      args?: SelectSubset<T, tbFornecedoresDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbFornecedoresUpdateManyArgs>(
      args: SelectSubset<T, tbFornecedoresUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbFornecedores.
     * @param {tbFornecedoresUpsertArgs} args - Arguments to update or create a TbFornecedores.
     * @example
     * // Update or create a TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.upsert({
     *   create: {
     *     // ... data to create a TbFornecedores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbFornecedores we want to update
     *   }
     * })
    **/
    upsert<T extends tbFornecedoresUpsertArgs>(
      args: SelectSubset<T, tbFornecedoresUpsertArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Count the number of TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresCountArgs} args - Arguments to filter TbFornecedores to count.
     * @example
     * // Count the number of TbFornecedores
     * const count = await prisma.tbFornecedores.count({
     *   where: {
     *     // ... the filter for the TbFornecedores we want to count
     *   }
     * })
    **/
    count<T extends tbFornecedoresCountArgs>(
      args?: Subset<T, tbFornecedoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbFornecedoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbFornecedoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbFornecedoresAggregateArgs>(args: Subset<T, TbFornecedoresAggregateArgs>): Prisma.PrismaPromise<GetTbFornecedoresAggregateType<T>>

    /**
     * Group by TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbFornecedoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbFornecedoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbFornecedoresGroupByArgs['orderBy'] }
        : { orderBy?: TbFornecedoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbFornecedoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbFornecedoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbFornecedores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbFornecedoresClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbmovimentos<T extends tbFornecedores$tbmovimentosArgs= {}>(args?: Subset<T, tbFornecedores$tbmovimentosArgs>): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>| Null>;

    tbnf<T extends tbFornecedores$tbnfArgs= {}>(args?: Subset<T, tbFornecedores$tbnfArgs>): Prisma.PrismaPromise<Array<tbNfGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbFornecedores base type for findUnique actions
   */
  export type tbFornecedoresFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where: tbFornecedoresWhereUniqueInput
  }

  /**
   * tbFornecedores findUnique
   */
  export interface tbFornecedoresFindUniqueArgs extends tbFornecedoresFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbFornecedores findUniqueOrThrow
   */
  export type tbFornecedoresFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores base type for findFirst actions
   */
  export type tbFornecedoresFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbFornecedores.
     */
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }

  /**
   * tbFornecedores findFirst
   */
  export interface tbFornecedoresFindFirstArgs extends tbFornecedoresFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbFornecedores findFirstOrThrow
   */
  export type tbFornecedoresFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbFornecedores.
     */
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }


  /**
   * tbFornecedores findMany
   */
  export type tbFornecedoresFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }


  /**
   * tbFornecedores create
   */
  export type tbFornecedoresCreateArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The data needed to create a tbFornecedores.
     */
    data: XOR<tbFornecedoresCreateInput, tbFornecedoresUncheckedCreateInput>
  }


  /**
   * tbFornecedores createMany
   */
  export type tbFornecedoresCreateManyArgs = {
    /**
     * The data used to create many tbFornecedores.
     */
    data: Enumerable<tbFornecedoresCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbFornecedores update
   */
  export type tbFornecedoresUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The data needed to update a tbFornecedores.
     */
    data: XOR<tbFornecedoresUpdateInput, tbFornecedoresUncheckedUpdateInput>
    /**
     * Choose, which tbFornecedores to update.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores updateMany
   */
  export type tbFornecedoresUpdateManyArgs = {
    /**
     * The data used to update tbFornecedores.
     */
    data: XOR<tbFornecedoresUpdateManyMutationInput, tbFornecedoresUncheckedUpdateManyInput>
    /**
     * Filter which tbFornecedores to update
     */
    where?: tbFornecedoresWhereInput
  }


  /**
   * tbFornecedores upsert
   */
  export type tbFornecedoresUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The filter to search for the tbFornecedores to update in case it exists.
     */
    where: tbFornecedoresWhereUniqueInput
    /**
     * In case the tbFornecedores found by the `where` argument doesn't exist, create a new tbFornecedores with this data.
     */
    create: XOR<tbFornecedoresCreateInput, tbFornecedoresUncheckedCreateInput>
    /**
     * In case the tbFornecedores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbFornecedoresUpdateInput, tbFornecedoresUncheckedUpdateInput>
  }


  /**
   * tbFornecedores delete
   */
  export type tbFornecedoresDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter which tbFornecedores to delete.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores deleteMany
   */
  export type tbFornecedoresDeleteManyArgs = {
    /**
     * Filter which tbFornecedores to delete
     */
    where?: tbFornecedoresWhereInput
  }


  /**
   * tbFornecedores.tbmovimentos
   */
  export type tbFornecedores$tbmovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    cursor?: tbMovimentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbFornecedores.tbnf
   */
  export type tbFornecedores$tbnfArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    where?: tbNfWhereInput
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    cursor?: tbNfWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNfScalarFieldEnum>
  }


  /**
   * tbFornecedores without action
   */
  export type tbFornecedoresArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
  }



  /**
   * Model tbLocais
   */


  export type AggregateTbLocais = {
    _count: TbLocaisCountAggregateOutputType | null
    _avg: TbLocaisAvgAggregateOutputType | null
    _sum: TbLocaisSumAggregateOutputType | null
    _min: TbLocaisMinAggregateOutputType | null
    _max: TbLocaisMaxAggregateOutputType | null
  }

  export type TbLocaisAvgAggregateOutputType = {
    idlocal: number | null
  }

  export type TbLocaisSumAggregateOutputType = {
    idlocal: number | null
  }

  export type TbLocaisMinAggregateOutputType = {
    idlocal: number | null
    nomelocal: string | null
  }

  export type TbLocaisMaxAggregateOutputType = {
    idlocal: number | null
    nomelocal: string | null
  }

  export type TbLocaisCountAggregateOutputType = {
    idlocal: number
    nomelocal: number
    _all: number
  }


  export type TbLocaisAvgAggregateInputType = {
    idlocal?: true
  }

  export type TbLocaisSumAggregateInputType = {
    idlocal?: true
  }

  export type TbLocaisMinAggregateInputType = {
    idlocal?: true
    nomelocal?: true
  }

  export type TbLocaisMaxAggregateInputType = {
    idlocal?: true
    nomelocal?: true
  }

  export type TbLocaisCountAggregateInputType = {
    idlocal?: true
    nomelocal?: true
    _all?: true
  }

  export type TbLocaisAggregateArgs = {
    /**
     * Filter which tbLocais to aggregate.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbLocais
    **/
    _count?: true | TbLocaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbLocaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbLocaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbLocaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbLocaisMaxAggregateInputType
  }

  export type GetTbLocaisAggregateType<T extends TbLocaisAggregateArgs> = {
        [P in keyof T & keyof AggregateTbLocais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbLocais[P]>
      : GetScalarType<T[P], AggregateTbLocais[P]>
  }




  export type TbLocaisGroupByArgs = {
    where?: tbLocaisWhereInput
    orderBy?: Enumerable<tbLocaisOrderByWithAggregationInput>
    by: TbLocaisScalarFieldEnum[]
    having?: tbLocaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbLocaisCountAggregateInputType | true
    _avg?: TbLocaisAvgAggregateInputType
    _sum?: TbLocaisSumAggregateInputType
    _min?: TbLocaisMinAggregateInputType
    _max?: TbLocaisMaxAggregateInputType
  }


  export type TbLocaisGroupByOutputType = {
    idlocal: number
    nomelocal: string | null
    _count: TbLocaisCountAggregateOutputType | null
    _avg: TbLocaisAvgAggregateOutputType | null
    _sum: TbLocaisSumAggregateOutputType | null
    _min: TbLocaisMinAggregateOutputType | null
    _max: TbLocaisMaxAggregateOutputType | null
  }

  type GetTbLocaisGroupByPayload<T extends TbLocaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbLocaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbLocaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbLocaisGroupByOutputType[P]>
            : GetScalarType<T[P], TbLocaisGroupByOutputType[P]>
        }
      >
    >


  export type tbLocaisSelect = {
    idlocal?: boolean
    nomelocal?: boolean
    tbestoque?: boolean | tbLocais$tbestoqueArgs
    tbmovitens?: boolean | tbLocais$tbmovitensArgs
    _count?: boolean | TbLocaisCountOutputTypeArgs
  }


  export type tbLocaisInclude = {
    tbestoque?: boolean | tbLocais$tbestoqueArgs
    tbmovitens?: boolean | tbLocais$tbmovitensArgs
    _count?: boolean | TbLocaisCountOutputTypeArgs
  }

  export type tbLocaisGetPayload<S extends boolean | null | undefined | tbLocaisArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbLocais :
    S extends undefined ? never :
    S extends { include: any } & (tbLocaisArgs | tbLocaisFindManyArgs)
    ? tbLocais  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbestoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbLocaisCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbLocaisArgs | tbLocaisFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbestoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbLocaisCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbLocais ? tbLocais[P] : never
  } 
      : tbLocais


  type tbLocaisCountArgs = 
    Omit<tbLocaisFindManyArgs, 'select' | 'include'> & {
      select?: TbLocaisCountAggregateInputType | true
    }

  export interface tbLocaisDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbLocais that matches the filter.
     * @param {tbLocaisFindUniqueArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbLocaisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbLocaisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbLocais'> extends True ? Prisma__tbLocaisClient<tbLocaisGetPayload<T>> : Prisma__tbLocaisClient<tbLocaisGetPayload<T> | null, null>

    /**
     * Find one TbLocais that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbLocaisFindUniqueOrThrowArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbLocaisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbLocaisFindUniqueOrThrowArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Find the first TbLocais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindFirstArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbLocaisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbLocaisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbLocais'> extends True ? Prisma__tbLocaisClient<tbLocaisGetPayload<T>> : Prisma__tbLocaisClient<tbLocaisGetPayload<T> | null, null>

    /**
     * Find the first TbLocais that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindFirstOrThrowArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbLocaisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbLocaisFindFirstOrThrowArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Find zero or more TbLocais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbLocais
     * const tbLocais = await prisma.tbLocais.findMany()
     * 
     * // Get first 10 TbLocais
     * const tbLocais = await prisma.tbLocais.findMany({ take: 10 })
     * 
     * // Only select the `idlocal`
     * const tbLocaisWithIdlocalOnly = await prisma.tbLocais.findMany({ select: { idlocal: true } })
     * 
    **/
    findMany<T extends tbLocaisFindManyArgs>(
      args?: SelectSubset<T, tbLocaisFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbLocaisGetPayload<T>>>

    /**
     * Create a TbLocais.
     * @param {tbLocaisCreateArgs} args - Arguments to create a TbLocais.
     * @example
     * // Create one TbLocais
     * const TbLocais = await prisma.tbLocais.create({
     *   data: {
     *     // ... data to create a TbLocais
     *   }
     * })
     * 
    **/
    create<T extends tbLocaisCreateArgs>(
      args: SelectSubset<T, tbLocaisCreateArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Create many TbLocais.
     *     @param {tbLocaisCreateManyArgs} args - Arguments to create many TbLocais.
     *     @example
     *     // Create many TbLocais
     *     const tbLocais = await prisma.tbLocais.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbLocaisCreateManyArgs>(
      args?: SelectSubset<T, tbLocaisCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbLocais.
     * @param {tbLocaisDeleteArgs} args - Arguments to delete one TbLocais.
     * @example
     * // Delete one TbLocais
     * const TbLocais = await prisma.tbLocais.delete({
     *   where: {
     *     // ... filter to delete one TbLocais
     *   }
     * })
     * 
    **/
    delete<T extends tbLocaisDeleteArgs>(
      args: SelectSubset<T, tbLocaisDeleteArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Update one TbLocais.
     * @param {tbLocaisUpdateArgs} args - Arguments to update one TbLocais.
     * @example
     * // Update one TbLocais
     * const tbLocais = await prisma.tbLocais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbLocaisUpdateArgs>(
      args: SelectSubset<T, tbLocaisUpdateArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Delete zero or more TbLocais.
     * @param {tbLocaisDeleteManyArgs} args - Arguments to filter TbLocais to delete.
     * @example
     * // Delete a few TbLocais
     * const { count } = await prisma.tbLocais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbLocaisDeleteManyArgs>(
      args?: SelectSubset<T, tbLocaisDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbLocais
     * const tbLocais = await prisma.tbLocais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbLocaisUpdateManyArgs>(
      args: SelectSubset<T, tbLocaisUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbLocais.
     * @param {tbLocaisUpsertArgs} args - Arguments to update or create a TbLocais.
     * @example
     * // Update or create a TbLocais
     * const tbLocais = await prisma.tbLocais.upsert({
     *   create: {
     *     // ... data to create a TbLocais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbLocais we want to update
     *   }
     * })
    **/
    upsert<T extends tbLocaisUpsertArgs>(
      args: SelectSubset<T, tbLocaisUpsertArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Count the number of TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisCountArgs} args - Arguments to filter TbLocais to count.
     * @example
     * // Count the number of TbLocais
     * const count = await prisma.tbLocais.count({
     *   where: {
     *     // ... the filter for the TbLocais we want to count
     *   }
     * })
    **/
    count<T extends tbLocaisCountArgs>(
      args?: Subset<T, tbLocaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbLocaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbLocaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbLocaisAggregateArgs>(args: Subset<T, TbLocaisAggregateArgs>): Prisma.PrismaPromise<GetTbLocaisAggregateType<T>>

    /**
     * Group by TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbLocaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbLocaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbLocaisGroupByArgs['orderBy'] }
        : { orderBy?: TbLocaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbLocaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbLocaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbLocais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbLocaisClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbestoque<T extends tbLocais$tbestoqueArgs= {}>(args?: Subset<T, tbLocais$tbestoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbmovitens<T extends tbLocais$tbmovitensArgs= {}>(args?: Subset<T, tbLocais$tbmovitensArgs>): Prisma.PrismaPromise<Array<tbMovitensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbLocais base type for findUnique actions
   */
  export type tbLocaisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where: tbLocaisWhereUniqueInput
  }

  /**
   * tbLocais findUnique
   */
  export interface tbLocaisFindUniqueArgs extends tbLocaisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbLocais findUniqueOrThrow
   */
  export type tbLocaisFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais base type for findFirst actions
   */
  export type tbLocaisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbLocais.
     */
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }

  /**
   * tbLocais findFirst
   */
  export interface tbLocaisFindFirstArgs extends tbLocaisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbLocais findFirstOrThrow
   */
  export type tbLocaisFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbLocais.
     */
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }


  /**
   * tbLocais findMany
   */
  export type tbLocaisFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }


  /**
   * tbLocais create
   */
  export type tbLocaisCreateArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The data needed to create a tbLocais.
     */
    data: XOR<tbLocaisCreateInput, tbLocaisUncheckedCreateInput>
  }


  /**
   * tbLocais createMany
   */
  export type tbLocaisCreateManyArgs = {
    /**
     * The data used to create many tbLocais.
     */
    data: Enumerable<tbLocaisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbLocais update
   */
  export type tbLocaisUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The data needed to update a tbLocais.
     */
    data: XOR<tbLocaisUpdateInput, tbLocaisUncheckedUpdateInput>
    /**
     * Choose, which tbLocais to update.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais updateMany
   */
  export type tbLocaisUpdateManyArgs = {
    /**
     * The data used to update tbLocais.
     */
    data: XOR<tbLocaisUpdateManyMutationInput, tbLocaisUncheckedUpdateManyInput>
    /**
     * Filter which tbLocais to update
     */
    where?: tbLocaisWhereInput
  }


  /**
   * tbLocais upsert
   */
  export type tbLocaisUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The filter to search for the tbLocais to update in case it exists.
     */
    where: tbLocaisWhereUniqueInput
    /**
     * In case the tbLocais found by the `where` argument doesn't exist, create a new tbLocais with this data.
     */
    create: XOR<tbLocaisCreateInput, tbLocaisUncheckedCreateInput>
    /**
     * In case the tbLocais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbLocaisUpdateInput, tbLocaisUncheckedUpdateInput>
  }


  /**
   * tbLocais delete
   */
  export type tbLocaisDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter which tbLocais to delete.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais deleteMany
   */
  export type tbLocaisDeleteManyArgs = {
    /**
     * Filter which tbLocais to delete
     */
    where?: tbLocaisWhereInput
  }


  /**
   * tbLocais.tbestoque
   */
  export type tbLocais$tbestoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbLocais.tbmovitens
   */
  export type tbLocais$tbmovitensArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    where?: tbMovitensWhereInput
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    cursor?: tbMovitensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }


  /**
   * tbLocais without action
   */
  export type tbLocaisArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
  }



  /**
   * Model tbMovimentos
   */


  export type AggregateTbMovimentos = {
    _count: TbMovimentosCountAggregateOutputType | null
    _avg: TbMovimentosAvgAggregateOutputType | null
    _sum: TbMovimentosSumAggregateOutputType | null
    _min: TbMovimentosMinAggregateOutputType | null
    _max: TbMovimentosMaxAggregateOutputType | null
  }

  export type TbMovimentosAvgAggregateOutputType = {
    idmovimento: number | null
    idfor: number | null
    idusuario_alteracao: number | null
  }

  export type TbMovimentosSumAggregateOutputType = {
    idmovimento: number | null
    idfor: number | null
    idusuario_alteracao: number | null
  }

  export type TbMovimentosMinAggregateOutputType = {
    idmovimento: number | null
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
  }

  export type TbMovimentosMaxAggregateOutputType = {
    idmovimento: number | null
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
  }

  export type TbMovimentosCountAggregateOutputType = {
    idmovimento: number
    tipmov: number
    idfor: number
    idusuario_alteracao: number
    dtinc: number
    _all: number
  }


  export type TbMovimentosAvgAggregateInputType = {
    idmovimento?: true
    idfor?: true
    idusuario_alteracao?: true
  }

  export type TbMovimentosSumAggregateInputType = {
    idmovimento?: true
    idfor?: true
    idusuario_alteracao?: true
  }

  export type TbMovimentosMinAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
  }

  export type TbMovimentosMaxAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
  }

  export type TbMovimentosCountAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
    _all?: true
  }

  export type TbMovimentosAggregateArgs = {
    /**
     * Filter which tbMovimentos to aggregate.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbMovimentos
    **/
    _count?: true | TbMovimentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbMovimentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbMovimentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbMovimentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbMovimentosMaxAggregateInputType
  }

  export type GetTbMovimentosAggregateType<T extends TbMovimentosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbMovimentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbMovimentos[P]>
      : GetScalarType<T[P], AggregateTbMovimentos[P]>
  }




  export type TbMovimentosGroupByArgs = {
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithAggregationInput>
    by: TbMovimentosScalarFieldEnum[]
    having?: tbMovimentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbMovimentosCountAggregateInputType | true
    _avg?: TbMovimentosAvgAggregateInputType
    _sum?: TbMovimentosSumAggregateInputType
    _min?: TbMovimentosMinAggregateInputType
    _max?: TbMovimentosMaxAggregateInputType
  }


  export type TbMovimentosGroupByOutputType = {
    idmovimento: number
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
    _count: TbMovimentosCountAggregateOutputType | null
    _avg: TbMovimentosAvgAggregateOutputType | null
    _sum: TbMovimentosSumAggregateOutputType | null
    _min: TbMovimentosMinAggregateOutputType | null
    _max: TbMovimentosMaxAggregateOutputType | null
  }

  type GetTbMovimentosGroupByPayload<T extends TbMovimentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbMovimentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbMovimentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbMovimentosGroupByOutputType[P]>
            : GetScalarType<T[P], TbMovimentosGroupByOutputType[P]>
        }
      >
    >


  export type tbMovimentosSelect = {
    idmovimento?: boolean
    tipmov?: boolean
    idfor?: boolean
    idusuario_alteracao?: boolean
    dtinc?: boolean
    tbfornecedores?: boolean | tbFornecedoresArgs
    tbusuarios?: boolean | tbUsuariosArgs
    tbmovitens?: boolean | tbMovimentos$tbmovitensArgs
    tbnf?: boolean | tbNfArgs
    _count?: boolean | TbMovimentosCountOutputTypeArgs
  }


  export type tbMovimentosInclude = {
    tbfornecedores?: boolean | tbFornecedoresArgs
    tbusuarios?: boolean | tbUsuariosArgs
    tbmovitens?: boolean | tbMovimentos$tbmovitensArgs
    tbnf?: boolean | tbNfArgs
    _count?: boolean | TbMovimentosCountOutputTypeArgs
  }

  export type tbMovimentosGetPayload<S extends boolean | null | undefined | tbMovimentosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbMovimentos :
    S extends undefined ? never :
    S extends { include: any } & (tbMovimentosArgs | tbMovimentosFindManyArgs)
    ? tbMovimentos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbfornecedores' ? tbFornecedoresGetPayload<S['include'][P]> | null :
        P extends 'tbusuarios' ? tbUsuariosGetPayload<S['include'][P]> | null :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['include'][P]>>  :
        P extends 'tbnf' ? tbNfGetPayload<S['include'][P]> | null :
        P extends '_count' ? TbMovimentosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbMovimentosArgs | tbMovimentosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbfornecedores' ? tbFornecedoresGetPayload<S['select'][P]> | null :
        P extends 'tbusuarios' ? tbUsuariosGetPayload<S['select'][P]> | null :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['select'][P]>>  :
        P extends 'tbnf' ? tbNfGetPayload<S['select'][P]> | null :
        P extends '_count' ? TbMovimentosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbMovimentos ? tbMovimentos[P] : never
  } 
      : tbMovimentos


  type tbMovimentosCountArgs = 
    Omit<tbMovimentosFindManyArgs, 'select' | 'include'> & {
      select?: TbMovimentosCountAggregateInputType | true
    }

  export interface tbMovimentosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbMovimentos that matches the filter.
     * @param {tbMovimentosFindUniqueArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbMovimentosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbMovimentosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbMovimentos'> extends True ? Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>> : Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | null, null>

    /**
     * Find one TbMovimentos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbMovimentosFindUniqueOrThrowArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbMovimentosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbMovimentosFindUniqueOrThrowArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Find the first TbMovimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindFirstArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbMovimentosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbMovimentosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbMovimentos'> extends True ? Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>> : Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | null, null>

    /**
     * Find the first TbMovimentos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindFirstOrThrowArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbMovimentosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbMovimentosFindFirstOrThrowArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Find zero or more TbMovimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findMany()
     * 
     * // Get first 10 TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findMany({ take: 10 })
     * 
     * // Only select the `idmovimento`
     * const tbMovimentosWithIdmovimentoOnly = await prisma.tbMovimentos.findMany({ select: { idmovimento: true } })
     * 
    **/
    findMany<T extends tbMovimentosFindManyArgs>(
      args?: SelectSubset<T, tbMovimentosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>>

    /**
     * Create a TbMovimentos.
     * @param {tbMovimentosCreateArgs} args - Arguments to create a TbMovimentos.
     * @example
     * // Create one TbMovimentos
     * const TbMovimentos = await prisma.tbMovimentos.create({
     *   data: {
     *     // ... data to create a TbMovimentos
     *   }
     * })
     * 
    **/
    create<T extends tbMovimentosCreateArgs>(
      args: SelectSubset<T, tbMovimentosCreateArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Create many TbMovimentos.
     *     @param {tbMovimentosCreateManyArgs} args - Arguments to create many TbMovimentos.
     *     @example
     *     // Create many TbMovimentos
     *     const tbMovimentos = await prisma.tbMovimentos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbMovimentosCreateManyArgs>(
      args?: SelectSubset<T, tbMovimentosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbMovimentos.
     * @param {tbMovimentosDeleteArgs} args - Arguments to delete one TbMovimentos.
     * @example
     * // Delete one TbMovimentos
     * const TbMovimentos = await prisma.tbMovimentos.delete({
     *   where: {
     *     // ... filter to delete one TbMovimentos
     *   }
     * })
     * 
    **/
    delete<T extends tbMovimentosDeleteArgs>(
      args: SelectSubset<T, tbMovimentosDeleteArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Update one TbMovimentos.
     * @param {tbMovimentosUpdateArgs} args - Arguments to update one TbMovimentos.
     * @example
     * // Update one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbMovimentosUpdateArgs>(
      args: SelectSubset<T, tbMovimentosUpdateArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Delete zero or more TbMovimentos.
     * @param {tbMovimentosDeleteManyArgs} args - Arguments to filter TbMovimentos to delete.
     * @example
     * // Delete a few TbMovimentos
     * const { count } = await prisma.tbMovimentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbMovimentosDeleteManyArgs>(
      args?: SelectSubset<T, tbMovimentosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbMovimentosUpdateManyArgs>(
      args: SelectSubset<T, tbMovimentosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbMovimentos.
     * @param {tbMovimentosUpsertArgs} args - Arguments to update or create a TbMovimentos.
     * @example
     * // Update or create a TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.upsert({
     *   create: {
     *     // ... data to create a TbMovimentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbMovimentos we want to update
     *   }
     * })
    **/
    upsert<T extends tbMovimentosUpsertArgs>(
      args: SelectSubset<T, tbMovimentosUpsertArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Count the number of TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosCountArgs} args - Arguments to filter TbMovimentos to count.
     * @example
     * // Count the number of TbMovimentos
     * const count = await prisma.tbMovimentos.count({
     *   where: {
     *     // ... the filter for the TbMovimentos we want to count
     *   }
     * })
    **/
    count<T extends tbMovimentosCountArgs>(
      args?: Subset<T, tbMovimentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbMovimentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovimentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbMovimentosAggregateArgs>(args: Subset<T, TbMovimentosAggregateArgs>): Prisma.PrismaPromise<GetTbMovimentosAggregateType<T>>

    /**
     * Group by TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovimentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbMovimentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbMovimentosGroupByArgs['orderBy'] }
        : { orderBy?: TbMovimentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbMovimentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbMovimentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbMovimentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbMovimentosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbfornecedores<T extends tbFornecedoresArgs= {}>(args?: Subset<T, tbFornecedoresArgs>): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | Null>;

    tbusuarios<T extends tbUsuariosArgs= {}>(args?: Subset<T, tbUsuariosArgs>): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | Null>;

    tbmovitens<T extends tbMovimentos$tbmovitensArgs= {}>(args?: Subset<T, tbMovimentos$tbmovitensArgs>): Prisma.PrismaPromise<Array<tbMovitensGetPayload<T>>| Null>;

    tbnf<T extends tbNfArgs= {}>(args?: Subset<T, tbNfArgs>): Prisma__tbNfClient<tbNfGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbMovimentos base type for findUnique actions
   */
  export type tbMovimentosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where: tbMovimentosWhereUniqueInput
  }

  /**
   * tbMovimentos findUnique
   */
  export interface tbMovimentosFindUniqueArgs extends tbMovimentosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovimentos findUniqueOrThrow
   */
  export type tbMovimentosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos base type for findFirst actions
   */
  export type tbMovimentosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovimentos.
     */
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }

  /**
   * tbMovimentos findFirst
   */
  export interface tbMovimentosFindFirstArgs extends tbMovimentosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovimentos findFirstOrThrow
   */
  export type tbMovimentosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovimentos.
     */
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbMovimentos findMany
   */
  export type tbMovimentosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbMovimentos create
   */
  export type tbMovimentosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The data needed to create a tbMovimentos.
     */
    data: XOR<tbMovimentosCreateInput, tbMovimentosUncheckedCreateInput>
  }


  /**
   * tbMovimentos createMany
   */
  export type tbMovimentosCreateManyArgs = {
    /**
     * The data used to create many tbMovimentos.
     */
    data: Enumerable<tbMovimentosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbMovimentos update
   */
  export type tbMovimentosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The data needed to update a tbMovimentos.
     */
    data: XOR<tbMovimentosUpdateInput, tbMovimentosUncheckedUpdateInput>
    /**
     * Choose, which tbMovimentos to update.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos updateMany
   */
  export type tbMovimentosUpdateManyArgs = {
    /**
     * The data used to update tbMovimentos.
     */
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyInput>
    /**
     * Filter which tbMovimentos to update
     */
    where?: tbMovimentosWhereInput
  }


  /**
   * tbMovimentos upsert
   */
  export type tbMovimentosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The filter to search for the tbMovimentos to update in case it exists.
     */
    where: tbMovimentosWhereUniqueInput
    /**
     * In case the tbMovimentos found by the `where` argument doesn't exist, create a new tbMovimentos with this data.
     */
    create: XOR<tbMovimentosCreateInput, tbMovimentosUncheckedCreateInput>
    /**
     * In case the tbMovimentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbMovimentosUpdateInput, tbMovimentosUncheckedUpdateInput>
  }


  /**
   * tbMovimentos delete
   */
  export type tbMovimentosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter which tbMovimentos to delete.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos deleteMany
   */
  export type tbMovimentosDeleteManyArgs = {
    /**
     * Filter which tbMovimentos to delete
     */
    where?: tbMovimentosWhereInput
  }


  /**
   * tbMovimentos.tbmovitens
   */
  export type tbMovimentos$tbmovitensArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    where?: tbMovitensWhereInput
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    cursor?: tbMovitensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }


  /**
   * tbMovimentos without action
   */
  export type tbMovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
  }



  /**
   * Model tbMovitens
   */


  export type AggregateTbMovitens = {
    _count: TbMovitensCountAggregateOutputType | null
    _avg: TbMovitensAvgAggregateOutputType | null
    _sum: TbMovitensSumAggregateOutputType | null
    _min: TbMovitensMinAggregateOutputType | null
    _max: TbMovitensMaxAggregateOutputType | null
  }

  export type TbMovitensAvgAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
  }

  export type TbMovitensSumAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: Decimal | null
  }

  export type TbMovitensMinAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    dtinc: Date | null
    quantidade: Decimal | null
  }

  export type TbMovitensMaxAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    dtinc: Date | null
    quantidade: Decimal | null
  }

  export type TbMovitensCountAggregateOutputType = {
    idmovimento: number
    seqitem: number
    idproduto: number
    idlocal: number
    dtinc: number
    quantidade: number
    _all: number
  }


  export type TbMovitensAvgAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbMovitensSumAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbMovitensMinAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
  }

  export type TbMovitensMaxAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
  }

  export type TbMovitensCountAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
    _all?: true
  }

  export type TbMovitensAggregateArgs = {
    /**
     * Filter which tbMovitens to aggregate.
     */
    where?: tbMovitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovitens to fetch.
     */
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbMovitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbMovitens
    **/
    _count?: true | TbMovitensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbMovitensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbMovitensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbMovitensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbMovitensMaxAggregateInputType
  }

  export type GetTbMovitensAggregateType<T extends TbMovitensAggregateArgs> = {
        [P in keyof T & keyof AggregateTbMovitens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbMovitens[P]>
      : GetScalarType<T[P], AggregateTbMovitens[P]>
  }




  export type TbMovitensGroupByArgs = {
    where?: tbMovitensWhereInput
    orderBy?: Enumerable<tbMovitensOrderByWithAggregationInput>
    by: TbMovitensScalarFieldEnum[]
    having?: tbMovitensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbMovitensCountAggregateInputType | true
    _avg?: TbMovitensAvgAggregateInputType
    _sum?: TbMovitensSumAggregateInputType
    _min?: TbMovitensMinAggregateInputType
    _max?: TbMovitensMaxAggregateInputType
  }


  export type TbMovitensGroupByOutputType = {
    idmovimento: number
    seqitem: number
    idproduto: number
    idlocal: number | null
    dtinc: Date | null
    quantidade: Decimal | null
    _count: TbMovitensCountAggregateOutputType | null
    _avg: TbMovitensAvgAggregateOutputType | null
    _sum: TbMovitensSumAggregateOutputType | null
    _min: TbMovitensMinAggregateOutputType | null
    _max: TbMovitensMaxAggregateOutputType | null
  }

  type GetTbMovitensGroupByPayload<T extends TbMovitensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbMovitensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbMovitensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbMovitensGroupByOutputType[P]>
            : GetScalarType<T[P], TbMovitensGroupByOutputType[P]>
        }
      >
    >


  export type tbMovitensSelect = {
    idmovimento?: boolean
    seqitem?: boolean
    idproduto?: boolean
    idlocal?: boolean
    dtinc?: boolean
    quantidade?: boolean
    tblocais?: boolean | tbLocaisArgs
    tbmovimentos?: boolean | tbMovimentosArgs
    tbprodutos?: boolean | tbProdutosArgs
    tbnfitens?: boolean | tbMovitens$tbnfitensArgs
    _count?: boolean | TbMovitensCountOutputTypeArgs
  }


  export type tbMovitensInclude = {
    tblocais?: boolean | tbLocaisArgs
    tbmovimentos?: boolean | tbMovimentosArgs
    tbprodutos?: boolean | tbProdutosArgs
    tbnfitens?: boolean | tbMovitens$tbnfitensArgs
    _count?: boolean | TbMovitensCountOutputTypeArgs
  }

  export type tbMovitensGetPayload<S extends boolean | null | undefined | tbMovitensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbMovitens :
    S extends undefined ? never :
    S extends { include: any } & (tbMovitensArgs | tbMovitensFindManyArgs)
    ? tbMovitens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tblocais' ? tbLocaisGetPayload<S['include'][P]> | null :
        P extends 'tbmovimentos' ? tbMovimentosGetPayload<S['include'][P]> :
        P extends 'tbprodutos' ? tbProdutosGetPayload<S['include'][P]> :
        P extends 'tbnfitens' ? Array < tbNfitensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbMovitensCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbMovitensArgs | tbMovitensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tblocais' ? tbLocaisGetPayload<S['select'][P]> | null :
        P extends 'tbmovimentos' ? tbMovimentosGetPayload<S['select'][P]> :
        P extends 'tbprodutos' ? tbProdutosGetPayload<S['select'][P]> :
        P extends 'tbnfitens' ? Array < tbNfitensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbMovitensCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbMovitens ? tbMovitens[P] : never
  } 
      : tbMovitens


  type tbMovitensCountArgs = 
    Omit<tbMovitensFindManyArgs, 'select' | 'include'> & {
      select?: TbMovitensCountAggregateInputType | true
    }

  export interface tbMovitensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbMovitens that matches the filter.
     * @param {tbMovitensFindUniqueArgs} args - Arguments to find a TbMovitens
     * @example
     * // Get one TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbMovitensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbMovitensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbMovitens'> extends True ? Prisma__tbMovitensClient<tbMovitensGetPayload<T>> : Prisma__tbMovitensClient<tbMovitensGetPayload<T> | null, null>

    /**
     * Find one TbMovitens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbMovitensFindUniqueOrThrowArgs} args - Arguments to find a TbMovitens
     * @example
     * // Get one TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbMovitensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbMovitensFindUniqueOrThrowArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Find the first TbMovitens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovitensFindFirstArgs} args - Arguments to find a TbMovitens
     * @example
     * // Get one TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbMovitensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbMovitensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbMovitens'> extends True ? Prisma__tbMovitensClient<tbMovitensGetPayload<T>> : Prisma__tbMovitensClient<tbMovitensGetPayload<T> | null, null>

    /**
     * Find the first TbMovitens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovitensFindFirstOrThrowArgs} args - Arguments to find a TbMovitens
     * @example
     * // Get one TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbMovitensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbMovitensFindFirstOrThrowArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Find zero or more TbMovitens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovitensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findMany()
     * 
     * // Get first 10 TbMovitens
     * const tbMovitens = await prisma.tbMovitens.findMany({ take: 10 })
     * 
     * // Only select the `idmovimento`
     * const tbMovitensWithIdmovimentoOnly = await prisma.tbMovitens.findMany({ select: { idmovimento: true } })
     * 
    **/
    findMany<T extends tbMovitensFindManyArgs>(
      args?: SelectSubset<T, tbMovitensFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbMovitensGetPayload<T>>>

    /**
     * Create a TbMovitens.
     * @param {tbMovitensCreateArgs} args - Arguments to create a TbMovitens.
     * @example
     * // Create one TbMovitens
     * const TbMovitens = await prisma.tbMovitens.create({
     *   data: {
     *     // ... data to create a TbMovitens
     *   }
     * })
     * 
    **/
    create<T extends tbMovitensCreateArgs>(
      args: SelectSubset<T, tbMovitensCreateArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Create many TbMovitens.
     *     @param {tbMovitensCreateManyArgs} args - Arguments to create many TbMovitens.
     *     @example
     *     // Create many TbMovitens
     *     const tbMovitens = await prisma.tbMovitens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbMovitensCreateManyArgs>(
      args?: SelectSubset<T, tbMovitensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbMovitens.
     * @param {tbMovitensDeleteArgs} args - Arguments to delete one TbMovitens.
     * @example
     * // Delete one TbMovitens
     * const TbMovitens = await prisma.tbMovitens.delete({
     *   where: {
     *     // ... filter to delete one TbMovitens
     *   }
     * })
     * 
    **/
    delete<T extends tbMovitensDeleteArgs>(
      args: SelectSubset<T, tbMovitensDeleteArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Update one TbMovitens.
     * @param {tbMovitensUpdateArgs} args - Arguments to update one TbMovitens.
     * @example
     * // Update one TbMovitens
     * const tbMovitens = await prisma.tbMovitens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbMovitensUpdateArgs>(
      args: SelectSubset<T, tbMovitensUpdateArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Delete zero or more TbMovitens.
     * @param {tbMovitensDeleteManyArgs} args - Arguments to filter TbMovitens to delete.
     * @example
     * // Delete a few TbMovitens
     * const { count } = await prisma.tbMovitens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbMovitensDeleteManyArgs>(
      args?: SelectSubset<T, tbMovitensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbMovitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovitensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbMovitens
     * const tbMovitens = await prisma.tbMovitens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbMovitensUpdateManyArgs>(
      args: SelectSubset<T, tbMovitensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbMovitens.
     * @param {tbMovitensUpsertArgs} args - Arguments to update or create a TbMovitens.
     * @example
     * // Update or create a TbMovitens
     * const tbMovitens = await prisma.tbMovitens.upsert({
     *   create: {
     *     // ... data to create a TbMovitens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbMovitens we want to update
     *   }
     * })
    **/
    upsert<T extends tbMovitensUpsertArgs>(
      args: SelectSubset<T, tbMovitensUpsertArgs>
    ): Prisma__tbMovitensClient<tbMovitensGetPayload<T>>

    /**
     * Count the number of TbMovitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovitensCountArgs} args - Arguments to filter TbMovitens to count.
     * @example
     * // Count the number of TbMovitens
     * const count = await prisma.tbMovitens.count({
     *   where: {
     *     // ... the filter for the TbMovitens we want to count
     *   }
     * })
    **/
    count<T extends tbMovitensCountArgs>(
      args?: Subset<T, tbMovitensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbMovitensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbMovitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovitensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbMovitensAggregateArgs>(args: Subset<T, TbMovitensAggregateArgs>): Prisma.PrismaPromise<GetTbMovitensAggregateType<T>>

    /**
     * Group by TbMovitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovitensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbMovitensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbMovitensGroupByArgs['orderBy'] }
        : { orderBy?: TbMovitensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbMovitensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbMovitensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbMovitens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbMovitensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tblocais<T extends tbLocaisArgs= {}>(args?: Subset<T, tbLocaisArgs>): Prisma__tbLocaisClient<tbLocaisGetPayload<T> | Null>;

    tbmovimentos<T extends tbMovimentosArgs= {}>(args?: Subset<T, tbMovimentosArgs>): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | Null>;

    tbprodutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    tbnfitens<T extends tbMovitens$tbnfitensArgs= {}>(args?: Subset<T, tbMovitens$tbnfitensArgs>): Prisma.PrismaPromise<Array<tbNfitensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbMovitens base type for findUnique actions
   */
  export type tbMovitensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter, which tbMovitens to fetch.
     */
    where: tbMovitensWhereUniqueInput
  }

  /**
   * tbMovitens findUnique
   */
  export interface tbMovitensFindUniqueArgs extends tbMovitensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovitens findUniqueOrThrow
   */
  export type tbMovitensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter, which tbMovitens to fetch.
     */
    where: tbMovitensWhereUniqueInput
  }


  /**
   * tbMovitens base type for findFirst actions
   */
  export type tbMovitensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter, which tbMovitens to fetch.
     */
    where?: tbMovitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovitens to fetch.
     */
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovitens.
     */
    cursor?: tbMovitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovitens.
     */
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }

  /**
   * tbMovitens findFirst
   */
  export interface tbMovitensFindFirstArgs extends tbMovitensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovitens findFirstOrThrow
   */
  export type tbMovitensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter, which tbMovitens to fetch.
     */
    where?: tbMovitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovitens to fetch.
     */
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovitens.
     */
    cursor?: tbMovitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovitens.
     */
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }


  /**
   * tbMovitens findMany
   */
  export type tbMovitensFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter, which tbMovitens to fetch.
     */
    where?: tbMovitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovitens to fetch.
     */
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbMovitens.
     */
    cursor?: tbMovitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovitens.
     */
    skip?: number
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }


  /**
   * tbMovitens create
   */
  export type tbMovitensCreateArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * The data needed to create a tbMovitens.
     */
    data: XOR<tbMovitensCreateInput, tbMovitensUncheckedCreateInput>
  }


  /**
   * tbMovitens createMany
   */
  export type tbMovitensCreateManyArgs = {
    /**
     * The data used to create many tbMovitens.
     */
    data: Enumerable<tbMovitensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbMovitens update
   */
  export type tbMovitensUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * The data needed to update a tbMovitens.
     */
    data: XOR<tbMovitensUpdateInput, tbMovitensUncheckedUpdateInput>
    /**
     * Choose, which tbMovitens to update.
     */
    where: tbMovitensWhereUniqueInput
  }


  /**
   * tbMovitens updateMany
   */
  export type tbMovitensUpdateManyArgs = {
    /**
     * The data used to update tbMovitens.
     */
    data: XOR<tbMovitensUpdateManyMutationInput, tbMovitensUncheckedUpdateManyInput>
    /**
     * Filter which tbMovitens to update
     */
    where?: tbMovitensWhereInput
  }


  /**
   * tbMovitens upsert
   */
  export type tbMovitensUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * The filter to search for the tbMovitens to update in case it exists.
     */
    where: tbMovitensWhereUniqueInput
    /**
     * In case the tbMovitens found by the `where` argument doesn't exist, create a new tbMovitens with this data.
     */
    create: XOR<tbMovitensCreateInput, tbMovitensUncheckedCreateInput>
    /**
     * In case the tbMovitens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbMovitensUpdateInput, tbMovitensUncheckedUpdateInput>
  }


  /**
   * tbMovitens delete
   */
  export type tbMovitensDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    /**
     * Filter which tbMovitens to delete.
     */
    where: tbMovitensWhereUniqueInput
  }


  /**
   * tbMovitens deleteMany
   */
  export type tbMovitensDeleteManyArgs = {
    /**
     * Filter which tbMovitens to delete
     */
    where?: tbMovitensWhereInput
  }


  /**
   * tbMovitens.tbnfitens
   */
  export type tbMovitens$tbnfitensArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    where?: tbNfitensWhereInput
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    cursor?: tbNfitensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNfitensScalarFieldEnum>
  }


  /**
   * tbMovitens without action
   */
  export type tbMovitensArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
  }



  /**
   * Model tbNf
   */


  export type AggregateTbNf = {
    _count: TbNfCountAggregateOutputType | null
    _avg: TbNfAvgAggregateOutputType | null
    _sum: TbNfSumAggregateOutputType | null
    _min: TbNfMinAggregateOutputType | null
    _max: TbNfMaxAggregateOutputType | null
  }

  export type TbNfAvgAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    vlrtotal: Decimal | null
  }

  export type TbNfSumAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    vlrtotal: Decimal | null
  }

  export type TbNfMinAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: Decimal | null
  }

  export type TbNfMaxAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: Decimal | null
  }

  export type TbNfCountAggregateOutputType = {
    idnf: number
    numnf: number
    idmovimento: number
    serienf: number
    idfor: number
    idusuario_inclusao: number
    dtemissao: number
    vlrtotal: number
    _all: number
  }


  export type TbNfAvgAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    vlrtotal?: true
  }

  export type TbNfSumAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    vlrtotal?: true
  }

  export type TbNfMinAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
  }

  export type TbNfMaxAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
  }

  export type TbNfCountAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
    _all?: true
  }

  export type TbNfAggregateArgs = {
    /**
     * Filter which tbNf to aggregate.
     */
    where?: tbNfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfs to fetch.
     */
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbNfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbNfs
    **/
    _count?: true | TbNfCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbNfAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbNfSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbNfMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbNfMaxAggregateInputType
  }

  export type GetTbNfAggregateType<T extends TbNfAggregateArgs> = {
        [P in keyof T & keyof AggregateTbNf]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbNf[P]>
      : GetScalarType<T[P], AggregateTbNf[P]>
  }




  export type TbNfGroupByArgs = {
    where?: tbNfWhereInput
    orderBy?: Enumerable<tbNfOrderByWithAggregationInput>
    by: TbNfScalarFieldEnum[]
    having?: tbNfScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbNfCountAggregateInputType | true
    _avg?: TbNfAvgAggregateInputType
    _sum?: TbNfSumAggregateInputType
    _min?: TbNfMinAggregateInputType
    _max?: TbNfMaxAggregateInputType
  }


  export type TbNfGroupByOutputType = {
    idnf: number
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: Decimal | null
    _count: TbNfCountAggregateOutputType | null
    _avg: TbNfAvgAggregateOutputType | null
    _sum: TbNfSumAggregateOutputType | null
    _min: TbNfMinAggregateOutputType | null
    _max: TbNfMaxAggregateOutputType | null
  }

  type GetTbNfGroupByPayload<T extends TbNfGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbNfGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbNfGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbNfGroupByOutputType[P]>
            : GetScalarType<T[P], TbNfGroupByOutputType[P]>
        }
      >
    >


  export type tbNfSelect = {
    idnf?: boolean
    numnf?: boolean
    idmovimento?: boolean
    serienf?: boolean
    idfor?: boolean
    idusuario_inclusao?: boolean
    dtemissao?: boolean
    vlrtotal?: boolean
    tbmovimentos?: boolean | tbMovimentosArgs
    tbfornecedores?: boolean | tbFornecedoresArgs
    tbusuarios?: boolean | tbUsuariosArgs
    tbnfitens?: boolean | tbNf$tbnfitensArgs
    _count?: boolean | TbNfCountOutputTypeArgs
  }


  export type tbNfInclude = {
    tbmovimentos?: boolean | tbMovimentosArgs
    tbfornecedores?: boolean | tbFornecedoresArgs
    tbusuarios?: boolean | tbUsuariosArgs
    tbnfitens?: boolean | tbNf$tbnfitensArgs
    _count?: boolean | TbNfCountOutputTypeArgs
  }

  export type tbNfGetPayload<S extends boolean | null | undefined | tbNfArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbNf :
    S extends undefined ? never :
    S extends { include: any } & (tbNfArgs | tbNfFindManyArgs)
    ? tbNf  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbmovimentos' ? tbMovimentosGetPayload<S['include'][P]> | null :
        P extends 'tbfornecedores' ? tbFornecedoresGetPayload<S['include'][P]> | null :
        P extends 'tbusuarios' ? tbUsuariosGetPayload<S['include'][P]> | null :
        P extends 'tbnfitens' ? Array < tbNfitensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbNfCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbNfArgs | tbNfFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbmovimentos' ? tbMovimentosGetPayload<S['select'][P]> | null :
        P extends 'tbfornecedores' ? tbFornecedoresGetPayload<S['select'][P]> | null :
        P extends 'tbusuarios' ? tbUsuariosGetPayload<S['select'][P]> | null :
        P extends 'tbnfitens' ? Array < tbNfitensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbNfCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbNf ? tbNf[P] : never
  } 
      : tbNf


  type tbNfCountArgs = 
    Omit<tbNfFindManyArgs, 'select' | 'include'> & {
      select?: TbNfCountAggregateInputType | true
    }

  export interface tbNfDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbNf that matches the filter.
     * @param {tbNfFindUniqueArgs} args - Arguments to find a TbNf
     * @example
     * // Get one TbNf
     * const tbNf = await prisma.tbNf.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbNfFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbNfFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbNf'> extends True ? Prisma__tbNfClient<tbNfGetPayload<T>> : Prisma__tbNfClient<tbNfGetPayload<T> | null, null>

    /**
     * Find one TbNf that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbNfFindUniqueOrThrowArgs} args - Arguments to find a TbNf
     * @example
     * // Get one TbNf
     * const tbNf = await prisma.tbNf.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbNfFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbNfFindUniqueOrThrowArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Find the first TbNf that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfFindFirstArgs} args - Arguments to find a TbNf
     * @example
     * // Get one TbNf
     * const tbNf = await prisma.tbNf.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbNfFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbNfFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbNf'> extends True ? Prisma__tbNfClient<tbNfGetPayload<T>> : Prisma__tbNfClient<tbNfGetPayload<T> | null, null>

    /**
     * Find the first TbNf that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfFindFirstOrThrowArgs} args - Arguments to find a TbNf
     * @example
     * // Get one TbNf
     * const tbNf = await prisma.tbNf.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbNfFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbNfFindFirstOrThrowArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Find zero or more TbNfs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbNfs
     * const tbNfs = await prisma.tbNf.findMany()
     * 
     * // Get first 10 TbNfs
     * const tbNfs = await prisma.tbNf.findMany({ take: 10 })
     * 
     * // Only select the `idnf`
     * const tbNfWithIdnfOnly = await prisma.tbNf.findMany({ select: { idnf: true } })
     * 
    **/
    findMany<T extends tbNfFindManyArgs>(
      args?: SelectSubset<T, tbNfFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbNfGetPayload<T>>>

    /**
     * Create a TbNf.
     * @param {tbNfCreateArgs} args - Arguments to create a TbNf.
     * @example
     * // Create one TbNf
     * const TbNf = await prisma.tbNf.create({
     *   data: {
     *     // ... data to create a TbNf
     *   }
     * })
     * 
    **/
    create<T extends tbNfCreateArgs>(
      args: SelectSubset<T, tbNfCreateArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Create many TbNfs.
     *     @param {tbNfCreateManyArgs} args - Arguments to create many TbNfs.
     *     @example
     *     // Create many TbNfs
     *     const tbNf = await prisma.tbNf.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbNfCreateManyArgs>(
      args?: SelectSubset<T, tbNfCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbNf.
     * @param {tbNfDeleteArgs} args - Arguments to delete one TbNf.
     * @example
     * // Delete one TbNf
     * const TbNf = await prisma.tbNf.delete({
     *   where: {
     *     // ... filter to delete one TbNf
     *   }
     * })
     * 
    **/
    delete<T extends tbNfDeleteArgs>(
      args: SelectSubset<T, tbNfDeleteArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Update one TbNf.
     * @param {tbNfUpdateArgs} args - Arguments to update one TbNf.
     * @example
     * // Update one TbNf
     * const tbNf = await prisma.tbNf.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbNfUpdateArgs>(
      args: SelectSubset<T, tbNfUpdateArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Delete zero or more TbNfs.
     * @param {tbNfDeleteManyArgs} args - Arguments to filter TbNfs to delete.
     * @example
     * // Delete a few TbNfs
     * const { count } = await prisma.tbNf.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbNfDeleteManyArgs>(
      args?: SelectSubset<T, tbNfDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbNfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbNfs
     * const tbNf = await prisma.tbNf.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbNfUpdateManyArgs>(
      args: SelectSubset<T, tbNfUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbNf.
     * @param {tbNfUpsertArgs} args - Arguments to update or create a TbNf.
     * @example
     * // Update or create a TbNf
     * const tbNf = await prisma.tbNf.upsert({
     *   create: {
     *     // ... data to create a TbNf
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbNf we want to update
     *   }
     * })
    **/
    upsert<T extends tbNfUpsertArgs>(
      args: SelectSubset<T, tbNfUpsertArgs>
    ): Prisma__tbNfClient<tbNfGetPayload<T>>

    /**
     * Count the number of TbNfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfCountArgs} args - Arguments to filter TbNfs to count.
     * @example
     * // Count the number of TbNfs
     * const count = await prisma.tbNf.count({
     *   where: {
     *     // ... the filter for the TbNfs we want to count
     *   }
     * })
    **/
    count<T extends tbNfCountArgs>(
      args?: Subset<T, tbNfCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbNfCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbNf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNfAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbNfAggregateArgs>(args: Subset<T, TbNfAggregateArgs>): Prisma.PrismaPromise<GetTbNfAggregateType<T>>

    /**
     * Group by TbNf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNfGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbNfGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbNfGroupByArgs['orderBy'] }
        : { orderBy?: TbNfGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbNfGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbNfGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbNf.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbNfClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbmovimentos<T extends tbMovimentosArgs= {}>(args?: Subset<T, tbMovimentosArgs>): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | Null>;

    tbfornecedores<T extends tbFornecedoresArgs= {}>(args?: Subset<T, tbFornecedoresArgs>): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | Null>;

    tbusuarios<T extends tbUsuariosArgs= {}>(args?: Subset<T, tbUsuariosArgs>): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | Null>;

    tbnfitens<T extends tbNf$tbnfitensArgs= {}>(args?: Subset<T, tbNf$tbnfitensArgs>): Prisma.PrismaPromise<Array<tbNfitensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbNf base type for findUnique actions
   */
  export type tbNfFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter, which tbNf to fetch.
     */
    where: tbNfWhereUniqueInput
  }

  /**
   * tbNf findUnique
   */
  export interface tbNfFindUniqueArgs extends tbNfFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNf findUniqueOrThrow
   */
  export type tbNfFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter, which tbNf to fetch.
     */
    where: tbNfWhereUniqueInput
  }


  /**
   * tbNf base type for findFirst actions
   */
  export type tbNfFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter, which tbNf to fetch.
     */
    where?: tbNfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfs to fetch.
     */
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNfs.
     */
    cursor?: tbNfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNfs.
     */
    distinct?: Enumerable<TbNfScalarFieldEnum>
  }

  /**
   * tbNf findFirst
   */
  export interface tbNfFindFirstArgs extends tbNfFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNf findFirstOrThrow
   */
  export type tbNfFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter, which tbNf to fetch.
     */
    where?: tbNfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfs to fetch.
     */
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNfs.
     */
    cursor?: tbNfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNfs.
     */
    distinct?: Enumerable<TbNfScalarFieldEnum>
  }


  /**
   * tbNf findMany
   */
  export type tbNfFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter, which tbNfs to fetch.
     */
    where?: tbNfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfs to fetch.
     */
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbNfs.
     */
    cursor?: tbNfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfs.
     */
    skip?: number
    distinct?: Enumerable<TbNfScalarFieldEnum>
  }


  /**
   * tbNf create
   */
  export type tbNfCreateArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * The data needed to create a tbNf.
     */
    data: XOR<tbNfCreateInput, tbNfUncheckedCreateInput>
  }


  /**
   * tbNf createMany
   */
  export type tbNfCreateManyArgs = {
    /**
     * The data used to create many tbNfs.
     */
    data: Enumerable<tbNfCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbNf update
   */
  export type tbNfUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * The data needed to update a tbNf.
     */
    data: XOR<tbNfUpdateInput, tbNfUncheckedUpdateInput>
    /**
     * Choose, which tbNf to update.
     */
    where: tbNfWhereUniqueInput
  }


  /**
   * tbNf updateMany
   */
  export type tbNfUpdateManyArgs = {
    /**
     * The data used to update tbNfs.
     */
    data: XOR<tbNfUpdateManyMutationInput, tbNfUncheckedUpdateManyInput>
    /**
     * Filter which tbNfs to update
     */
    where?: tbNfWhereInput
  }


  /**
   * tbNf upsert
   */
  export type tbNfUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * The filter to search for the tbNf to update in case it exists.
     */
    where: tbNfWhereUniqueInput
    /**
     * In case the tbNf found by the `where` argument doesn't exist, create a new tbNf with this data.
     */
    create: XOR<tbNfCreateInput, tbNfUncheckedCreateInput>
    /**
     * In case the tbNf was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbNfUpdateInput, tbNfUncheckedUpdateInput>
  }


  /**
   * tbNf delete
   */
  export type tbNfDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    /**
     * Filter which tbNf to delete.
     */
    where: tbNfWhereUniqueInput
  }


  /**
   * tbNf deleteMany
   */
  export type tbNfDeleteManyArgs = {
    /**
     * Filter which tbNfs to delete
     */
    where?: tbNfWhereInput
  }


  /**
   * tbNf.tbnfitens
   */
  export type tbNf$tbnfitensArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    where?: tbNfitensWhereInput
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    cursor?: tbNfitensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNfitensScalarFieldEnum>
  }


  /**
   * tbNf without action
   */
  export type tbNfArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
  }



  /**
   * Model tbNfitens
   */


  export type AggregateTbNfitens = {
    _count: TbNfitensCountAggregateOutputType | null
    _avg: TbNfitensAvgAggregateOutputType | null
    _sum: TbNfitensSumAggregateOutputType | null
    _min: TbNfitensMinAggregateOutputType | null
    _max: TbNfitensMaxAggregateOutputType | null
  }

  export type TbNfitensAvgAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: Decimal | null
    quantidade: Decimal | null
    vlrtotitem: Decimal | null
  }

  export type TbNfitensSumAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: Decimal | null
    quantidade: Decimal | null
    vlrtotitem: Decimal | null
  }

  export type TbNfitensMinAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: Decimal | null
    quantidade: Decimal | null
    vlrtotitem: Decimal | null
  }

  export type TbNfitensMaxAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: Decimal | null
    quantidade: Decimal | null
    vlrtotitem: Decimal | null
  }

  export type TbNfitensCountAggregateOutputType = {
    idnf: number
    idmovimento: number
    seqitem: number
    idproduto: number
    vlrunitario: number
    quantidade: number
    vlrtotitem: number
    _all: number
  }


  export type TbNfitensAvgAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNfitensSumAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNfitensMinAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNfitensMaxAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNfitensCountAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
    _all?: true
  }

  export type TbNfitensAggregateArgs = {
    /**
     * Filter which tbNfitens to aggregate.
     */
    where?: tbNfitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfitens to fetch.
     */
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbNfitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbNfitens
    **/
    _count?: true | TbNfitensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbNfitensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbNfitensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbNfitensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbNfitensMaxAggregateInputType
  }

  export type GetTbNfitensAggregateType<T extends TbNfitensAggregateArgs> = {
        [P in keyof T & keyof AggregateTbNfitens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbNfitens[P]>
      : GetScalarType<T[P], AggregateTbNfitens[P]>
  }




  export type TbNfitensGroupByArgs = {
    where?: tbNfitensWhereInput
    orderBy?: Enumerable<tbNfitensOrderByWithAggregationInput>
    by: TbNfitensScalarFieldEnum[]
    having?: tbNfitensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbNfitensCountAggregateInputType | true
    _avg?: TbNfitensAvgAggregateInputType
    _sum?: TbNfitensSumAggregateInputType
    _min?: TbNfitensMinAggregateInputType
    _max?: TbNfitensMaxAggregateInputType
  }


  export type TbNfitensGroupByOutputType = {
    idnf: number
    idmovimento: number | null
    seqitem: number
    idproduto: number
    vlrunitario: Decimal | null
    quantidade: Decimal | null
    vlrtotitem: Decimal | null
    _count: TbNfitensCountAggregateOutputType | null
    _avg: TbNfitensAvgAggregateOutputType | null
    _sum: TbNfitensSumAggregateOutputType | null
    _min: TbNfitensMinAggregateOutputType | null
    _max: TbNfitensMaxAggregateOutputType | null
  }

  type GetTbNfitensGroupByPayload<T extends TbNfitensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbNfitensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbNfitensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbNfitensGroupByOutputType[P]>
            : GetScalarType<T[P], TbNfitensGroupByOutputType[P]>
        }
      >
    >


  export type tbNfitensSelect = {
    idnf?: boolean
    idmovimento?: boolean
    seqitem?: boolean
    idproduto?: boolean
    vlrunitario?: boolean
    quantidade?: boolean
    vlrtotitem?: boolean
    tbmovitens?: boolean | tbMovitensArgs
    tbnf?: boolean | tbNfArgs
  }


  export type tbNfitensInclude = {
    tbmovitens?: boolean | tbMovitensArgs
    tbnf?: boolean | tbNfArgs
  }

  export type tbNfitensGetPayload<S extends boolean | null | undefined | tbNfitensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbNfitens :
    S extends undefined ? never :
    S extends { include: any } & (tbNfitensArgs | tbNfitensFindManyArgs)
    ? tbNfitens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbmovitens' ? tbMovitensGetPayload<S['include'][P]> | null :
        P extends 'tbnf' ? tbNfGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbNfitensArgs | tbNfitensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbmovitens' ? tbMovitensGetPayload<S['select'][P]> | null :
        P extends 'tbnf' ? tbNfGetPayload<S['select'][P]> :  P extends keyof tbNfitens ? tbNfitens[P] : never
  } 
      : tbNfitens


  type tbNfitensCountArgs = 
    Omit<tbNfitensFindManyArgs, 'select' | 'include'> & {
      select?: TbNfitensCountAggregateInputType | true
    }

  export interface tbNfitensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbNfitens that matches the filter.
     * @param {tbNfitensFindUniqueArgs} args - Arguments to find a TbNfitens
     * @example
     * // Get one TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbNfitensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbNfitensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbNfitens'> extends True ? Prisma__tbNfitensClient<tbNfitensGetPayload<T>> : Prisma__tbNfitensClient<tbNfitensGetPayload<T> | null, null>

    /**
     * Find one TbNfitens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbNfitensFindUniqueOrThrowArgs} args - Arguments to find a TbNfitens
     * @example
     * // Get one TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbNfitensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbNfitensFindUniqueOrThrowArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Find the first TbNfitens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfitensFindFirstArgs} args - Arguments to find a TbNfitens
     * @example
     * // Get one TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbNfitensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbNfitensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbNfitens'> extends True ? Prisma__tbNfitensClient<tbNfitensGetPayload<T>> : Prisma__tbNfitensClient<tbNfitensGetPayload<T> | null, null>

    /**
     * Find the first TbNfitens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfitensFindFirstOrThrowArgs} args - Arguments to find a TbNfitens
     * @example
     * // Get one TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbNfitensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbNfitensFindFirstOrThrowArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Find zero or more TbNfitens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfitensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findMany()
     * 
     * // Get first 10 TbNfitens
     * const tbNfitens = await prisma.tbNfitens.findMany({ take: 10 })
     * 
     * // Only select the `idnf`
     * const tbNfitensWithIdnfOnly = await prisma.tbNfitens.findMany({ select: { idnf: true } })
     * 
    **/
    findMany<T extends tbNfitensFindManyArgs>(
      args?: SelectSubset<T, tbNfitensFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbNfitensGetPayload<T>>>

    /**
     * Create a TbNfitens.
     * @param {tbNfitensCreateArgs} args - Arguments to create a TbNfitens.
     * @example
     * // Create one TbNfitens
     * const TbNfitens = await prisma.tbNfitens.create({
     *   data: {
     *     // ... data to create a TbNfitens
     *   }
     * })
     * 
    **/
    create<T extends tbNfitensCreateArgs>(
      args: SelectSubset<T, tbNfitensCreateArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Create many TbNfitens.
     *     @param {tbNfitensCreateManyArgs} args - Arguments to create many TbNfitens.
     *     @example
     *     // Create many TbNfitens
     *     const tbNfitens = await prisma.tbNfitens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbNfitensCreateManyArgs>(
      args?: SelectSubset<T, tbNfitensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbNfitens.
     * @param {tbNfitensDeleteArgs} args - Arguments to delete one TbNfitens.
     * @example
     * // Delete one TbNfitens
     * const TbNfitens = await prisma.tbNfitens.delete({
     *   where: {
     *     // ... filter to delete one TbNfitens
     *   }
     * })
     * 
    **/
    delete<T extends tbNfitensDeleteArgs>(
      args: SelectSubset<T, tbNfitensDeleteArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Update one TbNfitens.
     * @param {tbNfitensUpdateArgs} args - Arguments to update one TbNfitens.
     * @example
     * // Update one TbNfitens
     * const tbNfitens = await prisma.tbNfitens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbNfitensUpdateArgs>(
      args: SelectSubset<T, tbNfitensUpdateArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Delete zero or more TbNfitens.
     * @param {tbNfitensDeleteManyArgs} args - Arguments to filter TbNfitens to delete.
     * @example
     * // Delete a few TbNfitens
     * const { count } = await prisma.tbNfitens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbNfitensDeleteManyArgs>(
      args?: SelectSubset<T, tbNfitensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbNfitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfitensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbNfitens
     * const tbNfitens = await prisma.tbNfitens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbNfitensUpdateManyArgs>(
      args: SelectSubset<T, tbNfitensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbNfitens.
     * @param {tbNfitensUpsertArgs} args - Arguments to update or create a TbNfitens.
     * @example
     * // Update or create a TbNfitens
     * const tbNfitens = await prisma.tbNfitens.upsert({
     *   create: {
     *     // ... data to create a TbNfitens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbNfitens we want to update
     *   }
     * })
    **/
    upsert<T extends tbNfitensUpsertArgs>(
      args: SelectSubset<T, tbNfitensUpsertArgs>
    ): Prisma__tbNfitensClient<tbNfitensGetPayload<T>>

    /**
     * Count the number of TbNfitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNfitensCountArgs} args - Arguments to filter TbNfitens to count.
     * @example
     * // Count the number of TbNfitens
     * const count = await prisma.tbNfitens.count({
     *   where: {
     *     // ... the filter for the TbNfitens we want to count
     *   }
     * })
    **/
    count<T extends tbNfitensCountArgs>(
      args?: Subset<T, tbNfitensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbNfitensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbNfitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNfitensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbNfitensAggregateArgs>(args: Subset<T, TbNfitensAggregateArgs>): Prisma.PrismaPromise<GetTbNfitensAggregateType<T>>

    /**
     * Group by TbNfitens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNfitensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbNfitensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbNfitensGroupByArgs['orderBy'] }
        : { orderBy?: TbNfitensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbNfitensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbNfitensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbNfitens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbNfitensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbmovitens<T extends tbMovitensArgs= {}>(args?: Subset<T, tbMovitensArgs>): Prisma__tbMovitensClient<tbMovitensGetPayload<T> | Null>;

    tbnf<T extends tbNfArgs= {}>(args?: Subset<T, tbNfArgs>): Prisma__tbNfClient<tbNfGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbNfitens base type for findUnique actions
   */
  export type tbNfitensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter, which tbNfitens to fetch.
     */
    where: tbNfitensWhereUniqueInput
  }

  /**
   * tbNfitens findUnique
   */
  export interface tbNfitensFindUniqueArgs extends tbNfitensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNfitens findUniqueOrThrow
   */
  export type tbNfitensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter, which tbNfitens to fetch.
     */
    where: tbNfitensWhereUniqueInput
  }


  /**
   * tbNfitens base type for findFirst actions
   */
  export type tbNfitensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter, which tbNfitens to fetch.
     */
    where?: tbNfitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfitens to fetch.
     */
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNfitens.
     */
    cursor?: tbNfitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNfitens.
     */
    distinct?: Enumerable<TbNfitensScalarFieldEnum>
  }

  /**
   * tbNfitens findFirst
   */
  export interface tbNfitensFindFirstArgs extends tbNfitensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNfitens findFirstOrThrow
   */
  export type tbNfitensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter, which tbNfitens to fetch.
     */
    where?: tbNfitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfitens to fetch.
     */
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNfitens.
     */
    cursor?: tbNfitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfitens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNfitens.
     */
    distinct?: Enumerable<TbNfitensScalarFieldEnum>
  }


  /**
   * tbNfitens findMany
   */
  export type tbNfitensFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter, which tbNfitens to fetch.
     */
    where?: tbNfitensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNfitens to fetch.
     */
    orderBy?: Enumerable<tbNfitensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbNfitens.
     */
    cursor?: tbNfitensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNfitens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNfitens.
     */
    skip?: number
    distinct?: Enumerable<TbNfitensScalarFieldEnum>
  }


  /**
   * tbNfitens create
   */
  export type tbNfitensCreateArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * The data needed to create a tbNfitens.
     */
    data: XOR<tbNfitensCreateInput, tbNfitensUncheckedCreateInput>
  }


  /**
   * tbNfitens createMany
   */
  export type tbNfitensCreateManyArgs = {
    /**
     * The data used to create many tbNfitens.
     */
    data: Enumerable<tbNfitensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbNfitens update
   */
  export type tbNfitensUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * The data needed to update a tbNfitens.
     */
    data: XOR<tbNfitensUpdateInput, tbNfitensUncheckedUpdateInput>
    /**
     * Choose, which tbNfitens to update.
     */
    where: tbNfitensWhereUniqueInput
  }


  /**
   * tbNfitens updateMany
   */
  export type tbNfitensUpdateManyArgs = {
    /**
     * The data used to update tbNfitens.
     */
    data: XOR<tbNfitensUpdateManyMutationInput, tbNfitensUncheckedUpdateManyInput>
    /**
     * Filter which tbNfitens to update
     */
    where?: tbNfitensWhereInput
  }


  /**
   * tbNfitens upsert
   */
  export type tbNfitensUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * The filter to search for the tbNfitens to update in case it exists.
     */
    where: tbNfitensWhereUniqueInput
    /**
     * In case the tbNfitens found by the `where` argument doesn't exist, create a new tbNfitens with this data.
     */
    create: XOR<tbNfitensCreateInput, tbNfitensUncheckedCreateInput>
    /**
     * In case the tbNfitens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbNfitensUpdateInput, tbNfitensUncheckedUpdateInput>
  }


  /**
   * tbNfitens delete
   */
  export type tbNfitensDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
    /**
     * Filter which tbNfitens to delete.
     */
    where: tbNfitensWhereUniqueInput
  }


  /**
   * tbNfitens deleteMany
   */
  export type tbNfitensDeleteManyArgs = {
    /**
     * Filter which tbNfitens to delete
     */
    where?: tbNfitensWhereInput
  }


  /**
   * tbNfitens without action
   */
  export type tbNfitensArgs = {
    /**
     * Select specific fields to fetch from the tbNfitens
     */
    select?: tbNfitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfitensInclude | null
  }



  /**
   * Model tbProdcomposicao
   */


  export type AggregateTbProdcomposicao = {
    _count: TbProdcomposicaoCountAggregateOutputType | null
    _avg: TbProdcomposicaoAvgAggregateOutputType | null
    _sum: TbProdcomposicaoSumAggregateOutputType | null
    _min: TbProdcomposicaoMinAggregateOutputType | null
    _max: TbProdcomposicaoMaxAggregateOutputType | null
  }

  export type TbProdcomposicaoAvgAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: Decimal | null
  }

  export type TbProdcomposicaoSumAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: Decimal | null
  }

  export type TbProdcomposicaoMinAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: Decimal | null
  }

  export type TbProdcomposicaoMaxAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: Decimal | null
  }

  export type TbProdcomposicaoCountAggregateOutputType = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
    quantidade: number
    _all: number
  }


  export type TbProdcomposicaoAvgAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdcomposicaoSumAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdcomposicaoMinAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdcomposicaoMaxAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdcomposicaoCountAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
    _all?: true
  }

  export type TbProdcomposicaoAggregateArgs = {
    /**
     * Filter which tbProdcomposicao to aggregate.
     */
    where?: tbProdcomposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdcomposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbProdcomposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdcomposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdcomposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbProdcomposicaos
    **/
    _count?: true | TbProdcomposicaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbProdcomposicaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbProdcomposicaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbProdcomposicaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbProdcomposicaoMaxAggregateInputType
  }

  export type GetTbProdcomposicaoAggregateType<T extends TbProdcomposicaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTbProdcomposicao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbProdcomposicao[P]>
      : GetScalarType<T[P], AggregateTbProdcomposicao[P]>
  }




  export type TbProdcomposicaoGroupByArgs = {
    where?: tbProdcomposicaoWhereInput
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithAggregationInput>
    by: TbProdcomposicaoScalarFieldEnum[]
    having?: tbProdcomposicaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbProdcomposicaoCountAggregateInputType | true
    _avg?: TbProdcomposicaoAvgAggregateInputType
    _sum?: TbProdcomposicaoSumAggregateInputType
    _min?: TbProdcomposicaoMinAggregateInputType
    _max?: TbProdcomposicaoMaxAggregateInputType
  }


  export type TbProdcomposicaoGroupByOutputType = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
    quantidade: Decimal | null
    _count: TbProdcomposicaoCountAggregateOutputType | null
    _avg: TbProdcomposicaoAvgAggregateOutputType | null
    _sum: TbProdcomposicaoSumAggregateOutputType | null
    _min: TbProdcomposicaoMinAggregateOutputType | null
    _max: TbProdcomposicaoMaxAggregateOutputType | null
  }

  type GetTbProdcomposicaoGroupByPayload<T extends TbProdcomposicaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbProdcomposicaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbProdcomposicaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbProdcomposicaoGroupByOutputType[P]>
            : GetScalarType<T[P], TbProdcomposicaoGroupByOutputType[P]>
        }
      >
    >


  export type tbProdcomposicaoSelect = {
    idcomp?: boolean
    idproduto?: boolean
    idprodutocomp?: boolean
    quantidade?: boolean
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: boolean | tbProdutosArgs
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: boolean | tbProdutosArgs
  }


  export type tbProdcomposicaoInclude = {
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: boolean | tbProdutosArgs
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: boolean | tbProdutosArgs
  }

  export type tbProdcomposicaoGetPayload<S extends boolean | null | undefined | tbProdcomposicaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbProdcomposicao :
    S extends undefined ? never :
    S extends { include: any } & (tbProdcomposicaoArgs | tbProdcomposicaoFindManyArgs)
    ? tbProdcomposicao  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbprodutos_tbprodcomposicao_idprodutoTotbprodutos' ? tbProdutosGetPayload<S['include'][P]> :
        P extends 'tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos' ? tbProdutosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbProdcomposicaoArgs | tbProdcomposicaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbprodutos_tbprodcomposicao_idprodutoTotbprodutos' ? tbProdutosGetPayload<S['select'][P]> :
        P extends 'tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos' ? tbProdutosGetPayload<S['select'][P]> :  P extends keyof tbProdcomposicao ? tbProdcomposicao[P] : never
  } 
      : tbProdcomposicao


  type tbProdcomposicaoCountArgs = 
    Omit<tbProdcomposicaoFindManyArgs, 'select' | 'include'> & {
      select?: TbProdcomposicaoCountAggregateInputType | true
    }

  export interface tbProdcomposicaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbProdcomposicao that matches the filter.
     * @param {tbProdcomposicaoFindUniqueArgs} args - Arguments to find a TbProdcomposicao
     * @example
     * // Get one TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbProdcomposicaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbProdcomposicaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbProdcomposicao'> extends True ? Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>> : Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T> | null, null>

    /**
     * Find one TbProdcomposicao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbProdcomposicaoFindUniqueOrThrowArgs} args - Arguments to find a TbProdcomposicao
     * @example
     * // Get one TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbProdcomposicaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbProdcomposicaoFindUniqueOrThrowArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Find the first TbProdcomposicao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdcomposicaoFindFirstArgs} args - Arguments to find a TbProdcomposicao
     * @example
     * // Get one TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbProdcomposicaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbProdcomposicaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbProdcomposicao'> extends True ? Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>> : Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T> | null, null>

    /**
     * Find the first TbProdcomposicao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdcomposicaoFindFirstOrThrowArgs} args - Arguments to find a TbProdcomposicao
     * @example
     * // Get one TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbProdcomposicaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbProdcomposicaoFindFirstOrThrowArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Find zero or more TbProdcomposicaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdcomposicaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbProdcomposicaos
     * const tbProdcomposicaos = await prisma.tbProdcomposicao.findMany()
     * 
     * // Get first 10 TbProdcomposicaos
     * const tbProdcomposicaos = await prisma.tbProdcomposicao.findMany({ take: 10 })
     * 
     * // Only select the `idcomp`
     * const tbProdcomposicaoWithIdcompOnly = await prisma.tbProdcomposicao.findMany({ select: { idcomp: true } })
     * 
    **/
    findMany<T extends tbProdcomposicaoFindManyArgs>(
      args?: SelectSubset<T, tbProdcomposicaoFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbProdcomposicaoGetPayload<T>>>

    /**
     * Create a TbProdcomposicao.
     * @param {tbProdcomposicaoCreateArgs} args - Arguments to create a TbProdcomposicao.
     * @example
     * // Create one TbProdcomposicao
     * const TbProdcomposicao = await prisma.tbProdcomposicao.create({
     *   data: {
     *     // ... data to create a TbProdcomposicao
     *   }
     * })
     * 
    **/
    create<T extends tbProdcomposicaoCreateArgs>(
      args: SelectSubset<T, tbProdcomposicaoCreateArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Create many TbProdcomposicaos.
     *     @param {tbProdcomposicaoCreateManyArgs} args - Arguments to create many TbProdcomposicaos.
     *     @example
     *     // Create many TbProdcomposicaos
     *     const tbProdcomposicao = await prisma.tbProdcomposicao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbProdcomposicaoCreateManyArgs>(
      args?: SelectSubset<T, tbProdcomposicaoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbProdcomposicao.
     * @param {tbProdcomposicaoDeleteArgs} args - Arguments to delete one TbProdcomposicao.
     * @example
     * // Delete one TbProdcomposicao
     * const TbProdcomposicao = await prisma.tbProdcomposicao.delete({
     *   where: {
     *     // ... filter to delete one TbProdcomposicao
     *   }
     * })
     * 
    **/
    delete<T extends tbProdcomposicaoDeleteArgs>(
      args: SelectSubset<T, tbProdcomposicaoDeleteArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Update one TbProdcomposicao.
     * @param {tbProdcomposicaoUpdateArgs} args - Arguments to update one TbProdcomposicao.
     * @example
     * // Update one TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbProdcomposicaoUpdateArgs>(
      args: SelectSubset<T, tbProdcomposicaoUpdateArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Delete zero or more TbProdcomposicaos.
     * @param {tbProdcomposicaoDeleteManyArgs} args - Arguments to filter TbProdcomposicaos to delete.
     * @example
     * // Delete a few TbProdcomposicaos
     * const { count } = await prisma.tbProdcomposicao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbProdcomposicaoDeleteManyArgs>(
      args?: SelectSubset<T, tbProdcomposicaoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbProdcomposicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdcomposicaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbProdcomposicaos
     * const tbProdcomposicao = await prisma.tbProdcomposicao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbProdcomposicaoUpdateManyArgs>(
      args: SelectSubset<T, tbProdcomposicaoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbProdcomposicao.
     * @param {tbProdcomposicaoUpsertArgs} args - Arguments to update or create a TbProdcomposicao.
     * @example
     * // Update or create a TbProdcomposicao
     * const tbProdcomposicao = await prisma.tbProdcomposicao.upsert({
     *   create: {
     *     // ... data to create a TbProdcomposicao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbProdcomposicao we want to update
     *   }
     * })
    **/
    upsert<T extends tbProdcomposicaoUpsertArgs>(
      args: SelectSubset<T, tbProdcomposicaoUpsertArgs>
    ): Prisma__tbProdcomposicaoClient<tbProdcomposicaoGetPayload<T>>

    /**
     * Count the number of TbProdcomposicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdcomposicaoCountArgs} args - Arguments to filter TbProdcomposicaos to count.
     * @example
     * // Count the number of TbProdcomposicaos
     * const count = await prisma.tbProdcomposicao.count({
     *   where: {
     *     // ... the filter for the TbProdcomposicaos we want to count
     *   }
     * })
    **/
    count<T extends tbProdcomposicaoCountArgs>(
      args?: Subset<T, tbProdcomposicaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbProdcomposicaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbProdcomposicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdcomposicaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbProdcomposicaoAggregateArgs>(args: Subset<T, TbProdcomposicaoAggregateArgs>): Prisma.PrismaPromise<GetTbProdcomposicaoAggregateType<T>>

    /**
     * Group by TbProdcomposicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdcomposicaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbProdcomposicaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbProdcomposicaoGroupByArgs['orderBy'] }
        : { orderBy?: TbProdcomposicaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbProdcomposicaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbProdcomposicaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbProdcomposicao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbProdcomposicaoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbProdcomposicao base type for findUnique actions
   */
  export type tbProdcomposicaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter, which tbProdcomposicao to fetch.
     */
    where: tbProdcomposicaoWhereUniqueInput
  }

  /**
   * tbProdcomposicao findUnique
   */
  export interface tbProdcomposicaoFindUniqueArgs extends tbProdcomposicaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdcomposicao findUniqueOrThrow
   */
  export type tbProdcomposicaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter, which tbProdcomposicao to fetch.
     */
    where: tbProdcomposicaoWhereUniqueInput
  }


  /**
   * tbProdcomposicao base type for findFirst actions
   */
  export type tbProdcomposicaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter, which tbProdcomposicao to fetch.
     */
    where?: tbProdcomposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdcomposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdcomposicaos.
     */
    cursor?: tbProdcomposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdcomposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdcomposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdcomposicaos.
     */
    distinct?: Enumerable<TbProdcomposicaoScalarFieldEnum>
  }

  /**
   * tbProdcomposicao findFirst
   */
  export interface tbProdcomposicaoFindFirstArgs extends tbProdcomposicaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdcomposicao findFirstOrThrow
   */
  export type tbProdcomposicaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter, which tbProdcomposicao to fetch.
     */
    where?: tbProdcomposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdcomposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdcomposicaos.
     */
    cursor?: tbProdcomposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdcomposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdcomposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdcomposicaos.
     */
    distinct?: Enumerable<TbProdcomposicaoScalarFieldEnum>
  }


  /**
   * tbProdcomposicao findMany
   */
  export type tbProdcomposicaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter, which tbProdcomposicaos to fetch.
     */
    where?: tbProdcomposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdcomposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbProdcomposicaos.
     */
    cursor?: tbProdcomposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdcomposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdcomposicaos.
     */
    skip?: number
    distinct?: Enumerable<TbProdcomposicaoScalarFieldEnum>
  }


  /**
   * tbProdcomposicao create
   */
  export type tbProdcomposicaoCreateArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * The data needed to create a tbProdcomposicao.
     */
    data: XOR<tbProdcomposicaoCreateInput, tbProdcomposicaoUncheckedCreateInput>
  }


  /**
   * tbProdcomposicao createMany
   */
  export type tbProdcomposicaoCreateManyArgs = {
    /**
     * The data used to create many tbProdcomposicaos.
     */
    data: Enumerable<tbProdcomposicaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbProdcomposicao update
   */
  export type tbProdcomposicaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * The data needed to update a tbProdcomposicao.
     */
    data: XOR<tbProdcomposicaoUpdateInput, tbProdcomposicaoUncheckedUpdateInput>
    /**
     * Choose, which tbProdcomposicao to update.
     */
    where: tbProdcomposicaoWhereUniqueInput
  }


  /**
   * tbProdcomposicao updateMany
   */
  export type tbProdcomposicaoUpdateManyArgs = {
    /**
     * The data used to update tbProdcomposicaos.
     */
    data: XOR<tbProdcomposicaoUpdateManyMutationInput, tbProdcomposicaoUncheckedUpdateManyInput>
    /**
     * Filter which tbProdcomposicaos to update
     */
    where?: tbProdcomposicaoWhereInput
  }


  /**
   * tbProdcomposicao upsert
   */
  export type tbProdcomposicaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * The filter to search for the tbProdcomposicao to update in case it exists.
     */
    where: tbProdcomposicaoWhereUniqueInput
    /**
     * In case the tbProdcomposicao found by the `where` argument doesn't exist, create a new tbProdcomposicao with this data.
     */
    create: XOR<tbProdcomposicaoCreateInput, tbProdcomposicaoUncheckedCreateInput>
    /**
     * In case the tbProdcomposicao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbProdcomposicaoUpdateInput, tbProdcomposicaoUncheckedUpdateInput>
  }


  /**
   * tbProdcomposicao delete
   */
  export type tbProdcomposicaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    /**
     * Filter which tbProdcomposicao to delete.
     */
    where: tbProdcomposicaoWhereUniqueInput
  }


  /**
   * tbProdcomposicao deleteMany
   */
  export type tbProdcomposicaoDeleteManyArgs = {
    /**
     * Filter which tbProdcomposicaos to delete
     */
    where?: tbProdcomposicaoWhereInput
  }


  /**
   * tbProdcomposicao without action
   */
  export type tbProdcomposicaoArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
  }



  /**
   * Model tbProdutos
   */


  export type AggregateTbProdutos = {
    _count: TbProdutosCountAggregateOutputType | null
    _avg: TbProdutosAvgAggregateOutputType | null
    _sum: TbProdutosSumAggregateOutputType | null
    _min: TbProdutosMinAggregateOutputType | null
    _max: TbProdutosMaxAggregateOutputType | null
  }

  export type TbProdutosAvgAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosSumAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosMinAggregateOutputType = {
    idproduto: number | null
    nomeprod: string | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosMaxAggregateOutputType = {
    idproduto: number | null
    nomeprod: string | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosCountAggregateOutputType = {
    idproduto: number
    nomeprod: number
    idtipprod: number
    idunidade: number
    quantminima: number
    _all: number
  }


  export type TbProdutosAvgAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosSumAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosMinAggregateInputType = {
    idproduto?: true
    nomeprod?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosMaxAggregateInputType = {
    idproduto?: true
    nomeprod?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosCountAggregateInputType = {
    idproduto?: true
    nomeprod?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
    _all?: true
  }

  export type TbProdutosAggregateArgs = {
    /**
     * Filter which tbProdutos to aggregate.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbProdutos
    **/
    _count?: true | TbProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbProdutosMaxAggregateInputType
  }

  export type GetTbProdutosAggregateType<T extends TbProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbProdutos[P]>
      : GetScalarType<T[P], AggregateTbProdutos[P]>
  }




  export type TbProdutosGroupByArgs = {
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithAggregationInput>
    by: TbProdutosScalarFieldEnum[]
    having?: tbProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbProdutosCountAggregateInputType | true
    _avg?: TbProdutosAvgAggregateInputType
    _sum?: TbProdutosSumAggregateInputType
    _min?: TbProdutosMinAggregateInputType
    _max?: TbProdutosMaxAggregateInputType
  }


  export type TbProdutosGroupByOutputType = {
    idproduto: number
    nomeprod: string | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
    _count: TbProdutosCountAggregateOutputType | null
    _avg: TbProdutosAvgAggregateOutputType | null
    _sum: TbProdutosSumAggregateOutputType | null
    _min: TbProdutosMinAggregateOutputType | null
    _max: TbProdutosMaxAggregateOutputType | null
  }

  type GetTbProdutosGroupByPayload<T extends TbProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], TbProdutosGroupByOutputType[P]>
        }
      >
    >


  export type tbProdutosSelect = {
    idproduto?: boolean
    nomeprod?: boolean
    idtipprod?: boolean
    idunidade?: boolean
    quantminima?: boolean
    tbestoque?: boolean | tbProdutos$tbestoqueArgs
    tbmovitens?: boolean | tbProdutos$tbmovitensArgs
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: boolean | tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosArgs
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: boolean | tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosArgs
    tbtiposprodutos?: boolean | tbTiposprodutosArgs
    tbunidademedida?: boolean | tbUnidademedidaArgs
    _count?: boolean | TbProdutosCountOutputTypeArgs
  }


  export type tbProdutosInclude = {
    tbestoque?: boolean | tbProdutos$tbestoqueArgs
    tbmovitens?: boolean | tbProdutos$tbmovitensArgs
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: boolean | tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosArgs
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: boolean | tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosArgs
    tbtiposprodutos?: boolean | tbTiposprodutosArgs
    tbunidademedida?: boolean | tbUnidademedidaArgs
    _count?: boolean | TbProdutosCountOutputTypeArgs
  }

  export type tbProdutosGetPayload<S extends boolean | null | undefined | tbProdutosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbProdutos :
    S extends undefined ? never :
    S extends { include: any } & (tbProdutosArgs | tbProdutosFindManyArgs)
    ? tbProdutos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbestoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['include'][P]>>  :
        P extends 'tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos' ? Array < tbProdcomposicaoGetPayload<S['include'][P]>>  :
        P extends 'tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos' ? Array < tbProdcomposicaoGetPayload<S['include'][P]>>  :
        P extends 'tbtiposprodutos' ? tbTiposprodutosGetPayload<S['include'][P]> | null :
        P extends 'tbunidademedida' ? tbUnidademedidaGetPayload<S['include'][P]> | null :
        P extends '_count' ? TbProdutosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbProdutosArgs | tbProdutosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbestoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbmovitens' ? Array < tbMovitensGetPayload<S['select'][P]>>  :
        P extends 'tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos' ? Array < tbProdcomposicaoGetPayload<S['select'][P]>>  :
        P extends 'tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos' ? Array < tbProdcomposicaoGetPayload<S['select'][P]>>  :
        P extends 'tbtiposprodutos' ? tbTiposprodutosGetPayload<S['select'][P]> | null :
        P extends 'tbunidademedida' ? tbUnidademedidaGetPayload<S['select'][P]> | null :
        P extends '_count' ? TbProdutosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbProdutos ? tbProdutos[P] : never
  } 
      : tbProdutos


  type tbProdutosCountArgs = 
    Omit<tbProdutosFindManyArgs, 'select' | 'include'> & {
      select?: TbProdutosCountAggregateInputType | true
    }

  export interface tbProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbProdutos that matches the filter.
     * @param {tbProdutosFindUniqueArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbProdutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbProdutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbProdutos'> extends True ? Prisma__tbProdutosClient<tbProdutosGetPayload<T>> : Prisma__tbProdutosClient<tbProdutosGetPayload<T> | null, null>

    /**
     * Find one TbProdutos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbProdutosFindUniqueOrThrowArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbProdutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbProdutosFindUniqueOrThrowArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Find the first TbProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindFirstArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbProdutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbProdutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbProdutos'> extends True ? Prisma__tbProdutosClient<tbProdutosGetPayload<T>> : Prisma__tbProdutosClient<tbProdutosGetPayload<T> | null, null>

    /**
     * Find the first TbProdutos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindFirstOrThrowArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbProdutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbProdutosFindFirstOrThrowArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Find zero or more TbProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findMany()
     * 
     * // Get first 10 TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findMany({ take: 10 })
     * 
     * // Only select the `idproduto`
     * const tbProdutosWithIdprodutoOnly = await prisma.tbProdutos.findMany({ select: { idproduto: true } })
     * 
    **/
    findMany<T extends tbProdutosFindManyArgs>(
      args?: SelectSubset<T, tbProdutosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>>

    /**
     * Create a TbProdutos.
     * @param {tbProdutosCreateArgs} args - Arguments to create a TbProdutos.
     * @example
     * // Create one TbProdutos
     * const TbProdutos = await prisma.tbProdutos.create({
     *   data: {
     *     // ... data to create a TbProdutos
     *   }
     * })
     * 
    **/
    create<T extends tbProdutosCreateArgs>(
      args: SelectSubset<T, tbProdutosCreateArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Create many TbProdutos.
     *     @param {tbProdutosCreateManyArgs} args - Arguments to create many TbProdutos.
     *     @example
     *     // Create many TbProdutos
     *     const tbProdutos = await prisma.tbProdutos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbProdutosCreateManyArgs>(
      args?: SelectSubset<T, tbProdutosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbProdutos.
     * @param {tbProdutosDeleteArgs} args - Arguments to delete one TbProdutos.
     * @example
     * // Delete one TbProdutos
     * const TbProdutos = await prisma.tbProdutos.delete({
     *   where: {
     *     // ... filter to delete one TbProdutos
     *   }
     * })
     * 
    **/
    delete<T extends tbProdutosDeleteArgs>(
      args: SelectSubset<T, tbProdutosDeleteArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Update one TbProdutos.
     * @param {tbProdutosUpdateArgs} args - Arguments to update one TbProdutos.
     * @example
     * // Update one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbProdutosUpdateArgs>(
      args: SelectSubset<T, tbProdutosUpdateArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Delete zero or more TbProdutos.
     * @param {tbProdutosDeleteManyArgs} args - Arguments to filter TbProdutos to delete.
     * @example
     * // Delete a few TbProdutos
     * const { count } = await prisma.tbProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbProdutosDeleteManyArgs>(
      args?: SelectSubset<T, tbProdutosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbProdutos
     * const tbProdutos = await prisma.tbProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbProdutosUpdateManyArgs>(
      args: SelectSubset<T, tbProdutosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbProdutos.
     * @param {tbProdutosUpsertArgs} args - Arguments to update or create a TbProdutos.
     * @example
     * // Update or create a TbProdutos
     * const tbProdutos = await prisma.tbProdutos.upsert({
     *   create: {
     *     // ... data to create a TbProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbProdutos we want to update
     *   }
     * })
    **/
    upsert<T extends tbProdutosUpsertArgs>(
      args: SelectSubset<T, tbProdutosUpsertArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Count the number of TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosCountArgs} args - Arguments to filter TbProdutos to count.
     * @example
     * // Count the number of TbProdutos
     * const count = await prisma.tbProdutos.count({
     *   where: {
     *     // ... the filter for the TbProdutos we want to count
     *   }
     * })
    **/
    count<T extends tbProdutosCountArgs>(
      args?: Subset<T, tbProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbProdutosAggregateArgs>(args: Subset<T, TbProdutosAggregateArgs>): Prisma.PrismaPromise<GetTbProdutosAggregateType<T>>

    /**
     * Group by TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbProdutosGroupByArgs['orderBy'] }
        : { orderBy?: TbProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbProdutosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbestoque<T extends tbProdutos$tbestoqueArgs= {}>(args?: Subset<T, tbProdutos$tbestoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbmovitens<T extends tbProdutos$tbmovitensArgs= {}>(args?: Subset<T, tbProdutos$tbmovitensArgs>): Prisma.PrismaPromise<Array<tbMovitensGetPayload<T>>| Null>;

    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos<T extends tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosArgs= {}>(args?: Subset<T, tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosArgs>): Prisma.PrismaPromise<Array<tbProdcomposicaoGetPayload<T>>| Null>;

    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos<T extends tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosArgs= {}>(args?: Subset<T, tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosArgs>): Prisma.PrismaPromise<Array<tbProdcomposicaoGetPayload<T>>| Null>;

    tbtiposprodutos<T extends tbTiposprodutosArgs= {}>(args?: Subset<T, tbTiposprodutosArgs>): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T> | Null>;

    tbunidademedida<T extends tbUnidademedidaArgs= {}>(args?: Subset<T, tbUnidademedidaArgs>): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbProdutos base type for findUnique actions
   */
  export type tbProdutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where: tbProdutosWhereUniqueInput
  }

  /**
   * tbProdutos findUnique
   */
  export interface tbProdutosFindUniqueArgs extends tbProdutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdutos findUniqueOrThrow
   */
  export type tbProdutosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos base type for findFirst actions
   */
  export type tbProdutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdutos.
     */
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }

  /**
   * tbProdutos findFirst
   */
  export interface tbProdutosFindFirstArgs extends tbProdutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdutos findFirstOrThrow
   */
  export type tbProdutosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdutos.
     */
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbProdutos findMany
   */
  export type tbProdutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbProdutos create
   */
  export type tbProdutosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The data needed to create a tbProdutos.
     */
    data: XOR<tbProdutosCreateInput, tbProdutosUncheckedCreateInput>
  }


  /**
   * tbProdutos createMany
   */
  export type tbProdutosCreateManyArgs = {
    /**
     * The data used to create many tbProdutos.
     */
    data: Enumerable<tbProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbProdutos update
   */
  export type tbProdutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The data needed to update a tbProdutos.
     */
    data: XOR<tbProdutosUpdateInput, tbProdutosUncheckedUpdateInput>
    /**
     * Choose, which tbProdutos to update.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos updateMany
   */
  export type tbProdutosUpdateManyArgs = {
    /**
     * The data used to update tbProdutos.
     */
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyInput>
    /**
     * Filter which tbProdutos to update
     */
    where?: tbProdutosWhereInput
  }


  /**
   * tbProdutos upsert
   */
  export type tbProdutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The filter to search for the tbProdutos to update in case it exists.
     */
    where: tbProdutosWhereUniqueInput
    /**
     * In case the tbProdutos found by the `where` argument doesn't exist, create a new tbProdutos with this data.
     */
    create: XOR<tbProdutosCreateInput, tbProdutosUncheckedCreateInput>
    /**
     * In case the tbProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbProdutosUpdateInput, tbProdutosUncheckedUpdateInput>
  }


  /**
   * tbProdutos delete
   */
  export type tbProdutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter which tbProdutos to delete.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos deleteMany
   */
  export type tbProdutosDeleteManyArgs = {
    /**
     * Filter which tbProdutos to delete
     */
    where?: tbProdutosWhereInput
  }


  /**
   * tbProdutos.tbestoque
   */
  export type tbProdutos$tbestoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbProdutos.tbmovitens
   */
  export type tbProdutos$tbmovitensArgs = {
    /**
     * Select specific fields to fetch from the tbMovitens
     */
    select?: tbMovitensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovitensInclude | null
    where?: tbMovitensWhereInput
    orderBy?: Enumerable<tbMovitensOrderByWithRelationInput>
    cursor?: tbMovitensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovitensScalarFieldEnum>
  }


  /**
   * tbProdutos.tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos
   */
  export type tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    where?: tbProdcomposicaoWhereInput
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    cursor?: tbProdcomposicaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdcomposicaoScalarFieldEnum>
  }


  /**
   * tbProdutos.tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos
   */
  export type tbProdutos$tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdcomposicao
     */
    select?: tbProdcomposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdcomposicaoInclude | null
    where?: tbProdcomposicaoWhereInput
    orderBy?: Enumerable<tbProdcomposicaoOrderByWithRelationInput>
    cursor?: tbProdcomposicaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdcomposicaoScalarFieldEnum>
  }


  /**
   * tbProdutos without action
   */
  export type tbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
  }



  /**
   * Model tbTiposprodutos
   */


  export type AggregateTbTiposprodutos = {
    _count: TbTiposprodutosCountAggregateOutputType | null
    _avg: TbTiposprodutosAvgAggregateOutputType | null
    _sum: TbTiposprodutosSumAggregateOutputType | null
    _min: TbTiposprodutosMinAggregateOutputType | null
    _max: TbTiposprodutosMaxAggregateOutputType | null
  }

  export type TbTiposprodutosAvgAggregateOutputType = {
    idtipprod: number | null
  }

  export type TbTiposprodutosSumAggregateOutputType = {
    idtipprod: number | null
  }

  export type TbTiposprodutosMinAggregateOutputType = {
    idtipprod: number | null
    nometipprod: string | null
  }

  export type TbTiposprodutosMaxAggregateOutputType = {
    idtipprod: number | null
    nometipprod: string | null
  }

  export type TbTiposprodutosCountAggregateOutputType = {
    idtipprod: number
    nometipprod: number
    _all: number
  }


  export type TbTiposprodutosAvgAggregateInputType = {
    idtipprod?: true
  }

  export type TbTiposprodutosSumAggregateInputType = {
    idtipprod?: true
  }

  export type TbTiposprodutosMinAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
  }

  export type TbTiposprodutosMaxAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
  }

  export type TbTiposprodutosCountAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
    _all?: true
  }

  export type TbTiposprodutosAggregateArgs = {
    /**
     * Filter which tbTiposprodutos to aggregate.
     */
    where?: tbTiposprodutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposprodutos to fetch.
     */
    orderBy?: Enumerable<tbTiposprodutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbTiposprodutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposprodutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposprodutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbTiposprodutos
    **/
    _count?: true | TbTiposprodutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbTiposprodutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbTiposprodutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbTiposprodutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbTiposprodutosMaxAggregateInputType
  }

  export type GetTbTiposprodutosAggregateType<T extends TbTiposprodutosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbTiposprodutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbTiposprodutos[P]>
      : GetScalarType<T[P], AggregateTbTiposprodutos[P]>
  }




  export type TbTiposprodutosGroupByArgs = {
    where?: tbTiposprodutosWhereInput
    orderBy?: Enumerable<tbTiposprodutosOrderByWithAggregationInput>
    by: TbTiposprodutosScalarFieldEnum[]
    having?: tbTiposprodutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbTiposprodutosCountAggregateInputType | true
    _avg?: TbTiposprodutosAvgAggregateInputType
    _sum?: TbTiposprodutosSumAggregateInputType
    _min?: TbTiposprodutosMinAggregateInputType
    _max?: TbTiposprodutosMaxAggregateInputType
  }


  export type TbTiposprodutosGroupByOutputType = {
    idtipprod: number
    nometipprod: string | null
    _count: TbTiposprodutosCountAggregateOutputType | null
    _avg: TbTiposprodutosAvgAggregateOutputType | null
    _sum: TbTiposprodutosSumAggregateOutputType | null
    _min: TbTiposprodutosMinAggregateOutputType | null
    _max: TbTiposprodutosMaxAggregateOutputType | null
  }

  type GetTbTiposprodutosGroupByPayload<T extends TbTiposprodutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbTiposprodutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbTiposprodutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbTiposprodutosGroupByOutputType[P]>
            : GetScalarType<T[P], TbTiposprodutosGroupByOutputType[P]>
        }
      >
    >


  export type tbTiposprodutosSelect = {
    idtipprod?: boolean
    nometipprod?: boolean
    tbprodutos?: boolean | tbTiposprodutos$tbprodutosArgs
    _count?: boolean | TbTiposprodutosCountOutputTypeArgs
  }


  export type tbTiposprodutosInclude = {
    tbprodutos?: boolean | tbTiposprodutos$tbprodutosArgs
    _count?: boolean | TbTiposprodutosCountOutputTypeArgs
  }

  export type tbTiposprodutosGetPayload<S extends boolean | null | undefined | tbTiposprodutosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbTiposprodutos :
    S extends undefined ? never :
    S extends { include: any } & (tbTiposprodutosArgs | tbTiposprodutosFindManyArgs)
    ? tbTiposprodutos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbprodutos' ? Array < tbProdutosGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbTiposprodutosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbTiposprodutosArgs | tbTiposprodutosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbprodutos' ? Array < tbProdutosGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbTiposprodutosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbTiposprodutos ? tbTiposprodutos[P] : never
  } 
      : tbTiposprodutos


  type tbTiposprodutosCountArgs = 
    Omit<tbTiposprodutosFindManyArgs, 'select' | 'include'> & {
      select?: TbTiposprodutosCountAggregateInputType | true
    }

  export interface tbTiposprodutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbTiposprodutos that matches the filter.
     * @param {tbTiposprodutosFindUniqueArgs} args - Arguments to find a TbTiposprodutos
     * @example
     * // Get one TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbTiposprodutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbTiposprodutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbTiposprodutos'> extends True ? Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>> : Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T> | null, null>

    /**
     * Find one TbTiposprodutos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbTiposprodutosFindUniqueOrThrowArgs} args - Arguments to find a TbTiposprodutos
     * @example
     * // Get one TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbTiposprodutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbTiposprodutosFindUniqueOrThrowArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Find the first TbTiposprodutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposprodutosFindFirstArgs} args - Arguments to find a TbTiposprodutos
     * @example
     * // Get one TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbTiposprodutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbTiposprodutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbTiposprodutos'> extends True ? Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>> : Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T> | null, null>

    /**
     * Find the first TbTiposprodutos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposprodutosFindFirstOrThrowArgs} args - Arguments to find a TbTiposprodutos
     * @example
     * // Get one TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbTiposprodutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbTiposprodutosFindFirstOrThrowArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Find zero or more TbTiposprodutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposprodutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findMany()
     * 
     * // Get first 10 TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.findMany({ take: 10 })
     * 
     * // Only select the `idtipprod`
     * const tbTiposprodutosWithIdtipprodOnly = await prisma.tbTiposprodutos.findMany({ select: { idtipprod: true } })
     * 
    **/
    findMany<T extends tbTiposprodutosFindManyArgs>(
      args?: SelectSubset<T, tbTiposprodutosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbTiposprodutosGetPayload<T>>>

    /**
     * Create a TbTiposprodutos.
     * @param {tbTiposprodutosCreateArgs} args - Arguments to create a TbTiposprodutos.
     * @example
     * // Create one TbTiposprodutos
     * const TbTiposprodutos = await prisma.tbTiposprodutos.create({
     *   data: {
     *     // ... data to create a TbTiposprodutos
     *   }
     * })
     * 
    **/
    create<T extends tbTiposprodutosCreateArgs>(
      args: SelectSubset<T, tbTiposprodutosCreateArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Create many TbTiposprodutos.
     *     @param {tbTiposprodutosCreateManyArgs} args - Arguments to create many TbTiposprodutos.
     *     @example
     *     // Create many TbTiposprodutos
     *     const tbTiposprodutos = await prisma.tbTiposprodutos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbTiposprodutosCreateManyArgs>(
      args?: SelectSubset<T, tbTiposprodutosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbTiposprodutos.
     * @param {tbTiposprodutosDeleteArgs} args - Arguments to delete one TbTiposprodutos.
     * @example
     * // Delete one TbTiposprodutos
     * const TbTiposprodutos = await prisma.tbTiposprodutos.delete({
     *   where: {
     *     // ... filter to delete one TbTiposprodutos
     *   }
     * })
     * 
    **/
    delete<T extends tbTiposprodutosDeleteArgs>(
      args: SelectSubset<T, tbTiposprodutosDeleteArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Update one TbTiposprodutos.
     * @param {tbTiposprodutosUpdateArgs} args - Arguments to update one TbTiposprodutos.
     * @example
     * // Update one TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbTiposprodutosUpdateArgs>(
      args: SelectSubset<T, tbTiposprodutosUpdateArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Delete zero or more TbTiposprodutos.
     * @param {tbTiposprodutosDeleteManyArgs} args - Arguments to filter TbTiposprodutos to delete.
     * @example
     * // Delete a few TbTiposprodutos
     * const { count } = await prisma.tbTiposprodutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbTiposprodutosDeleteManyArgs>(
      args?: SelectSubset<T, tbTiposprodutosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbTiposprodutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposprodutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbTiposprodutosUpdateManyArgs>(
      args: SelectSubset<T, tbTiposprodutosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbTiposprodutos.
     * @param {tbTiposprodutosUpsertArgs} args - Arguments to update or create a TbTiposprodutos.
     * @example
     * // Update or create a TbTiposprodutos
     * const tbTiposprodutos = await prisma.tbTiposprodutos.upsert({
     *   create: {
     *     // ... data to create a TbTiposprodutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbTiposprodutos we want to update
     *   }
     * })
    **/
    upsert<T extends tbTiposprodutosUpsertArgs>(
      args: SelectSubset<T, tbTiposprodutosUpsertArgs>
    ): Prisma__tbTiposprodutosClient<tbTiposprodutosGetPayload<T>>

    /**
     * Count the number of TbTiposprodutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposprodutosCountArgs} args - Arguments to filter TbTiposprodutos to count.
     * @example
     * // Count the number of TbTiposprodutos
     * const count = await prisma.tbTiposprodutos.count({
     *   where: {
     *     // ... the filter for the TbTiposprodutos we want to count
     *   }
     * })
    **/
    count<T extends tbTiposprodutosCountArgs>(
      args?: Subset<T, tbTiposprodutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbTiposprodutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbTiposprodutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbTiposprodutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbTiposprodutosAggregateArgs>(args: Subset<T, TbTiposprodutosAggregateArgs>): Prisma.PrismaPromise<GetTbTiposprodutosAggregateType<T>>

    /**
     * Group by TbTiposprodutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbTiposprodutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbTiposprodutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbTiposprodutosGroupByArgs['orderBy'] }
        : { orderBy?: TbTiposprodutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbTiposprodutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbTiposprodutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbTiposprodutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbTiposprodutosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbprodutos<T extends tbTiposprodutos$tbprodutosArgs= {}>(args?: Subset<T, tbTiposprodutos$tbprodutosArgs>): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbTiposprodutos base type for findUnique actions
   */
  export type tbTiposprodutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter, which tbTiposprodutos to fetch.
     */
    where: tbTiposprodutosWhereUniqueInput
  }

  /**
   * tbTiposprodutos findUnique
   */
  export interface tbTiposprodutosFindUniqueArgs extends tbTiposprodutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbTiposprodutos findUniqueOrThrow
   */
  export type tbTiposprodutosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter, which tbTiposprodutos to fetch.
     */
    where: tbTiposprodutosWhereUniqueInput
  }


  /**
   * tbTiposprodutos base type for findFirst actions
   */
  export type tbTiposprodutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter, which tbTiposprodutos to fetch.
     */
    where?: tbTiposprodutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposprodutos to fetch.
     */
    orderBy?: Enumerable<tbTiposprodutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbTiposprodutos.
     */
    cursor?: tbTiposprodutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposprodutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposprodutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbTiposprodutos.
     */
    distinct?: Enumerable<TbTiposprodutosScalarFieldEnum>
  }

  /**
   * tbTiposprodutos findFirst
   */
  export interface tbTiposprodutosFindFirstArgs extends tbTiposprodutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbTiposprodutos findFirstOrThrow
   */
  export type tbTiposprodutosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter, which tbTiposprodutos to fetch.
     */
    where?: tbTiposprodutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposprodutos to fetch.
     */
    orderBy?: Enumerable<tbTiposprodutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbTiposprodutos.
     */
    cursor?: tbTiposprodutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposprodutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposprodutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbTiposprodutos.
     */
    distinct?: Enumerable<TbTiposprodutosScalarFieldEnum>
  }


  /**
   * tbTiposprodutos findMany
   */
  export type tbTiposprodutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter, which tbTiposprodutos to fetch.
     */
    where?: tbTiposprodutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposprodutos to fetch.
     */
    orderBy?: Enumerable<tbTiposprodutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbTiposprodutos.
     */
    cursor?: tbTiposprodutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposprodutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposprodutos.
     */
    skip?: number
    distinct?: Enumerable<TbTiposprodutosScalarFieldEnum>
  }


  /**
   * tbTiposprodutos create
   */
  export type tbTiposprodutosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * The data needed to create a tbTiposprodutos.
     */
    data: XOR<tbTiposprodutosCreateInput, tbTiposprodutosUncheckedCreateInput>
  }


  /**
   * tbTiposprodutos createMany
   */
  export type tbTiposprodutosCreateManyArgs = {
    /**
     * The data used to create many tbTiposprodutos.
     */
    data: Enumerable<tbTiposprodutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbTiposprodutos update
   */
  export type tbTiposprodutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * The data needed to update a tbTiposprodutos.
     */
    data: XOR<tbTiposprodutosUpdateInput, tbTiposprodutosUncheckedUpdateInput>
    /**
     * Choose, which tbTiposprodutos to update.
     */
    where: tbTiposprodutosWhereUniqueInput
  }


  /**
   * tbTiposprodutos updateMany
   */
  export type tbTiposprodutosUpdateManyArgs = {
    /**
     * The data used to update tbTiposprodutos.
     */
    data: XOR<tbTiposprodutosUpdateManyMutationInput, tbTiposprodutosUncheckedUpdateManyInput>
    /**
     * Filter which tbTiposprodutos to update
     */
    where?: tbTiposprodutosWhereInput
  }


  /**
   * tbTiposprodutos upsert
   */
  export type tbTiposprodutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * The filter to search for the tbTiposprodutos to update in case it exists.
     */
    where: tbTiposprodutosWhereUniqueInput
    /**
     * In case the tbTiposprodutos found by the `where` argument doesn't exist, create a new tbTiposprodutos with this data.
     */
    create: XOR<tbTiposprodutosCreateInput, tbTiposprodutosUncheckedCreateInput>
    /**
     * In case the tbTiposprodutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbTiposprodutosUpdateInput, tbTiposprodutosUncheckedUpdateInput>
  }


  /**
   * tbTiposprodutos delete
   */
  export type tbTiposprodutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
    /**
     * Filter which tbTiposprodutos to delete.
     */
    where: tbTiposprodutosWhereUniqueInput
  }


  /**
   * tbTiposprodutos deleteMany
   */
  export type tbTiposprodutosDeleteManyArgs = {
    /**
     * Filter which tbTiposprodutos to delete
     */
    where?: tbTiposprodutosWhereInput
  }


  /**
   * tbTiposprodutos.tbprodutos
   */
  export type tbTiposprodutos$tbprodutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    cursor?: tbProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbTiposprodutos without action
   */
  export type tbTiposprodutosArgs = {
    /**
     * Select specific fields to fetch from the tbTiposprodutos
     */
    select?: tbTiposprodutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposprodutosInclude | null
  }



  /**
   * Model tbUnidademedida
   */


  export type AggregateTbUnidademedida = {
    _count: TbUnidademedidaCountAggregateOutputType | null
    _avg: TbUnidademedidaAvgAggregateOutputType | null
    _sum: TbUnidademedidaSumAggregateOutputType | null
    _min: TbUnidademedidaMinAggregateOutputType | null
    _max: TbUnidademedidaMaxAggregateOutputType | null
  }

  export type TbUnidademedidaAvgAggregateOutputType = {
    idunidade: number | null
  }

  export type TbUnidademedidaSumAggregateOutputType = {
    idunidade: number | null
  }

  export type TbUnidademedidaMinAggregateOutputType = {
    idunidade: number | null
    siglaun: string | null
    nomeunidade: string | null
  }

  export type TbUnidademedidaMaxAggregateOutputType = {
    idunidade: number | null
    siglaun: string | null
    nomeunidade: string | null
  }

  export type TbUnidademedidaCountAggregateOutputType = {
    idunidade: number
    siglaun: number
    nomeunidade: number
    _all: number
  }


  export type TbUnidademedidaAvgAggregateInputType = {
    idunidade?: true
  }

  export type TbUnidademedidaSumAggregateInputType = {
    idunidade?: true
  }

  export type TbUnidademedidaMinAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
  }

  export type TbUnidademedidaMaxAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
  }

  export type TbUnidademedidaCountAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
    _all?: true
  }

  export type TbUnidademedidaAggregateArgs = {
    /**
     * Filter which tbUnidademedida to aggregate.
     */
    where?: tbUnidademedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidademedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidademedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbUnidademedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidademedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidademedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbUnidademedidas
    **/
    _count?: true | TbUnidademedidaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbUnidademedidaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbUnidademedidaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbUnidademedidaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbUnidademedidaMaxAggregateInputType
  }

  export type GetTbUnidademedidaAggregateType<T extends TbUnidademedidaAggregateArgs> = {
        [P in keyof T & keyof AggregateTbUnidademedida]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbUnidademedida[P]>
      : GetScalarType<T[P], AggregateTbUnidademedida[P]>
  }




  export type TbUnidademedidaGroupByArgs = {
    where?: tbUnidademedidaWhereInput
    orderBy?: Enumerable<tbUnidademedidaOrderByWithAggregationInput>
    by: TbUnidademedidaScalarFieldEnum[]
    having?: tbUnidademedidaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbUnidademedidaCountAggregateInputType | true
    _avg?: TbUnidademedidaAvgAggregateInputType
    _sum?: TbUnidademedidaSumAggregateInputType
    _min?: TbUnidademedidaMinAggregateInputType
    _max?: TbUnidademedidaMaxAggregateInputType
  }


  export type TbUnidademedidaGroupByOutputType = {
    idunidade: number
    siglaun: string | null
    nomeunidade: string | null
    _count: TbUnidademedidaCountAggregateOutputType | null
    _avg: TbUnidademedidaAvgAggregateOutputType | null
    _sum: TbUnidademedidaSumAggregateOutputType | null
    _min: TbUnidademedidaMinAggregateOutputType | null
    _max: TbUnidademedidaMaxAggregateOutputType | null
  }

  type GetTbUnidademedidaGroupByPayload<T extends TbUnidademedidaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbUnidademedidaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbUnidademedidaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbUnidademedidaGroupByOutputType[P]>
            : GetScalarType<T[P], TbUnidademedidaGroupByOutputType[P]>
        }
      >
    >


  export type tbUnidademedidaSelect = {
    idunidade?: boolean
    siglaun?: boolean
    nomeunidade?: boolean
    tbprodutos?: boolean | tbUnidademedida$tbprodutosArgs
    _count?: boolean | TbUnidademedidaCountOutputTypeArgs
  }


  export type tbUnidademedidaInclude = {
    tbprodutos?: boolean | tbUnidademedida$tbprodutosArgs
    _count?: boolean | TbUnidademedidaCountOutputTypeArgs
  }

  export type tbUnidademedidaGetPayload<S extends boolean | null | undefined | tbUnidademedidaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbUnidademedida :
    S extends undefined ? never :
    S extends { include: any } & (tbUnidademedidaArgs | tbUnidademedidaFindManyArgs)
    ? tbUnidademedida  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbprodutos' ? Array < tbProdutosGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbUnidademedidaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbUnidademedidaArgs | tbUnidademedidaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbprodutos' ? Array < tbProdutosGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbUnidademedidaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbUnidademedida ? tbUnidademedida[P] : never
  } 
      : tbUnidademedida


  type tbUnidademedidaCountArgs = 
    Omit<tbUnidademedidaFindManyArgs, 'select' | 'include'> & {
      select?: TbUnidademedidaCountAggregateInputType | true
    }

  export interface tbUnidademedidaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbUnidademedida that matches the filter.
     * @param {tbUnidademedidaFindUniqueArgs} args - Arguments to find a TbUnidademedida
     * @example
     * // Get one TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbUnidademedidaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbUnidademedidaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbUnidademedida'> extends True ? Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>> : Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T> | null, null>

    /**
     * Find one TbUnidademedida that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbUnidademedidaFindUniqueOrThrowArgs} args - Arguments to find a TbUnidademedida
     * @example
     * // Get one TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbUnidademedidaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbUnidademedidaFindUniqueOrThrowArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Find the first TbUnidademedida that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidademedidaFindFirstArgs} args - Arguments to find a TbUnidademedida
     * @example
     * // Get one TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbUnidademedidaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbUnidademedidaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbUnidademedida'> extends True ? Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>> : Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T> | null, null>

    /**
     * Find the first TbUnidademedida that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidademedidaFindFirstOrThrowArgs} args - Arguments to find a TbUnidademedida
     * @example
     * // Get one TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbUnidademedidaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbUnidademedidaFindFirstOrThrowArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Find zero or more TbUnidademedidas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidademedidaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbUnidademedidas
     * const tbUnidademedidas = await prisma.tbUnidademedida.findMany()
     * 
     * // Get first 10 TbUnidademedidas
     * const tbUnidademedidas = await prisma.tbUnidademedida.findMany({ take: 10 })
     * 
     * // Only select the `idunidade`
     * const tbUnidademedidaWithIdunidadeOnly = await prisma.tbUnidademedida.findMany({ select: { idunidade: true } })
     * 
    **/
    findMany<T extends tbUnidademedidaFindManyArgs>(
      args?: SelectSubset<T, tbUnidademedidaFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbUnidademedidaGetPayload<T>>>

    /**
     * Create a TbUnidademedida.
     * @param {tbUnidademedidaCreateArgs} args - Arguments to create a TbUnidademedida.
     * @example
     * // Create one TbUnidademedida
     * const TbUnidademedida = await prisma.tbUnidademedida.create({
     *   data: {
     *     // ... data to create a TbUnidademedida
     *   }
     * })
     * 
    **/
    create<T extends tbUnidademedidaCreateArgs>(
      args: SelectSubset<T, tbUnidademedidaCreateArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Create many TbUnidademedidas.
     *     @param {tbUnidademedidaCreateManyArgs} args - Arguments to create many TbUnidademedidas.
     *     @example
     *     // Create many TbUnidademedidas
     *     const tbUnidademedida = await prisma.tbUnidademedida.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbUnidademedidaCreateManyArgs>(
      args?: SelectSubset<T, tbUnidademedidaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbUnidademedida.
     * @param {tbUnidademedidaDeleteArgs} args - Arguments to delete one TbUnidademedida.
     * @example
     * // Delete one TbUnidademedida
     * const TbUnidademedida = await prisma.tbUnidademedida.delete({
     *   where: {
     *     // ... filter to delete one TbUnidademedida
     *   }
     * })
     * 
    **/
    delete<T extends tbUnidademedidaDeleteArgs>(
      args: SelectSubset<T, tbUnidademedidaDeleteArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Update one TbUnidademedida.
     * @param {tbUnidademedidaUpdateArgs} args - Arguments to update one TbUnidademedida.
     * @example
     * // Update one TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbUnidademedidaUpdateArgs>(
      args: SelectSubset<T, tbUnidademedidaUpdateArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Delete zero or more TbUnidademedidas.
     * @param {tbUnidademedidaDeleteManyArgs} args - Arguments to filter TbUnidademedidas to delete.
     * @example
     * // Delete a few TbUnidademedidas
     * const { count } = await prisma.tbUnidademedida.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbUnidademedidaDeleteManyArgs>(
      args?: SelectSubset<T, tbUnidademedidaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbUnidademedidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidademedidaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbUnidademedidas
     * const tbUnidademedida = await prisma.tbUnidademedida.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbUnidademedidaUpdateManyArgs>(
      args: SelectSubset<T, tbUnidademedidaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbUnidademedida.
     * @param {tbUnidademedidaUpsertArgs} args - Arguments to update or create a TbUnidademedida.
     * @example
     * // Update or create a TbUnidademedida
     * const tbUnidademedida = await prisma.tbUnidademedida.upsert({
     *   create: {
     *     // ... data to create a TbUnidademedida
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbUnidademedida we want to update
     *   }
     * })
    **/
    upsert<T extends tbUnidademedidaUpsertArgs>(
      args: SelectSubset<T, tbUnidademedidaUpsertArgs>
    ): Prisma__tbUnidademedidaClient<tbUnidademedidaGetPayload<T>>

    /**
     * Count the number of TbUnidademedidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidademedidaCountArgs} args - Arguments to filter TbUnidademedidas to count.
     * @example
     * // Count the number of TbUnidademedidas
     * const count = await prisma.tbUnidademedida.count({
     *   where: {
     *     // ... the filter for the TbUnidademedidas we want to count
     *   }
     * })
    **/
    count<T extends tbUnidademedidaCountArgs>(
      args?: Subset<T, tbUnidademedidaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbUnidademedidaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbUnidademedida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUnidademedidaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbUnidademedidaAggregateArgs>(args: Subset<T, TbUnidademedidaAggregateArgs>): Prisma.PrismaPromise<GetTbUnidademedidaAggregateType<T>>

    /**
     * Group by TbUnidademedida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUnidademedidaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbUnidademedidaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbUnidademedidaGroupByArgs['orderBy'] }
        : { orderBy?: TbUnidademedidaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbUnidademedidaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbUnidademedidaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbUnidademedida.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbUnidademedidaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbprodutos<T extends tbUnidademedida$tbprodutosArgs= {}>(args?: Subset<T, tbUnidademedida$tbprodutosArgs>): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbUnidademedida base type for findUnique actions
   */
  export type tbUnidademedidaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter, which tbUnidademedida to fetch.
     */
    where: tbUnidademedidaWhereUniqueInput
  }

  /**
   * tbUnidademedida findUnique
   */
  export interface tbUnidademedidaFindUniqueArgs extends tbUnidademedidaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUnidademedida findUniqueOrThrow
   */
  export type tbUnidademedidaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter, which tbUnidademedida to fetch.
     */
    where: tbUnidademedidaWhereUniqueInput
  }


  /**
   * tbUnidademedida base type for findFirst actions
   */
  export type tbUnidademedidaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter, which tbUnidademedida to fetch.
     */
    where?: tbUnidademedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidademedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidademedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUnidademedidas.
     */
    cursor?: tbUnidademedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidademedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidademedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUnidademedidas.
     */
    distinct?: Enumerable<TbUnidademedidaScalarFieldEnum>
  }

  /**
   * tbUnidademedida findFirst
   */
  export interface tbUnidademedidaFindFirstArgs extends tbUnidademedidaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUnidademedida findFirstOrThrow
   */
  export type tbUnidademedidaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter, which tbUnidademedida to fetch.
     */
    where?: tbUnidademedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidademedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidademedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUnidademedidas.
     */
    cursor?: tbUnidademedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidademedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidademedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUnidademedidas.
     */
    distinct?: Enumerable<TbUnidademedidaScalarFieldEnum>
  }


  /**
   * tbUnidademedida findMany
   */
  export type tbUnidademedidaFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter, which tbUnidademedidas to fetch.
     */
    where?: tbUnidademedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidademedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidademedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbUnidademedidas.
     */
    cursor?: tbUnidademedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidademedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidademedidas.
     */
    skip?: number
    distinct?: Enumerable<TbUnidademedidaScalarFieldEnum>
  }


  /**
   * tbUnidademedida create
   */
  export type tbUnidademedidaCreateArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * The data needed to create a tbUnidademedida.
     */
    data: XOR<tbUnidademedidaCreateInput, tbUnidademedidaUncheckedCreateInput>
  }


  /**
   * tbUnidademedida createMany
   */
  export type tbUnidademedidaCreateManyArgs = {
    /**
     * The data used to create many tbUnidademedidas.
     */
    data: Enumerable<tbUnidademedidaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbUnidademedida update
   */
  export type tbUnidademedidaUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * The data needed to update a tbUnidademedida.
     */
    data: XOR<tbUnidademedidaUpdateInput, tbUnidademedidaUncheckedUpdateInput>
    /**
     * Choose, which tbUnidademedida to update.
     */
    where: tbUnidademedidaWhereUniqueInput
  }


  /**
   * tbUnidademedida updateMany
   */
  export type tbUnidademedidaUpdateManyArgs = {
    /**
     * The data used to update tbUnidademedidas.
     */
    data: XOR<tbUnidademedidaUpdateManyMutationInput, tbUnidademedidaUncheckedUpdateManyInput>
    /**
     * Filter which tbUnidademedidas to update
     */
    where?: tbUnidademedidaWhereInput
  }


  /**
   * tbUnidademedida upsert
   */
  export type tbUnidademedidaUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * The filter to search for the tbUnidademedida to update in case it exists.
     */
    where: tbUnidademedidaWhereUniqueInput
    /**
     * In case the tbUnidademedida found by the `where` argument doesn't exist, create a new tbUnidademedida with this data.
     */
    create: XOR<tbUnidademedidaCreateInput, tbUnidademedidaUncheckedCreateInput>
    /**
     * In case the tbUnidademedida was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbUnidademedidaUpdateInput, tbUnidademedidaUncheckedUpdateInput>
  }


  /**
   * tbUnidademedida delete
   */
  export type tbUnidademedidaDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
    /**
     * Filter which tbUnidademedida to delete.
     */
    where: tbUnidademedidaWhereUniqueInput
  }


  /**
   * tbUnidademedida deleteMany
   */
  export type tbUnidademedidaDeleteManyArgs = {
    /**
     * Filter which tbUnidademedidas to delete
     */
    where?: tbUnidademedidaWhereInput
  }


  /**
   * tbUnidademedida.tbprodutos
   */
  export type tbUnidademedida$tbprodutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    cursor?: tbProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbUnidademedida without action
   */
  export type tbUnidademedidaArgs = {
    /**
     * Select specific fields to fetch from the tbUnidademedida
     */
    select?: tbUnidademedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidademedidaInclude | null
  }



  /**
   * Model tbUsuarios
   */


  export type AggregateTbUsuarios = {
    _count: TbUsuariosCountAggregateOutputType | null
    _avg: TbUsuariosAvgAggregateOutputType | null
    _sum: TbUsuariosSumAggregateOutputType | null
    _min: TbUsuariosMinAggregateOutputType | null
    _max: TbUsuariosMaxAggregateOutputType | null
  }

  export type TbUsuariosAvgAggregateOutputType = {
    idusuario: number | null
  }

  export type TbUsuariosSumAggregateOutputType = {
    idusuario: number | null
  }

  export type TbUsuariosMinAggregateOutputType = {
    idusuario: number | null
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
  }

  export type TbUsuariosMaxAggregateOutputType = {
    idusuario: number | null
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
  }

  export type TbUsuariosCountAggregateOutputType = {
    idusuario: number
    usu_login: number
    nome: number
    senha: number
    dtcriacao: number
    usu_admin: number
    _all: number
  }


  export type TbUsuariosAvgAggregateInputType = {
    idusuario?: true
  }

  export type TbUsuariosSumAggregateInputType = {
    idusuario?: true
  }

  export type TbUsuariosMinAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
  }

  export type TbUsuariosMaxAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
  }

  export type TbUsuariosCountAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
    _all?: true
  }

  export type TbUsuariosAggregateArgs = {
    /**
     * Filter which tbUsuarios to aggregate.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbUsuarios
    **/
    _count?: true | TbUsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbUsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbUsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbUsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbUsuariosMaxAggregateInputType
  }

  export type GetTbUsuariosAggregateType<T extends TbUsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbUsuarios[P]>
      : GetScalarType<T[P], AggregateTbUsuarios[P]>
  }




  export type TbUsuariosGroupByArgs = {
    where?: tbUsuariosWhereInput
    orderBy?: Enumerable<tbUsuariosOrderByWithAggregationInput>
    by: TbUsuariosScalarFieldEnum[]
    having?: tbUsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbUsuariosCountAggregateInputType | true
    _avg?: TbUsuariosAvgAggregateInputType
    _sum?: TbUsuariosSumAggregateInputType
    _min?: TbUsuariosMinAggregateInputType
    _max?: TbUsuariosMaxAggregateInputType
  }


  export type TbUsuariosGroupByOutputType = {
    idusuario: number
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
    _count: TbUsuariosCountAggregateOutputType | null
    _avg: TbUsuariosAvgAggregateOutputType | null
    _sum: TbUsuariosSumAggregateOutputType | null
    _min: TbUsuariosMinAggregateOutputType | null
    _max: TbUsuariosMaxAggregateOutputType | null
  }

  type GetTbUsuariosGroupByPayload<T extends TbUsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbUsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbUsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbUsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], TbUsuariosGroupByOutputType[P]>
        }
      >
    >


  export type tbUsuariosSelect = {
    idusuario?: boolean
    usu_login?: boolean
    nome?: boolean
    senha?: boolean
    dtcriacao?: boolean
    usu_admin?: boolean
    tbmovimentos?: boolean | tbUsuarios$tbmovimentosArgs
    tbnf?: boolean | tbUsuarios$tbnfArgs
    _count?: boolean | TbUsuariosCountOutputTypeArgs
  }


  export type tbUsuariosInclude = {
    tbmovimentos?: boolean | tbUsuarios$tbmovimentosArgs
    tbnf?: boolean | tbUsuarios$tbnfArgs
    _count?: boolean | TbUsuariosCountOutputTypeArgs
  }

  export type tbUsuariosGetPayload<S extends boolean | null | undefined | tbUsuariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbUsuarios :
    S extends undefined ? never :
    S extends { include: any } & (tbUsuariosArgs | tbUsuariosFindManyArgs)
    ? tbUsuarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbmovimentos' ? Array < tbMovimentosGetPayload<S['include'][P]>>  :
        P extends 'tbnf' ? Array < tbNfGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbUsuariosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbUsuariosArgs | tbUsuariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbmovimentos' ? Array < tbMovimentosGetPayload<S['select'][P]>>  :
        P extends 'tbnf' ? Array < tbNfGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbUsuariosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbUsuarios ? tbUsuarios[P] : never
  } 
      : tbUsuarios


  type tbUsuariosCountArgs = 
    Omit<tbUsuariosFindManyArgs, 'select' | 'include'> & {
      select?: TbUsuariosCountAggregateInputType | true
    }

  export interface tbUsuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbUsuarios that matches the filter.
     * @param {tbUsuariosFindUniqueArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbUsuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbUsuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbUsuarios'> extends True ? Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>> : Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | null, null>

    /**
     * Find one TbUsuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbUsuariosFindUniqueOrThrowArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbUsuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbUsuariosFindUniqueOrThrowArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Find the first TbUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindFirstArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbUsuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbUsuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbUsuarios'> extends True ? Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>> : Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | null, null>

    /**
     * Find the first TbUsuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindFirstOrThrowArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbUsuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbUsuariosFindFirstOrThrowArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Find zero or more TbUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findMany()
     * 
     * // Get first 10 TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findMany({ take: 10 })
     * 
     * // Only select the `idusuario`
     * const tbUsuariosWithIdusuarioOnly = await prisma.tbUsuarios.findMany({ select: { idusuario: true } })
     * 
    **/
    findMany<T extends tbUsuariosFindManyArgs>(
      args?: SelectSubset<T, tbUsuariosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbUsuariosGetPayload<T>>>

    /**
     * Create a TbUsuarios.
     * @param {tbUsuariosCreateArgs} args - Arguments to create a TbUsuarios.
     * @example
     * // Create one TbUsuarios
     * const TbUsuarios = await prisma.tbUsuarios.create({
     *   data: {
     *     // ... data to create a TbUsuarios
     *   }
     * })
     * 
    **/
    create<T extends tbUsuariosCreateArgs>(
      args: SelectSubset<T, tbUsuariosCreateArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Create many TbUsuarios.
     *     @param {tbUsuariosCreateManyArgs} args - Arguments to create many TbUsuarios.
     *     @example
     *     // Create many TbUsuarios
     *     const tbUsuarios = await prisma.tbUsuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbUsuariosCreateManyArgs>(
      args?: SelectSubset<T, tbUsuariosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbUsuarios.
     * @param {tbUsuariosDeleteArgs} args - Arguments to delete one TbUsuarios.
     * @example
     * // Delete one TbUsuarios
     * const TbUsuarios = await prisma.tbUsuarios.delete({
     *   where: {
     *     // ... filter to delete one TbUsuarios
     *   }
     * })
     * 
    **/
    delete<T extends tbUsuariosDeleteArgs>(
      args: SelectSubset<T, tbUsuariosDeleteArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Update one TbUsuarios.
     * @param {tbUsuariosUpdateArgs} args - Arguments to update one TbUsuarios.
     * @example
     * // Update one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbUsuariosUpdateArgs>(
      args: SelectSubset<T, tbUsuariosUpdateArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Delete zero or more TbUsuarios.
     * @param {tbUsuariosDeleteManyArgs} args - Arguments to filter TbUsuarios to delete.
     * @example
     * // Delete a few TbUsuarios
     * const { count } = await prisma.tbUsuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbUsuariosDeleteManyArgs>(
      args?: SelectSubset<T, tbUsuariosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbUsuariosUpdateManyArgs>(
      args: SelectSubset<T, tbUsuariosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbUsuarios.
     * @param {tbUsuariosUpsertArgs} args - Arguments to update or create a TbUsuarios.
     * @example
     * // Update or create a TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.upsert({
     *   create: {
     *     // ... data to create a TbUsuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbUsuarios we want to update
     *   }
     * })
    **/
    upsert<T extends tbUsuariosUpsertArgs>(
      args: SelectSubset<T, tbUsuariosUpsertArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Count the number of TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosCountArgs} args - Arguments to filter TbUsuarios to count.
     * @example
     * // Count the number of TbUsuarios
     * const count = await prisma.tbUsuarios.count({
     *   where: {
     *     // ... the filter for the TbUsuarios we want to count
     *   }
     * })
    **/
    count<T extends tbUsuariosCountArgs>(
      args?: Subset<T, tbUsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbUsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbUsuariosAggregateArgs>(args: Subset<T, TbUsuariosAggregateArgs>): Prisma.PrismaPromise<GetTbUsuariosAggregateType<T>>

    /**
     * Group by TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbUsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbUsuariosGroupByArgs['orderBy'] }
        : { orderBy?: TbUsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbUsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbUsuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbUsuariosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbmovimentos<T extends tbUsuarios$tbmovimentosArgs= {}>(args?: Subset<T, tbUsuarios$tbmovimentosArgs>): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>| Null>;

    tbnf<T extends tbUsuarios$tbnfArgs= {}>(args?: Subset<T, tbUsuarios$tbnfArgs>): Prisma.PrismaPromise<Array<tbNfGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbUsuarios base type for findUnique actions
   */
  export type tbUsuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where: tbUsuariosWhereUniqueInput
  }

  /**
   * tbUsuarios findUnique
   */
  export interface tbUsuariosFindUniqueArgs extends tbUsuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUsuarios findUniqueOrThrow
   */
  export type tbUsuariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios base type for findFirst actions
   */
  export type tbUsuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUsuarios.
     */
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }

  /**
   * tbUsuarios findFirst
   */
  export interface tbUsuariosFindFirstArgs extends tbUsuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUsuarios findFirstOrThrow
   */
  export type tbUsuariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUsuarios.
     */
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }


  /**
   * tbUsuarios findMany
   */
  export type tbUsuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }


  /**
   * tbUsuarios create
   */
  export type tbUsuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The data needed to create a tbUsuarios.
     */
    data: XOR<tbUsuariosCreateInput, tbUsuariosUncheckedCreateInput>
  }


  /**
   * tbUsuarios createMany
   */
  export type tbUsuariosCreateManyArgs = {
    /**
     * The data used to create many tbUsuarios.
     */
    data: Enumerable<tbUsuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbUsuarios update
   */
  export type tbUsuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The data needed to update a tbUsuarios.
     */
    data: XOR<tbUsuariosUpdateInput, tbUsuariosUncheckedUpdateInput>
    /**
     * Choose, which tbUsuarios to update.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios updateMany
   */
  export type tbUsuariosUpdateManyArgs = {
    /**
     * The data used to update tbUsuarios.
     */
    data: XOR<tbUsuariosUpdateManyMutationInput, tbUsuariosUncheckedUpdateManyInput>
    /**
     * Filter which tbUsuarios to update
     */
    where?: tbUsuariosWhereInput
  }


  /**
   * tbUsuarios upsert
   */
  export type tbUsuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The filter to search for the tbUsuarios to update in case it exists.
     */
    where: tbUsuariosWhereUniqueInput
    /**
     * In case the tbUsuarios found by the `where` argument doesn't exist, create a new tbUsuarios with this data.
     */
    create: XOR<tbUsuariosCreateInput, tbUsuariosUncheckedCreateInput>
    /**
     * In case the tbUsuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbUsuariosUpdateInput, tbUsuariosUncheckedUpdateInput>
  }


  /**
   * tbUsuarios delete
   */
  export type tbUsuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter which tbUsuarios to delete.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios deleteMany
   */
  export type tbUsuariosDeleteManyArgs = {
    /**
     * Filter which tbUsuarios to delete
     */
    where?: tbUsuariosWhereInput
  }


  /**
   * tbUsuarios.tbmovimentos
   */
  export type tbUsuarios$tbmovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    cursor?: tbMovimentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbUsuarios.tbnf
   */
  export type tbUsuarios$tbnfArgs = {
    /**
     * Select specific fields to fetch from the tbNf
     */
    select?: tbNfSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNfInclude | null
    where?: tbNfWhereInput
    orderBy?: Enumerable<tbNfOrderByWithRelationInput>
    cursor?: tbNfWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNfScalarFieldEnum>
  }


  /**
   * tbUsuarios without action
   */
  export type tbUsuariosArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TbEstoqueScalarFieldEnum: {
    idestoque: 'idestoque',
    idproduto: 'idproduto',
    idlocal: 'idlocal',
    quantidade: 'quantidade',
    dtinc: 'dtinc'
  };

  export type TbEstoqueScalarFieldEnum = (typeof TbEstoqueScalarFieldEnum)[keyof typeof TbEstoqueScalarFieldEnum]


  export const TbFornecedoresScalarFieldEnum: {
    idfor: 'idfor',
    nomefor: 'nomefor',
    fisjur: 'fisjur',
    cnpjcpf: 'cnpjcpf',
    telefone: 'telefone',
    cep: 'cep',
    cidade: 'cidade',
    rua: 'rua',
    bairro: 'bairro',
    numero: 'numero',
    complemento: 'complemento',
    email: 'email'
  };

  export type TbFornecedoresScalarFieldEnum = (typeof TbFornecedoresScalarFieldEnum)[keyof typeof TbFornecedoresScalarFieldEnum]


  export const TbLocaisScalarFieldEnum: {
    idlocal: 'idlocal',
    nomelocal: 'nomelocal'
  };

  export type TbLocaisScalarFieldEnum = (typeof TbLocaisScalarFieldEnum)[keyof typeof TbLocaisScalarFieldEnum]


  export const TbMovimentosScalarFieldEnum: {
    idmovimento: 'idmovimento',
    tipmov: 'tipmov',
    idfor: 'idfor',
    idusuario_alteracao: 'idusuario_alteracao',
    dtinc: 'dtinc'
  };

  export type TbMovimentosScalarFieldEnum = (typeof TbMovimentosScalarFieldEnum)[keyof typeof TbMovimentosScalarFieldEnum]


  export const TbMovitensScalarFieldEnum: {
    idmovimento: 'idmovimento',
    seqitem: 'seqitem',
    idproduto: 'idproduto',
    idlocal: 'idlocal',
    dtinc: 'dtinc',
    quantidade: 'quantidade'
  };

  export type TbMovitensScalarFieldEnum = (typeof TbMovitensScalarFieldEnum)[keyof typeof TbMovitensScalarFieldEnum]


  export const TbNfScalarFieldEnum: {
    idnf: 'idnf',
    numnf: 'numnf',
    idmovimento: 'idmovimento',
    serienf: 'serienf',
    idfor: 'idfor',
    idusuario_inclusao: 'idusuario_inclusao',
    dtemissao: 'dtemissao',
    vlrtotal: 'vlrtotal'
  };

  export type TbNfScalarFieldEnum = (typeof TbNfScalarFieldEnum)[keyof typeof TbNfScalarFieldEnum]


  export const TbNfitensScalarFieldEnum: {
    idnf: 'idnf',
    idmovimento: 'idmovimento',
    seqitem: 'seqitem',
    idproduto: 'idproduto',
    vlrunitario: 'vlrunitario',
    quantidade: 'quantidade',
    vlrtotitem: 'vlrtotitem'
  };

  export type TbNfitensScalarFieldEnum = (typeof TbNfitensScalarFieldEnum)[keyof typeof TbNfitensScalarFieldEnum]


  export const TbProdcomposicaoScalarFieldEnum: {
    idcomp: 'idcomp',
    idproduto: 'idproduto',
    idprodutocomp: 'idprodutocomp',
    quantidade: 'quantidade'
  };

  export type TbProdcomposicaoScalarFieldEnum = (typeof TbProdcomposicaoScalarFieldEnum)[keyof typeof TbProdcomposicaoScalarFieldEnum]


  export const TbProdutosScalarFieldEnum: {
    idproduto: 'idproduto',
    nomeprod: 'nomeprod',
    idtipprod: 'idtipprod',
    idunidade: 'idunidade',
    quantminima: 'quantminima'
  };

  export type TbProdutosScalarFieldEnum = (typeof TbProdutosScalarFieldEnum)[keyof typeof TbProdutosScalarFieldEnum]


  export const TbTiposprodutosScalarFieldEnum: {
    idtipprod: 'idtipprod',
    nometipprod: 'nometipprod'
  };

  export type TbTiposprodutosScalarFieldEnum = (typeof TbTiposprodutosScalarFieldEnum)[keyof typeof TbTiposprodutosScalarFieldEnum]


  export const TbUnidademedidaScalarFieldEnum: {
    idunidade: 'idunidade',
    siglaun: 'siglaun',
    nomeunidade: 'nomeunidade'
  };

  export type TbUnidademedidaScalarFieldEnum = (typeof TbUnidademedidaScalarFieldEnum)[keyof typeof TbUnidademedidaScalarFieldEnum]


  export const TbUsuariosScalarFieldEnum: {
    idusuario: 'idusuario',
    usu_login: 'usu_login',
    nome: 'nome',
    senha: 'senha',
    dtcriacao: 'dtcriacao',
    usu_admin: 'usu_admin'
  };

  export type TbUsuariosScalarFieldEnum = (typeof TbUsuariosScalarFieldEnum)[keyof typeof TbUsuariosScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type tbEstoqueWhereInput = {
    AND?: Enumerable<tbEstoqueWhereInput>
    OR?: Enumerable<tbEstoqueWhereInput>
    NOT?: Enumerable<tbEstoqueWhereInput>
    idestoque?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    tblocais?: XOR<TbLocaisRelationFilter, tbLocaisWhereInput> | null
    tbprodutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
  }

  export type tbEstoqueOrderByWithRelationInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
    tblocais?: tbLocaisOrderByWithRelationInput
    tbprodutos?: tbProdutosOrderByWithRelationInput
  }

  export type tbEstoqueWhereUniqueInput = {
    idestoque_idproduto?: tbEstoqueIdestoqueIdprodutoCompoundUniqueInput
  }

  export type tbEstoqueOrderByWithAggregationInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
    _count?: tbEstoqueCountOrderByAggregateInput
    _avg?: tbEstoqueAvgOrderByAggregateInput
    _max?: tbEstoqueMaxOrderByAggregateInput
    _min?: tbEstoqueMinOrderByAggregateInput
    _sum?: tbEstoqueSumOrderByAggregateInput
  }

  export type tbEstoqueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    idestoque?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    idlocal?: IntNullableWithAggregatesFilter | number | null
    quantidade?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type tbFornecedoresWhereInput = {
    AND?: Enumerable<tbFornecedoresWhereInput>
    OR?: Enumerable<tbFornecedoresWhereInput>
    NOT?: Enumerable<tbFornecedoresWhereInput>
    idfor?: IntFilter | number
    nomefor?: StringNullableFilter | string | null
    fisjur?: StringNullableFilter | string | null
    cnpjcpf?: StringNullableFilter | string | null
    telefone?: StringNullableFilter | string | null
    cep?: StringNullableFilter | string | null
    cidade?: StringNullableFilter | string | null
    rua?: StringNullableFilter | string | null
    bairro?: StringNullableFilter | string | null
    numero?: IntNullableFilter | number | null
    complemento?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    tbmovimentos?: TbMovimentosListRelationFilter
    tbnf?: TbNfListRelationFilter
  }

  export type tbFornecedoresOrderByWithRelationInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    tbmovimentos?: tbMovimentosOrderByRelationAggregateInput
    tbnf?: tbNfOrderByRelationAggregateInput
  }

  export type tbFornecedoresWhereUniqueInput = {
    idfor?: number
    cnpjcpf?: string
    email?: string
  }

  export type tbFornecedoresOrderByWithAggregationInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    _count?: tbFornecedoresCountOrderByAggregateInput
    _avg?: tbFornecedoresAvgOrderByAggregateInput
    _max?: tbFornecedoresMaxOrderByAggregateInput
    _min?: tbFornecedoresMinOrderByAggregateInput
    _sum?: tbFornecedoresSumOrderByAggregateInput
  }

  export type tbFornecedoresScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    idfor?: IntWithAggregatesFilter | number
    nomefor?: StringNullableWithAggregatesFilter | string | null
    fisjur?: StringNullableWithAggregatesFilter | string | null
    cnpjcpf?: StringNullableWithAggregatesFilter | string | null
    telefone?: StringNullableWithAggregatesFilter | string | null
    cep?: StringNullableWithAggregatesFilter | string | null
    cidade?: StringNullableWithAggregatesFilter | string | null
    rua?: StringNullableWithAggregatesFilter | string | null
    bairro?: StringNullableWithAggregatesFilter | string | null
    numero?: IntNullableWithAggregatesFilter | number | null
    complemento?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbLocaisWhereInput = {
    AND?: Enumerable<tbLocaisWhereInput>
    OR?: Enumerable<tbLocaisWhereInput>
    NOT?: Enumerable<tbLocaisWhereInput>
    idlocal?: IntFilter | number
    nomelocal?: StringNullableFilter | string | null
    tbestoque?: TbEstoqueListRelationFilter
    tbmovitens?: TbMovitensListRelationFilter
  }

  export type tbLocaisOrderByWithRelationInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
    tbestoque?: tbEstoqueOrderByRelationAggregateInput
    tbmovitens?: tbMovitensOrderByRelationAggregateInput
  }

  export type tbLocaisWhereUniqueInput = {
    idlocal?: number
  }

  export type tbLocaisOrderByWithAggregationInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
    _count?: tbLocaisCountOrderByAggregateInput
    _avg?: tbLocaisAvgOrderByAggregateInput
    _max?: tbLocaisMaxOrderByAggregateInput
    _min?: tbLocaisMinOrderByAggregateInput
    _sum?: tbLocaisSumOrderByAggregateInput
  }

  export type tbLocaisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    idlocal?: IntWithAggregatesFilter | number
    nomelocal?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbMovimentosWhereInput = {
    AND?: Enumerable<tbMovimentosWhereInput>
    OR?: Enumerable<tbMovimentosWhereInput>
    NOT?: Enumerable<tbMovimentosWhereInput>
    idmovimento?: IntFilter | number
    tipmov?: StringNullableFilter | string | null
    idfor?: IntNullableFilter | number | null
    idusuario_alteracao?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    tbfornecedores?: XOR<TbFornecedoresRelationFilter, tbFornecedoresWhereInput> | null
    tbusuarios?: XOR<TbUsuariosRelationFilter, tbUsuariosWhereInput> | null
    tbmovitens?: TbMovitensListRelationFilter
    tbnf?: XOR<TbNfRelationFilter, tbNfWhereInput> | null
  }

  export type tbMovimentosOrderByWithRelationInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
    tbfornecedores?: tbFornecedoresOrderByWithRelationInput
    tbusuarios?: tbUsuariosOrderByWithRelationInput
    tbmovitens?: tbMovitensOrderByRelationAggregateInput
    tbnf?: tbNfOrderByWithRelationInput
  }

  export type tbMovimentosWhereUniqueInput = {
    idmovimento?: number
  }

  export type tbMovimentosOrderByWithAggregationInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
    _count?: tbMovimentosCountOrderByAggregateInput
    _avg?: tbMovimentosAvgOrderByAggregateInput
    _max?: tbMovimentosMaxOrderByAggregateInput
    _min?: tbMovimentosMinOrderByAggregateInput
    _sum?: tbMovimentosSumOrderByAggregateInput
  }

  export type tbMovimentosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    idmovimento?: IntWithAggregatesFilter | number
    tipmov?: StringNullableWithAggregatesFilter | string | null
    idfor?: IntNullableWithAggregatesFilter | number | null
    idusuario_alteracao?: IntNullableWithAggregatesFilter | number | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type tbMovitensWhereInput = {
    AND?: Enumerable<tbMovitensWhereInput>
    OR?: Enumerable<tbMovitensWhereInput>
    NOT?: Enumerable<tbMovitensWhereInput>
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    tblocais?: XOR<TbLocaisRelationFilter, tbLocaisWhereInput> | null
    tbmovimentos?: XOR<TbMovimentosRelationFilter, tbMovimentosWhereInput>
    tbprodutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
    tbnfitens?: TbNfitensListRelationFilter
  }

  export type tbMovitensOrderByWithRelationInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
    tblocais?: tbLocaisOrderByWithRelationInput
    tbmovimentos?: tbMovimentosOrderByWithRelationInput
    tbprodutos?: tbProdutosOrderByWithRelationInput
    tbnfitens?: tbNfitensOrderByRelationAggregateInput
  }

  export type tbMovitensWhereUniqueInput = {
    idmovimento_seqitem_idproduto?: tbMovitensIdmovimentoSeqitemIdprodutoCompoundUniqueInput
  }

  export type tbMovitensOrderByWithAggregationInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
    _count?: tbMovitensCountOrderByAggregateInput
    _avg?: tbMovitensAvgOrderByAggregateInput
    _max?: tbMovitensMaxOrderByAggregateInput
    _min?: tbMovitensMinOrderByAggregateInput
    _sum?: tbMovitensSumOrderByAggregateInput
  }

  export type tbMovitensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbMovitensScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbMovitensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbMovitensScalarWhereWithAggregatesInput>
    idmovimento?: IntWithAggregatesFilter | number
    seqitem?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    idlocal?: IntNullableWithAggregatesFilter | number | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
    quantidade?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfWhereInput = {
    AND?: Enumerable<tbNfWhereInput>
    OR?: Enumerable<tbNfWhereInput>
    NOT?: Enumerable<tbNfWhereInput>
    idnf?: IntFilter | number
    numnf?: IntNullableFilter | number | null
    idmovimento?: IntNullableFilter | number | null
    serienf?: IntNullableFilter | number | null
    idfor?: IntNullableFilter | number | null
    idusuario_inclusao?: IntNullableFilter | number | null
    dtemissao?: DateTimeNullableFilter | Date | string | null
    vlrtotal?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: XOR<TbMovimentosRelationFilter, tbMovimentosWhereInput> | null
    tbfornecedores?: XOR<TbFornecedoresRelationFilter, tbFornecedoresWhereInput> | null
    tbusuarios?: XOR<TbUsuariosRelationFilter, tbUsuariosWhereInput> | null
    tbnfitens?: TbNfitensListRelationFilter
  }

  export type tbNfOrderByWithRelationInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
    tbmovimentos?: tbMovimentosOrderByWithRelationInput
    tbfornecedores?: tbFornecedoresOrderByWithRelationInput
    tbusuarios?: tbUsuariosOrderByWithRelationInput
    tbnfitens?: tbNfitensOrderByRelationAggregateInput
  }

  export type tbNfWhereUniqueInput = {
    idnf?: number
    numnf?: number
    idmovimento?: number
  }

  export type tbNfOrderByWithAggregationInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
    _count?: tbNfCountOrderByAggregateInput
    _avg?: tbNfAvgOrderByAggregateInput
    _max?: tbNfMaxOrderByAggregateInput
    _min?: tbNfMinOrderByAggregateInput
    _sum?: tbNfSumOrderByAggregateInput
  }

  export type tbNfScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbNfScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbNfScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbNfScalarWhereWithAggregatesInput>
    idnf?: IntWithAggregatesFilter | number
    numnf?: IntNullableWithAggregatesFilter | number | null
    idmovimento?: IntNullableWithAggregatesFilter | number | null
    serienf?: IntNullableWithAggregatesFilter | number | null
    idfor?: IntNullableWithAggregatesFilter | number | null
    idusuario_inclusao?: IntNullableWithAggregatesFilter | number | null
    dtemissao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    vlrtotal?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensWhereInput = {
    AND?: Enumerable<tbNfitensWhereInput>
    OR?: Enumerable<tbNfitensWhereInput>
    NOT?: Enumerable<tbNfitensWhereInput>
    idnf?: IntFilter | number
    idmovimento?: IntNullableFilter | number | null
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    vlrunitario?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    tbmovitens?: XOR<TbMovitensRelationFilter, tbMovitensWhereInput> | null
    tbnf?: XOR<TbNfRelationFilter, tbNfWhereInput>
  }

  export type tbNfitensOrderByWithRelationInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
    tbmovitens?: tbMovitensOrderByWithRelationInput
    tbnf?: tbNfOrderByWithRelationInput
  }

  export type tbNfitensWhereUniqueInput = {
    idnf_seqitem_idproduto?: tbNfitensIdnfSeqitemIdprodutoCompoundUniqueInput
  }

  export type tbNfitensOrderByWithAggregationInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
    _count?: tbNfitensCountOrderByAggregateInput
    _avg?: tbNfitensAvgOrderByAggregateInput
    _max?: tbNfitensMaxOrderByAggregateInput
    _min?: tbNfitensMinOrderByAggregateInput
    _sum?: tbNfitensSumOrderByAggregateInput
  }

  export type tbNfitensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbNfitensScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbNfitensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbNfitensScalarWhereWithAggregatesInput>
    idnf?: IntWithAggregatesFilter | number
    idmovimento?: IntNullableWithAggregatesFilter | number | null
    seqitem?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    vlrunitario?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    quantidade?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoWhereInput = {
    AND?: Enumerable<tbProdcomposicaoWhereInput>
    OR?: Enumerable<tbProdcomposicaoWhereInput>
    NOT?: Enumerable<tbProdcomposicaoWhereInput>
    idcomp?: IntFilter | number
    idproduto?: IntFilter | number
    idprodutocomp?: IntFilter | number
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
  }

  export type tbProdcomposicaoOrderByWithRelationInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: tbProdutosOrderByWithRelationInput
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdutosOrderByWithRelationInput
  }

  export type tbProdcomposicaoWhereUniqueInput = {
    idcomp_idproduto_idprodutocomp?: tbProdcomposicaoIdcompIdprodutoIdprodutocompCompoundUniqueInput
  }

  export type tbProdcomposicaoOrderByWithAggregationInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
    _count?: tbProdcomposicaoCountOrderByAggregateInput
    _avg?: tbProdcomposicaoAvgOrderByAggregateInput
    _max?: tbProdcomposicaoMaxOrderByAggregateInput
    _min?: tbProdcomposicaoMinOrderByAggregateInput
    _sum?: tbProdcomposicaoSumOrderByAggregateInput
  }

  export type tbProdcomposicaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbProdcomposicaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbProdcomposicaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbProdcomposicaoScalarWhereWithAggregatesInput>
    idcomp?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    idprodutocomp?: IntWithAggregatesFilter | number
    quantidade?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdutosWhereInput = {
    AND?: Enumerable<tbProdutosWhereInput>
    OR?: Enumerable<tbProdutosWhereInput>
    NOT?: Enumerable<tbProdutosWhereInput>
    idproduto?: IntFilter | number
    nomeprod?: StringNullableFilter | string | null
    idtipprod?: IntNullableFilter | number | null
    idunidade?: IntNullableFilter | number | null
    quantminima?: IntNullableFilter | number | null
    tbestoque?: TbEstoqueListRelationFilter
    tbmovitens?: TbMovitensListRelationFilter
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: TbProdcomposicaoListRelationFilter
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: TbProdcomposicaoListRelationFilter
    tbtiposprodutos?: XOR<TbTiposprodutosRelationFilter, tbTiposprodutosWhereInput> | null
    tbunidademedida?: XOR<TbUnidademedidaRelationFilter, tbUnidademedidaWhereInput> | null
  }

  export type tbProdutosOrderByWithRelationInput = {
    idproduto?: SortOrder
    nomeprod?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
    tbestoque?: tbEstoqueOrderByRelationAggregateInput
    tbmovitens?: tbMovitensOrderByRelationAggregateInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoOrderByRelationAggregateInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoOrderByRelationAggregateInput
    tbtiposprodutos?: tbTiposprodutosOrderByWithRelationInput
    tbunidademedida?: tbUnidademedidaOrderByWithRelationInput
  }

  export type tbProdutosWhereUniqueInput = {
    idproduto?: number
  }

  export type tbProdutosOrderByWithAggregationInput = {
    idproduto?: SortOrder
    nomeprod?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
    _count?: tbProdutosCountOrderByAggregateInput
    _avg?: tbProdutosAvgOrderByAggregateInput
    _max?: tbProdutosMaxOrderByAggregateInput
    _min?: tbProdutosMinOrderByAggregateInput
    _sum?: tbProdutosSumOrderByAggregateInput
  }

  export type tbProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    idproduto?: IntWithAggregatesFilter | number
    nomeprod?: StringNullableWithAggregatesFilter | string | null
    idtipprod?: IntNullableWithAggregatesFilter | number | null
    idunidade?: IntNullableWithAggregatesFilter | number | null
    quantminima?: IntNullableWithAggregatesFilter | number | null
  }

  export type tbTiposprodutosWhereInput = {
    AND?: Enumerable<tbTiposprodutosWhereInput>
    OR?: Enumerable<tbTiposprodutosWhereInput>
    NOT?: Enumerable<tbTiposprodutosWhereInput>
    idtipprod?: IntFilter | number
    nometipprod?: StringNullableFilter | string | null
    tbprodutos?: TbProdutosListRelationFilter
  }

  export type tbTiposprodutosOrderByWithRelationInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
    tbprodutos?: tbProdutosOrderByRelationAggregateInput
  }

  export type tbTiposprodutosWhereUniqueInput = {
    idtipprod?: number
  }

  export type tbTiposprodutosOrderByWithAggregationInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
    _count?: tbTiposprodutosCountOrderByAggregateInput
    _avg?: tbTiposprodutosAvgOrderByAggregateInput
    _max?: tbTiposprodutosMaxOrderByAggregateInput
    _min?: tbTiposprodutosMinOrderByAggregateInput
    _sum?: tbTiposprodutosSumOrderByAggregateInput
  }

  export type tbTiposprodutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbTiposprodutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbTiposprodutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbTiposprodutosScalarWhereWithAggregatesInput>
    idtipprod?: IntWithAggregatesFilter | number
    nometipprod?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbUnidademedidaWhereInput = {
    AND?: Enumerable<tbUnidademedidaWhereInput>
    OR?: Enumerable<tbUnidademedidaWhereInput>
    NOT?: Enumerable<tbUnidademedidaWhereInput>
    idunidade?: IntFilter | number
    siglaun?: StringNullableFilter | string | null
    nomeunidade?: StringNullableFilter | string | null
    tbprodutos?: TbProdutosListRelationFilter
  }

  export type tbUnidademedidaOrderByWithRelationInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
    tbprodutos?: tbProdutosOrderByRelationAggregateInput
  }

  export type tbUnidademedidaWhereUniqueInput = {
    idunidade?: number
    siglaun?: string
  }

  export type tbUnidademedidaOrderByWithAggregationInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
    _count?: tbUnidademedidaCountOrderByAggregateInput
    _avg?: tbUnidademedidaAvgOrderByAggregateInput
    _max?: tbUnidademedidaMaxOrderByAggregateInput
    _min?: tbUnidademedidaMinOrderByAggregateInput
    _sum?: tbUnidademedidaSumOrderByAggregateInput
  }

  export type tbUnidademedidaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbUnidademedidaScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbUnidademedidaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbUnidademedidaScalarWhereWithAggregatesInput>
    idunidade?: IntWithAggregatesFilter | number
    siglaun?: StringNullableWithAggregatesFilter | string | null
    nomeunidade?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbUsuariosWhereInput = {
    AND?: Enumerable<tbUsuariosWhereInput>
    OR?: Enumerable<tbUsuariosWhereInput>
    NOT?: Enumerable<tbUsuariosWhereInput>
    idusuario?: IntFilter | number
    usu_login?: StringNullableFilter | string | null
    nome?: StringNullableFilter | string | null
    senha?: StringNullableFilter | string | null
    dtcriacao?: DateTimeNullableFilter | Date | string | null
    usu_admin?: BoolNullableFilter | boolean | null
    tbmovimentos?: TbMovimentosListRelationFilter
    tbnf?: TbNfListRelationFilter
  }

  export type tbUsuariosOrderByWithRelationInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
    tbmovimentos?: tbMovimentosOrderByRelationAggregateInput
    tbnf?: tbNfOrderByRelationAggregateInput
  }

  export type tbUsuariosWhereUniqueInput = {
    idusuario?: number
    usu_login?: string
  }

  export type tbUsuariosOrderByWithAggregationInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
    _count?: tbUsuariosCountOrderByAggregateInput
    _avg?: tbUsuariosAvgOrderByAggregateInput
    _max?: tbUsuariosMaxOrderByAggregateInput
    _min?: tbUsuariosMinOrderByAggregateInput
    _sum?: tbUsuariosSumOrderByAggregateInput
  }

  export type tbUsuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    idusuario?: IntWithAggregatesFilter | number
    usu_login?: StringNullableWithAggregatesFilter | string | null
    nome?: StringNullableWithAggregatesFilter | string | null
    senha?: StringNullableWithAggregatesFilter | string | null
    dtcriacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    usu_admin?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type tbEstoqueCreateInput = {
    idestoque?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbestoqueInput
    tbprodutos: tbProdutosCreateNestedOneWithoutTbestoqueInput
  }

  export type tbEstoqueUncheckedCreateInput = {
    idestoque?: number
    idproduto: number
    idlocal?: number | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueUpdateInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbestoqueNestedInput
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbestoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueCreateManyInput = {
    idestoque?: number
    idproduto: number
    idlocal?: number | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueUpdateManyMutationInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueUncheckedUpdateManyInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbFornecedoresCreateInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbmovimentos?: tbMovimentosCreateNestedManyWithoutTbfornecedoresInput
    tbnf?: tbNfCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbmovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbfornecedoresInput
    tbnf?: tbNfUncheckedCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresUpdateInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovimentos?: tbMovimentosUpdateManyWithoutTbfornecedoresNestedInput
    tbnf?: tbNfUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbfornecedoresNestedInput
    tbnf?: tbNfUncheckedUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbFornecedoresCreateManyInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
  }

  export type tbFornecedoresUpdateManyMutationInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbFornecedoresUncheckedUpdateManyInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbLocaisCreateInput = {
    nomelocal?: string | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTblocaisInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisUncheckedCreateInput = {
    idlocal?: number
    nomelocal?: string | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTblocaisInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisUpdateInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbestoque?: tbEstoqueUpdateManyWithoutTblocaisNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTblocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTblocaisNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTblocaisNestedInput
  }

  export type tbLocaisCreateManyInput = {
    idlocal?: number
    nomelocal?: string | null
  }

  export type tbLocaisUpdateManyMutationInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbLocaisUncheckedUpdateManyInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbMovimentosCreateInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbmovimentosInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbmovimentosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosUncheckedCreateInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfUncheckedCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosUpdateInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbmovimentosNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbmovimentosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUncheckedUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosCreateManyInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
  }

  export type tbMovimentosUpdateManyMutationInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovimentosUncheckedUpdateManyInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovitensCreateInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbmovitensInput
    tbmovimentos: tbMovimentosCreateNestedOneWithoutTbmovitensInput
    tbprodutos: tbProdutosCreateNestedOneWithoutTbmovitensInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensUncheckedCreateInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensUpdateInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbmovitensNestedInput
    tbmovimentos?: tbMovimentosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensCreateManyInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovitensUpdateManyMutationInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovitensUncheckedUpdateManyInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfCreateInput = {
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosCreateNestedOneWithoutTbnfInput
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbnfInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbnfInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbnfInput
  }

  export type tbNfUncheckedCreateInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbnfInput
  }

  export type tbNfUpdateInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosUpdateOneWithoutTbnfNestedInput
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbnfNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbnfNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfCreateManyInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfUpdateManyMutationInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfUncheckedUpdateManyInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensCreateInput = {
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
    tbmovitens?: tbMovitensCreateNestedOneWithoutTbnfitensInput
    tbnf: tbNfCreateNestedOneWithoutTbnfitensInput
  }

  export type tbNfitensUncheckedCreateInput = {
    idnf: number
    idmovimento?: number | null
    seqitem: number
    idproduto: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUpdateInput = {
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovitens?: tbMovitensUpdateOneWithoutTbnfitensNestedInput
    tbnf?: tbNfUpdateOneRequiredWithoutTbnfitensNestedInput
  }

  export type tbNfitensUncheckedUpdateInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensCreateManyInput = {
    idnf: number
    idmovimento?: number | null
    seqitem: number
    idproduto: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUpdateManyMutationInput = {
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUncheckedUpdateManyInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateInput = {
    idcomp?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos: tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos: tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdcomposicaoUncheckedCreateInput = {
    idcomp?: number
    idproduto: number
    idprodutocomp: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUpdateInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbProdcomposicaoUncheckedUpdateInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateManyInput = {
    idcomp?: number
    idproduto: number
    idprodutocomp: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUpdateManyMutationInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUncheckedUpdateManyInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdutosCreateInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosUpdateInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbProdutosCreateManyInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateManyMutationInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosUncheckedUpdateManyInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbTiposprodutosCreateInput = {
    nometipprod?: string | null
    tbprodutos?: tbProdutosCreateNestedManyWithoutTbtiposprodutosInput
  }

  export type tbTiposprodutosUncheckedCreateInput = {
    idtipprod?: number
    nometipprod?: string | null
    tbprodutos?: tbProdutosUncheckedCreateNestedManyWithoutTbtiposprodutosInput
  }

  export type tbTiposprodutosUpdateInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
    tbprodutos?: tbProdutosUpdateManyWithoutTbtiposprodutosNestedInput
  }

  export type tbTiposprodutosUncheckedUpdateInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
    tbprodutos?: tbProdutosUncheckedUpdateManyWithoutTbtiposprodutosNestedInput
  }

  export type tbTiposprodutosCreateManyInput = {
    idtipprod?: number
    nometipprod?: string | null
  }

  export type tbTiposprodutosUpdateManyMutationInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbTiposprodutosUncheckedUpdateManyInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidademedidaCreateInput = {
    siglaun?: string | null
    nomeunidade?: string | null
    tbprodutos?: tbProdutosCreateNestedManyWithoutTbunidademedidaInput
  }

  export type tbUnidademedidaUncheckedCreateInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
    tbprodutos?: tbProdutosUncheckedCreateNestedManyWithoutTbunidademedidaInput
  }

  export type tbUnidademedidaUpdateInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
    tbprodutos?: tbProdutosUpdateManyWithoutTbunidademedidaNestedInput
  }

  export type tbUnidademedidaUncheckedUpdateInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
    tbprodutos?: tbProdutosUncheckedUpdateManyWithoutTbunidademedidaNestedInput
  }

  export type tbUnidademedidaCreateManyInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidademedidaUpdateManyMutationInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidademedidaUncheckedUpdateManyInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUsuariosCreateInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbmovimentos?: tbMovimentosCreateNestedManyWithoutTbusuariosInput
    tbnf?: tbNfCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosUncheckedCreateInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbmovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbusuariosInput
    tbnf?: tbNfUncheckedCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosUpdateInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbmovimentos?: tbMovimentosUpdateManyWithoutTbusuariosNestedInput
    tbnf?: tbNfUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbmovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbusuariosNestedInput
    tbnf?: tbNfUncheckedUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbUsuariosCreateManyInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
  }

  export type tbUsuariosUpdateManyMutationInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type tbUsuariosUncheckedUpdateManyInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type TbLocaisRelationFilter = {
    is?: tbLocaisWhereInput | null
    isNot?: tbLocaisWhereInput | null
  }

  export type TbProdutosRelationFilter = {
    is?: tbProdutosWhereInput
    isNot?: tbProdutosWhereInput
  }

  export type tbEstoqueIdestoqueIdprodutoCompoundUniqueInput = {
    idestoque: number
    idproduto: number
  }

  export type tbEstoqueCountOrderByAggregateInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueAvgOrderByAggregateInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type tbEstoqueMaxOrderByAggregateInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueMinOrderByAggregateInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueSumOrderByAggregateInput = {
    idestoque?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type TbMovimentosListRelationFilter = {
    every?: tbMovimentosWhereInput
    some?: tbMovimentosWhereInput
    none?: tbMovimentosWhereInput
  }

  export type TbNfListRelationFilter = {
    every?: tbNfWhereInput
    some?: tbNfWhereInput
    none?: tbNfWhereInput
  }

  export type tbMovimentosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbNfOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbFornecedoresCountOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresAvgOrderByAggregateInput = {
    idfor?: SortOrder
    numero?: SortOrder
  }

  export type tbFornecedoresMaxOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresMinOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresSumOrderByAggregateInput = {
    idfor?: SortOrder
    numero?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type TbEstoqueListRelationFilter = {
    every?: tbEstoqueWhereInput
    some?: tbEstoqueWhereInput
    none?: tbEstoqueWhereInput
  }

  export type TbMovitensListRelationFilter = {
    every?: tbMovitensWhereInput
    some?: tbMovitensWhereInput
    none?: tbMovitensWhereInput
  }

  export type tbEstoqueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbMovitensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbLocaisCountOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisAvgOrderByAggregateInput = {
    idlocal?: SortOrder
  }

  export type tbLocaisMaxOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisMinOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisSumOrderByAggregateInput = {
    idlocal?: SortOrder
  }

  export type TbFornecedoresRelationFilter = {
    is?: tbFornecedoresWhereInput | null
    isNot?: tbFornecedoresWhereInput | null
  }

  export type TbUsuariosRelationFilter = {
    is?: tbUsuariosWhereInput | null
    isNot?: tbUsuariosWhereInput | null
  }

  export type TbNfRelationFilter = {
    is?: tbNfWhereInput
    isNot?: tbNfWhereInput
  }

  export type tbMovimentosCountOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosAvgOrderByAggregateInput = {
    idmovimento?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
  }

  export type tbMovimentosMaxOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosMinOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosSumOrderByAggregateInput = {
    idmovimento?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
  }

  export type TbMovimentosRelationFilter = {
    is?: tbMovimentosWhereInput | null
    isNot?: tbMovimentosWhereInput | null
  }

  export type TbNfitensListRelationFilter = {
    every?: tbNfitensWhereInput
    some?: tbNfitensWhereInput
    none?: tbNfitensWhereInput
  }

  export type tbNfitensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbMovitensIdmovimentoSeqitemIdprodutoCompoundUniqueInput = {
    idmovimento: number
    seqitem: number
    idproduto: number
  }

  export type tbMovitensCountOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovitensAvgOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovitensMaxOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovitensMinOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovitensSumOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type tbNfCountOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNfAvgOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNfMaxOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNfMinOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNfSumOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type TbMovitensRelationFilter = {
    is?: tbMovitensWhereInput | null
    isNot?: tbMovitensWhereInput | null
  }

  export type tbNfitensIdnfSeqitemIdprodutoCompoundUniqueInput = {
    idnf: number
    seqitem: number
    idproduto: number
  }

  export type tbNfitensCountOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNfitensAvgOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNfitensMaxOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNfitensMinOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNfitensSumOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbProdcomposicaoIdcompIdprodutoIdprodutocompCompoundUniqueInput = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
  }

  export type tbProdcomposicaoCountOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdcomposicaoAvgOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdcomposicaoMaxOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdcomposicaoMinOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdcomposicaoSumOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type TbProdcomposicaoListRelationFilter = {
    every?: tbProdcomposicaoWhereInput
    some?: tbProdcomposicaoWhereInput
    none?: tbProdcomposicaoWhereInput
  }

  export type TbTiposprodutosRelationFilter = {
    is?: tbTiposprodutosWhereInput | null
    isNot?: tbTiposprodutosWhereInput | null
  }

  export type TbUnidademedidaRelationFilter = {
    is?: tbUnidademedidaWhereInput | null
    isNot?: tbUnidademedidaWhereInput | null
  }

  export type tbProdcomposicaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbProdutosCountOrderByAggregateInput = {
    idproduto?: SortOrder
    nomeprod?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosAvgOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosMaxOrderByAggregateInput = {
    idproduto?: SortOrder
    nomeprod?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosMinOrderByAggregateInput = {
    idproduto?: SortOrder
    nomeprod?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosSumOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type TbProdutosListRelationFilter = {
    every?: tbProdutosWhereInput
    some?: tbProdutosWhereInput
    none?: tbProdutosWhereInput
  }

  export type tbProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbTiposprodutosCountOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposprodutosAvgOrderByAggregateInput = {
    idtipprod?: SortOrder
  }

  export type tbTiposprodutosMaxOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposprodutosMinOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposprodutosSumOrderByAggregateInput = {
    idtipprod?: SortOrder
  }

  export type tbUnidademedidaCountOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidademedidaAvgOrderByAggregateInput = {
    idunidade?: SortOrder
  }

  export type tbUnidademedidaMaxOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidademedidaMinOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidademedidaSumOrderByAggregateInput = {
    idunidade?: SortOrder
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type tbUsuariosCountOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosAvgOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type tbUsuariosMaxOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosMinOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosSumOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type tbLocaisCreateNestedOneWithoutTbestoqueInput = {
    create?: XOR<tbLocaisCreateWithoutTbestoqueInput, tbLocaisUncheckedCreateWithoutTbestoqueInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbestoqueInput
    connect?: tbLocaisWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbestoqueInput = {
    create?: XOR<tbProdutosCreateWithoutTbestoqueInput, tbProdutosUncheckedCreateWithoutTbestoqueInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbestoqueInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type tbLocaisUpdateOneWithoutTbestoqueNestedInput = {
    create?: XOR<tbLocaisCreateWithoutTbestoqueInput, tbLocaisUncheckedCreateWithoutTbestoqueInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbestoqueInput
    upsert?: tbLocaisUpsertWithoutTbestoqueInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbLocaisWhereUniqueInput
    update?: XOR<tbLocaisUpdateWithoutTbestoqueInput, tbLocaisUncheckedUpdateWithoutTbestoqueInput>
  }

  export type tbProdutosUpdateOneRequiredWithoutTbestoqueNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbestoqueInput, tbProdutosUncheckedCreateWithoutTbestoqueInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbestoqueInput
    upsert?: tbProdutosUpsertWithoutTbestoqueInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbestoqueInput, tbProdutosUncheckedUpdateWithoutTbestoqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tbMovimentosCreateNestedManyWithoutTbfornecedoresInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbfornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbfornecedoresInput>
    createMany?: tbMovimentosCreateManyTbfornecedoresInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNfCreateNestedManyWithoutTbfornecedoresInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbfornecedoresInput>, Enumerable<tbNfUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbfornecedoresInput>
    createMany?: tbNfCreateManyTbfornecedoresInputEnvelope
    connect?: Enumerable<tbNfWhereUniqueInput>
  }

  export type tbMovimentosUncheckedCreateNestedManyWithoutTbfornecedoresInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbfornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbfornecedoresInput>
    createMany?: tbMovimentosCreateManyTbfornecedoresInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNfUncheckedCreateNestedManyWithoutTbfornecedoresInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbfornecedoresInput>, Enumerable<tbNfUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbfornecedoresInput>
    createMany?: tbNfCreateManyTbfornecedoresInputEnvelope
    connect?: Enumerable<tbNfWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type tbMovimentosUpdateManyWithoutTbfornecedoresNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbfornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbfornecedoresInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbfornecedoresInput>
    createMany?: tbMovimentosCreateManyTbfornecedoresInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbfornecedoresInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbfornecedoresInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNfUpdateManyWithoutTbfornecedoresNestedInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbfornecedoresInput>, Enumerable<tbNfUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbfornecedoresInput>
    upsert?: Enumerable<tbNfUpsertWithWhereUniqueWithoutTbfornecedoresInput>
    createMany?: tbNfCreateManyTbfornecedoresInputEnvelope
    set?: Enumerable<tbNfWhereUniqueInput>
    disconnect?: Enumerable<tbNfWhereUniqueInput>
    delete?: Enumerable<tbNfWhereUniqueInput>
    connect?: Enumerable<tbNfWhereUniqueInput>
    update?: Enumerable<tbNfUpdateWithWhereUniqueWithoutTbfornecedoresInput>
    updateMany?: Enumerable<tbNfUpdateManyWithWhereWithoutTbfornecedoresInput>
    deleteMany?: Enumerable<tbNfScalarWhereInput>
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbfornecedoresNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbfornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbfornecedoresInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbfornecedoresInput>
    createMany?: tbMovimentosCreateManyTbfornecedoresInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbfornecedoresInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbfornecedoresInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNfUncheckedUpdateManyWithoutTbfornecedoresNestedInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbfornecedoresInput>, Enumerable<tbNfUncheckedCreateWithoutTbfornecedoresInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbfornecedoresInput>
    upsert?: Enumerable<tbNfUpsertWithWhereUniqueWithoutTbfornecedoresInput>
    createMany?: tbNfCreateManyTbfornecedoresInputEnvelope
    set?: Enumerable<tbNfWhereUniqueInput>
    disconnect?: Enumerable<tbNfWhereUniqueInput>
    delete?: Enumerable<tbNfWhereUniqueInput>
    connect?: Enumerable<tbNfWhereUniqueInput>
    update?: Enumerable<tbNfUpdateWithWhereUniqueWithoutTbfornecedoresInput>
    updateMany?: Enumerable<tbNfUpdateManyWithWhereWithoutTbfornecedoresInput>
    deleteMany?: Enumerable<tbNfScalarWhereInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTblocaisInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTblocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTblocaisInput>
    createMany?: tbEstoqueCreateManyTblocaisInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovitensCreateNestedManyWithoutTblocaisInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTblocaisInput>, Enumerable<tbMovitensUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTblocaisInput>
    createMany?: tbMovitensCreateManyTblocaisInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTblocaisInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTblocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTblocaisInput>
    createMany?: tbEstoqueCreateManyTblocaisInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovitensUncheckedCreateNestedManyWithoutTblocaisInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTblocaisInput>, Enumerable<tbMovitensUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTblocaisInput>
    createMany?: tbMovitensCreateManyTblocaisInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTblocaisNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTblocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTblocaisInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTblocaisInput>
    createMany?: tbEstoqueCreateManyTblocaisInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTblocaisInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTblocaisInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovitensUpdateManyWithoutTblocaisNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTblocaisInput>, Enumerable<tbMovitensUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTblocaisInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTblocaisInput>
    createMany?: tbMovitensCreateManyTblocaisInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTblocaisInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTblocaisInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTblocaisNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTblocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTblocaisInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTblocaisInput>
    createMany?: tbEstoqueCreateManyTblocaisInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTblocaisInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTblocaisInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovitensUncheckedUpdateManyWithoutTblocaisNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTblocaisInput>, Enumerable<tbMovitensUncheckedCreateWithoutTblocaisInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTblocaisInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTblocaisInput>
    createMany?: tbMovitensCreateManyTblocaisInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTblocaisInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTblocaisInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbFornecedoresCreateNestedOneWithoutTbmovimentosInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbmovimentosInput, tbFornecedoresUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbmovimentosInput
    connect?: tbFornecedoresWhereUniqueInput
  }

  export type tbUsuariosCreateNestedOneWithoutTbmovimentosInput = {
    create?: XOR<tbUsuariosCreateWithoutTbmovimentosInput, tbUsuariosUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbmovimentosInput
    connect?: tbUsuariosWhereUniqueInput
  }

  export type tbMovitensCreateNestedManyWithoutTbmovimentosInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbmovimentosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbmovimentosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbmovimentosInput>
    createMany?: tbMovitensCreateManyTbmovimentosInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbNfCreateNestedOneWithoutTbmovimentosInput = {
    create?: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbmovimentosInput
    connect?: tbNfWhereUniqueInput
  }

  export type tbMovitensUncheckedCreateNestedManyWithoutTbmovimentosInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbmovimentosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbmovimentosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbmovimentosInput>
    createMany?: tbMovitensCreateManyTbmovimentosInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbNfUncheckedCreateNestedOneWithoutTbmovimentosInput = {
    create?: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbmovimentosInput
    connect?: tbNfWhereUniqueInput
  }

  export type tbFornecedoresUpdateOneWithoutTbmovimentosNestedInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbmovimentosInput, tbFornecedoresUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbmovimentosInput
    upsert?: tbFornecedoresUpsertWithoutTbmovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbFornecedoresWhereUniqueInput
    update?: XOR<tbFornecedoresUpdateWithoutTbmovimentosInput, tbFornecedoresUncheckedUpdateWithoutTbmovimentosInput>
  }

  export type tbUsuariosUpdateOneWithoutTbmovimentosNestedInput = {
    create?: XOR<tbUsuariosCreateWithoutTbmovimentosInput, tbUsuariosUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbmovimentosInput
    upsert?: tbUsuariosUpsertWithoutTbmovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUsuariosWhereUniqueInput
    update?: XOR<tbUsuariosUpdateWithoutTbmovimentosInput, tbUsuariosUncheckedUpdateWithoutTbmovimentosInput>
  }

  export type tbMovitensUpdateManyWithoutTbmovimentosNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbmovimentosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbmovimentosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbmovimentosInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTbmovimentosInput>
    createMany?: tbMovitensCreateManyTbmovimentosInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTbmovimentosInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTbmovimentosInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbNfUpdateOneWithoutTbmovimentosNestedInput = {
    create?: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbmovimentosInput
    upsert?: tbNfUpsertWithoutTbmovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbNfWhereUniqueInput
    update?: XOR<tbNfUpdateWithoutTbmovimentosInput, tbNfUncheckedUpdateWithoutTbmovimentosInput>
  }

  export type tbMovitensUncheckedUpdateManyWithoutTbmovimentosNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbmovimentosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbmovimentosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbmovimentosInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTbmovimentosInput>
    createMany?: tbMovitensCreateManyTbmovimentosInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTbmovimentosInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTbmovimentosInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbNfUncheckedUpdateOneWithoutTbmovimentosNestedInput = {
    create?: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbmovimentosInput
    upsert?: tbNfUpsertWithoutTbmovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbNfWhereUniqueInput
    update?: XOR<tbNfUpdateWithoutTbmovimentosInput, tbNfUncheckedUpdateWithoutTbmovimentosInput>
  }

  export type tbLocaisCreateNestedOneWithoutTbmovitensInput = {
    create?: XOR<tbLocaisCreateWithoutTbmovitensInput, tbLocaisUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbmovitensInput
    connect?: tbLocaisWhereUniqueInput
  }

  export type tbMovimentosCreateNestedOneWithoutTbmovitensInput = {
    create?: XOR<tbMovimentosCreateWithoutTbmovitensInput, tbMovimentosUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbmovitensInput
    connect?: tbMovimentosWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbmovitensInput = {
    create?: XOR<tbProdutosCreateWithoutTbmovitensInput, tbProdutosUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbmovitensInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbNfitensCreateNestedManyWithoutTbmovitensInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbmovitensInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbmovitensInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbmovitensInput>
    createMany?: tbNfitensCreateManyTbmovitensInputEnvelope
    connect?: Enumerable<tbNfitensWhereUniqueInput>
  }

  export type tbNfitensUncheckedCreateNestedManyWithoutTbmovitensInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbmovitensInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbmovitensInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbmovitensInput>
    createMany?: tbNfitensCreateManyTbmovitensInputEnvelope
    connect?: Enumerable<tbNfitensWhereUniqueInput>
  }

  export type tbLocaisUpdateOneWithoutTbmovitensNestedInput = {
    create?: XOR<tbLocaisCreateWithoutTbmovitensInput, tbLocaisUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbmovitensInput
    upsert?: tbLocaisUpsertWithoutTbmovitensInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbLocaisWhereUniqueInput
    update?: XOR<tbLocaisUpdateWithoutTbmovitensInput, tbLocaisUncheckedUpdateWithoutTbmovitensInput>
  }

  export type tbMovimentosUpdateOneRequiredWithoutTbmovitensNestedInput = {
    create?: XOR<tbMovimentosCreateWithoutTbmovitensInput, tbMovimentosUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbmovitensInput
    upsert?: tbMovimentosUpsertWithoutTbmovitensInput
    connect?: tbMovimentosWhereUniqueInput
    update?: XOR<tbMovimentosUpdateWithoutTbmovitensInput, tbMovimentosUncheckedUpdateWithoutTbmovitensInput>
  }

  export type tbProdutosUpdateOneRequiredWithoutTbmovitensNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbmovitensInput, tbProdutosUncheckedCreateWithoutTbmovitensInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbmovitensInput
    upsert?: tbProdutosUpsertWithoutTbmovitensInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbmovitensInput, tbProdutosUncheckedUpdateWithoutTbmovitensInput>
  }

  export type tbNfitensUpdateManyWithoutTbmovitensNestedInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbmovitensInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbmovitensInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbmovitensInput>
    upsert?: Enumerable<tbNfitensUpsertWithWhereUniqueWithoutTbmovitensInput>
    createMany?: tbNfitensCreateManyTbmovitensInputEnvelope
    set?: Enumerable<tbNfitensWhereUniqueInput>
    disconnect?: Enumerable<tbNfitensWhereUniqueInput>
    delete?: Enumerable<tbNfitensWhereUniqueInput>
    connect?: Enumerable<tbNfitensWhereUniqueInput>
    update?: Enumerable<tbNfitensUpdateWithWhereUniqueWithoutTbmovitensInput>
    updateMany?: Enumerable<tbNfitensUpdateManyWithWhereWithoutTbmovitensInput>
    deleteMany?: Enumerable<tbNfitensScalarWhereInput>
  }

  export type tbNfitensUncheckedUpdateManyWithoutTbmovitensNestedInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbmovitensInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbmovitensInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbmovitensInput>
    upsert?: Enumerable<tbNfitensUpsertWithWhereUniqueWithoutTbmovitensInput>
    createMany?: tbNfitensCreateManyTbmovitensInputEnvelope
    set?: Enumerable<tbNfitensWhereUniqueInput>
    disconnect?: Enumerable<tbNfitensWhereUniqueInput>
    delete?: Enumerable<tbNfitensWhereUniqueInput>
    connect?: Enumerable<tbNfitensWhereUniqueInput>
    update?: Enumerable<tbNfitensUpdateWithWhereUniqueWithoutTbmovitensInput>
    updateMany?: Enumerable<tbNfitensUpdateManyWithWhereWithoutTbmovitensInput>
    deleteMany?: Enumerable<tbNfitensScalarWhereInput>
  }

  export type tbMovimentosCreateNestedOneWithoutTbnfInput = {
    create?: XOR<tbMovimentosCreateWithoutTbnfInput, tbMovimentosUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbnfInput
    connect?: tbMovimentosWhereUniqueInput
  }

  export type tbFornecedoresCreateNestedOneWithoutTbnfInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbnfInput, tbFornecedoresUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbnfInput
    connect?: tbFornecedoresWhereUniqueInput
  }

  export type tbUsuariosCreateNestedOneWithoutTbnfInput = {
    create?: XOR<tbUsuariosCreateWithoutTbnfInput, tbUsuariosUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbnfInput
    connect?: tbUsuariosWhereUniqueInput
  }

  export type tbNfitensCreateNestedManyWithoutTbnfInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbnfInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbnfInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbnfInput>
    createMany?: tbNfitensCreateManyTbnfInputEnvelope
    connect?: Enumerable<tbNfitensWhereUniqueInput>
  }

  export type tbNfitensUncheckedCreateNestedManyWithoutTbnfInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbnfInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbnfInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbnfInput>
    createMany?: tbNfitensCreateManyTbnfInputEnvelope
    connect?: Enumerable<tbNfitensWhereUniqueInput>
  }

  export type tbMovimentosUpdateOneWithoutTbnfNestedInput = {
    create?: XOR<tbMovimentosCreateWithoutTbnfInput, tbMovimentosUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbnfInput
    upsert?: tbMovimentosUpsertWithoutTbnfInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbMovimentosWhereUniqueInput
    update?: XOR<tbMovimentosUpdateWithoutTbnfInput, tbMovimentosUncheckedUpdateWithoutTbnfInput>
  }

  export type tbFornecedoresUpdateOneWithoutTbnfNestedInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbnfInput, tbFornecedoresUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbnfInput
    upsert?: tbFornecedoresUpsertWithoutTbnfInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbFornecedoresWhereUniqueInput
    update?: XOR<tbFornecedoresUpdateWithoutTbnfInput, tbFornecedoresUncheckedUpdateWithoutTbnfInput>
  }

  export type tbUsuariosUpdateOneWithoutTbnfNestedInput = {
    create?: XOR<tbUsuariosCreateWithoutTbnfInput, tbUsuariosUncheckedCreateWithoutTbnfInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbnfInput
    upsert?: tbUsuariosUpsertWithoutTbnfInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUsuariosWhereUniqueInput
    update?: XOR<tbUsuariosUpdateWithoutTbnfInput, tbUsuariosUncheckedUpdateWithoutTbnfInput>
  }

  export type tbNfitensUpdateManyWithoutTbnfNestedInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbnfInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbnfInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbnfInput>
    upsert?: Enumerable<tbNfitensUpsertWithWhereUniqueWithoutTbnfInput>
    createMany?: tbNfitensCreateManyTbnfInputEnvelope
    set?: Enumerable<tbNfitensWhereUniqueInput>
    disconnect?: Enumerable<tbNfitensWhereUniqueInput>
    delete?: Enumerable<tbNfitensWhereUniqueInput>
    connect?: Enumerable<tbNfitensWhereUniqueInput>
    update?: Enumerable<tbNfitensUpdateWithWhereUniqueWithoutTbnfInput>
    updateMany?: Enumerable<tbNfitensUpdateManyWithWhereWithoutTbnfInput>
    deleteMany?: Enumerable<tbNfitensScalarWhereInput>
  }

  export type tbNfitensUncheckedUpdateManyWithoutTbnfNestedInput = {
    create?: XOR<Enumerable<tbNfitensCreateWithoutTbnfInput>, Enumerable<tbNfitensUncheckedCreateWithoutTbnfInput>>
    connectOrCreate?: Enumerable<tbNfitensCreateOrConnectWithoutTbnfInput>
    upsert?: Enumerable<tbNfitensUpsertWithWhereUniqueWithoutTbnfInput>
    createMany?: tbNfitensCreateManyTbnfInputEnvelope
    set?: Enumerable<tbNfitensWhereUniqueInput>
    disconnect?: Enumerable<tbNfitensWhereUniqueInput>
    delete?: Enumerable<tbNfitensWhereUniqueInput>
    connect?: Enumerable<tbNfitensWhereUniqueInput>
    update?: Enumerable<tbNfitensUpdateWithWhereUniqueWithoutTbnfInput>
    updateMany?: Enumerable<tbNfitensUpdateManyWithWhereWithoutTbnfInput>
    deleteMany?: Enumerable<tbNfitensScalarWhereInput>
  }

  export type tbMovitensCreateNestedOneWithoutTbnfitensInput = {
    create?: XOR<tbMovitensCreateWithoutTbnfitensInput, tbMovitensUncheckedCreateWithoutTbnfitensInput>
    connectOrCreate?: tbMovitensCreateOrConnectWithoutTbnfitensInput
    connect?: tbMovitensWhereUniqueInput
  }

  export type tbNfCreateNestedOneWithoutTbnfitensInput = {
    create?: XOR<tbNfCreateWithoutTbnfitensInput, tbNfUncheckedCreateWithoutTbnfitensInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbnfitensInput
    connect?: tbNfWhereUniqueInput
  }

  export type tbMovitensUpdateOneWithoutTbnfitensNestedInput = {
    create?: XOR<tbMovitensCreateWithoutTbnfitensInput, tbMovitensUncheckedCreateWithoutTbnfitensInput>
    connectOrCreate?: tbMovitensCreateOrConnectWithoutTbnfitensInput
    upsert?: tbMovitensUpsertWithoutTbnfitensInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbMovitensWhereUniqueInput
    update?: XOR<tbMovitensUpdateWithoutTbnfitensInput, tbMovitensUncheckedUpdateWithoutTbnfitensInput>
  }

  export type tbNfUpdateOneRequiredWithoutTbnfitensNestedInput = {
    create?: XOR<tbNfCreateWithoutTbnfitensInput, tbNfUncheckedCreateWithoutTbnfitensInput>
    connectOrCreate?: tbNfCreateOrConnectWithoutTbnfitensInput
    upsert?: tbNfUpsertWithoutTbnfitensInput
    connect?: tbNfWhereUniqueInput
    update?: XOR<tbNfUpdateWithoutTbnfitensInput, tbNfUncheckedUpdateWithoutTbnfitensInput>
  }

  export type tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    create?: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    create?: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput
    upsert?: tbProdutosUpsertWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput
    upsert?: tbProdutosUpsertWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTbprodutosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbprodutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbprodutosInput>
    createMany?: tbEstoqueCreateManyTbprodutosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovitensCreateNestedManyWithoutTbprodutosInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbprodutosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbprodutosInput>
    createMany?: tbMovitensCreateManyTbprodutosInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInputEnvelope
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
  }

  export type tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInputEnvelope
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
  }

  export type tbTiposprodutosCreateNestedOneWithoutTbprodutosInput = {
    create?: XOR<tbTiposprodutosCreateWithoutTbprodutosInput, tbTiposprodutosUncheckedCreateWithoutTbprodutosInput>
    connectOrCreate?: tbTiposprodutosCreateOrConnectWithoutTbprodutosInput
    connect?: tbTiposprodutosWhereUniqueInput
  }

  export type tbUnidademedidaCreateNestedOneWithoutTbprodutosInput = {
    create?: XOR<tbUnidademedidaCreateWithoutTbprodutosInput, tbUnidademedidaUncheckedCreateWithoutTbprodutosInput>
    connectOrCreate?: tbUnidademedidaCreateOrConnectWithoutTbprodutosInput
    connect?: tbUnidademedidaWhereUniqueInput
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbprodutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbprodutosInput>
    createMany?: tbEstoqueCreateManyTbprodutosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbprodutosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbprodutosInput>
    createMany?: tbMovitensCreateManyTbprodutosInputEnvelope
    connect?: Enumerable<tbMovitensWhereUniqueInput>
  }

  export type tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInputEnvelope
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
  }

  export type tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInputEnvelope
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTbprodutosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbprodutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbprodutosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbprodutosInput>
    createMany?: tbEstoqueCreateManyTbprodutosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbprodutosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbprodutosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovitensUpdateManyWithoutTbprodutosNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbprodutosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbprodutosInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTbprodutosInput>
    createMany?: tbMovitensCreateManyTbprodutosInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTbprodutosInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTbprodutosInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    upsert?: Enumerable<tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInputEnvelope
    set?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    update?: Enumerable<tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    updateMany?: Enumerable<tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    deleteMany?: Enumerable<tbProdcomposicaoScalarWhereInput>
  }

  export type tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    upsert?: Enumerable<tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInputEnvelope
    set?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    update?: Enumerable<tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    updateMany?: Enumerable<tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    deleteMany?: Enumerable<tbProdcomposicaoScalarWhereInput>
  }

  export type tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput = {
    create?: XOR<tbTiposprodutosCreateWithoutTbprodutosInput, tbTiposprodutosUncheckedCreateWithoutTbprodutosInput>
    connectOrCreate?: tbTiposprodutosCreateOrConnectWithoutTbprodutosInput
    upsert?: tbTiposprodutosUpsertWithoutTbprodutosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbTiposprodutosWhereUniqueInput
    update?: XOR<tbTiposprodutosUpdateWithoutTbprodutosInput, tbTiposprodutosUncheckedUpdateWithoutTbprodutosInput>
  }

  export type tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput = {
    create?: XOR<tbUnidademedidaCreateWithoutTbprodutosInput, tbUnidademedidaUncheckedCreateWithoutTbprodutosInput>
    connectOrCreate?: tbUnidademedidaCreateOrConnectWithoutTbprodutosInput
    upsert?: tbUnidademedidaUpsertWithoutTbprodutosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUnidademedidaWhereUniqueInput
    update?: XOR<tbUnidademedidaUpdateWithoutTbprodutosInput, tbUnidademedidaUncheckedUpdateWithoutTbprodutosInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbprodutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbprodutosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbprodutosInput>
    createMany?: tbEstoqueCreateManyTbprodutosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbprodutosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbprodutosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput = {
    create?: XOR<Enumerable<tbMovitensCreateWithoutTbprodutosInput>, Enumerable<tbMovitensUncheckedCreateWithoutTbprodutosInput>>
    connectOrCreate?: Enumerable<tbMovitensCreateOrConnectWithoutTbprodutosInput>
    upsert?: Enumerable<tbMovitensUpsertWithWhereUniqueWithoutTbprodutosInput>
    createMany?: tbMovitensCreateManyTbprodutosInputEnvelope
    set?: Enumerable<tbMovitensWhereUniqueInput>
    disconnect?: Enumerable<tbMovitensWhereUniqueInput>
    delete?: Enumerable<tbMovitensWhereUniqueInput>
    connect?: Enumerable<tbMovitensWhereUniqueInput>
    update?: Enumerable<tbMovitensUpdateWithWhereUniqueWithoutTbprodutosInput>
    updateMany?: Enumerable<tbMovitensUpdateManyWithWhereWithoutTbprodutosInput>
    deleteMany?: Enumerable<tbMovitensScalarWhereInput>
  }

  export type tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    upsert?: Enumerable<tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInputEnvelope
    set?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    update?: Enumerable<tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    updateMany?: Enumerable<tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    deleteMany?: Enumerable<tbProdcomposicaoScalarWhereInput>
  }

  export type tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>, Enumerable<tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>>
    connectOrCreate?: Enumerable<tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    upsert?: Enumerable<tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    createMany?: tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInputEnvelope
    set?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdcomposicaoWhereUniqueInput>
    update?: Enumerable<tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    updateMany?: Enumerable<tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    deleteMany?: Enumerable<tbProdcomposicaoScalarWhereInput>
  }

  export type tbProdutosCreateNestedManyWithoutTbtiposprodutosInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbtiposprodutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbtiposprodutosInput>
    createMany?: tbProdutosCreateManyTbtiposprodutosInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUncheckedCreateNestedManyWithoutTbtiposprodutosInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbtiposprodutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbtiposprodutosInput>
    createMany?: tbProdutosCreateManyTbtiposprodutosInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUpdateManyWithoutTbtiposprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbtiposprodutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbtiposprodutosInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbtiposprodutosInput>
    createMany?: tbProdutosCreateManyTbtiposprodutosInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbtiposprodutosInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbtiposprodutosInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbtiposprodutosNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbtiposprodutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbtiposprodutosInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbtiposprodutosInput>
    createMany?: tbProdutosCreateManyTbtiposprodutosInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbtiposprodutosInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbtiposprodutosInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosCreateNestedManyWithoutTbunidademedidaInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbunidademedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbunidademedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbunidademedidaInput>
    createMany?: tbProdutosCreateManyTbunidademedidaInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUncheckedCreateNestedManyWithoutTbunidademedidaInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbunidademedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbunidademedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbunidademedidaInput>
    createMany?: tbProdutosCreateManyTbunidademedidaInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUpdateManyWithoutTbunidademedidaNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbunidademedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbunidademedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbunidademedidaInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbunidademedidaInput>
    createMany?: tbProdutosCreateManyTbunidademedidaInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbunidademedidaInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbunidademedidaInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbunidademedidaNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbunidademedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbunidademedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbunidademedidaInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbunidademedidaInput>
    createMany?: tbProdutosCreateManyTbunidademedidaInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbunidademedidaInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbunidademedidaInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbMovimentosCreateNestedManyWithoutTbusuariosInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbusuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbusuariosInput>
    createMany?: tbMovimentosCreateManyTbusuariosInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNfCreateNestedManyWithoutTbusuariosInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbusuariosInput>, Enumerable<tbNfUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbusuariosInput>
    createMany?: tbNfCreateManyTbusuariosInputEnvelope
    connect?: Enumerable<tbNfWhereUniqueInput>
  }

  export type tbMovimentosUncheckedCreateNestedManyWithoutTbusuariosInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbusuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbusuariosInput>
    createMany?: tbMovimentosCreateManyTbusuariosInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNfUncheckedCreateNestedManyWithoutTbusuariosInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbusuariosInput>, Enumerable<tbNfUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbusuariosInput>
    createMany?: tbNfCreateManyTbusuariosInputEnvelope
    connect?: Enumerable<tbNfWhereUniqueInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type tbMovimentosUpdateManyWithoutTbusuariosNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbusuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbusuariosInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbusuariosInput>
    createMany?: tbMovimentosCreateManyTbusuariosInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbusuariosInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbusuariosInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNfUpdateManyWithoutTbusuariosNestedInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbusuariosInput>, Enumerable<tbNfUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbusuariosInput>
    upsert?: Enumerable<tbNfUpsertWithWhereUniqueWithoutTbusuariosInput>
    createMany?: tbNfCreateManyTbusuariosInputEnvelope
    set?: Enumerable<tbNfWhereUniqueInput>
    disconnect?: Enumerable<tbNfWhereUniqueInput>
    delete?: Enumerable<tbNfWhereUniqueInput>
    connect?: Enumerable<tbNfWhereUniqueInput>
    update?: Enumerable<tbNfUpdateWithWhereUniqueWithoutTbusuariosInput>
    updateMany?: Enumerable<tbNfUpdateManyWithWhereWithoutTbusuariosInput>
    deleteMany?: Enumerable<tbNfScalarWhereInput>
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbusuariosNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbusuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbusuariosInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbusuariosInput>
    createMany?: tbMovimentosCreateManyTbusuariosInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbusuariosInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbusuariosInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNfUncheckedUpdateManyWithoutTbusuariosNestedInput = {
    create?: XOR<Enumerable<tbNfCreateWithoutTbusuariosInput>, Enumerable<tbNfUncheckedCreateWithoutTbusuariosInput>>
    connectOrCreate?: Enumerable<tbNfCreateOrConnectWithoutTbusuariosInput>
    upsert?: Enumerable<tbNfUpsertWithWhereUniqueWithoutTbusuariosInput>
    createMany?: tbNfCreateManyTbusuariosInputEnvelope
    set?: Enumerable<tbNfWhereUniqueInput>
    disconnect?: Enumerable<tbNfWhereUniqueInput>
    delete?: Enumerable<tbNfWhereUniqueInput>
    connect?: Enumerable<tbNfWhereUniqueInput>
    update?: Enumerable<tbNfUpdateWithWhereUniqueWithoutTbusuariosInput>
    updateMany?: Enumerable<tbNfUpdateManyWithWhereWithoutTbusuariosInput>
    deleteMany?: Enumerable<tbNfScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type tbLocaisCreateWithoutTbestoqueInput = {
    nomelocal?: string | null
    tbmovitens?: tbMovitensCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisUncheckedCreateWithoutTbestoqueInput = {
    idlocal?: number
    nomelocal?: string | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisCreateOrConnectWithoutTbestoqueInput = {
    where: tbLocaisWhereUniqueInput
    create: XOR<tbLocaisCreateWithoutTbestoqueInput, tbLocaisUncheckedCreateWithoutTbestoqueInput>
  }

  export type tbProdutosCreateWithoutTbestoqueInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbestoqueInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbestoqueInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbestoqueInput, tbProdutosUncheckedCreateWithoutTbestoqueInput>
  }

  export type tbLocaisUpsertWithoutTbestoqueInput = {
    update: XOR<tbLocaisUpdateWithoutTbestoqueInput, tbLocaisUncheckedUpdateWithoutTbestoqueInput>
    create: XOR<tbLocaisCreateWithoutTbestoqueInput, tbLocaisUncheckedCreateWithoutTbestoqueInput>
  }

  export type tbLocaisUpdateWithoutTbestoqueInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovitens?: tbMovitensUpdateManyWithoutTblocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateWithoutTbestoqueInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTblocaisNestedInput
  }

  export type tbProdutosUpsertWithoutTbestoqueInput = {
    update: XOR<tbProdutosUpdateWithoutTbestoqueInput, tbProdutosUncheckedUpdateWithoutTbestoqueInput>
    create: XOR<tbProdutosCreateWithoutTbestoqueInput, tbProdutosUncheckedCreateWithoutTbestoqueInput>
  }

  export type tbProdutosUpdateWithoutTbestoqueInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbestoqueInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbMovimentosCreateWithoutTbfornecedoresInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbmovimentosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbfornecedoresInput = {
    idmovimento?: number
    tipmov?: string | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfUncheckedCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbfornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbfornecedoresInput, tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>
  }

  export type tbMovimentosCreateManyTbfornecedoresInputEnvelope = {
    data: Enumerable<tbMovimentosCreateManyTbfornecedoresInput>
    skipDuplicates?: boolean
  }

  export type tbNfCreateWithoutTbfornecedoresInput = {
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosCreateNestedOneWithoutTbnfInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbnfInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbnfInput
  }

  export type tbNfUncheckedCreateWithoutTbfornecedoresInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbnfInput
  }

  export type tbNfCreateOrConnectWithoutTbfornecedoresInput = {
    where: tbNfWhereUniqueInput
    create: XOR<tbNfCreateWithoutTbfornecedoresInput, tbNfUncheckedCreateWithoutTbfornecedoresInput>
  }

  export type tbNfCreateManyTbfornecedoresInputEnvelope = {
    data: Enumerable<tbNfCreateManyTbfornecedoresInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithWhereUniqueWithoutTbfornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    update: XOR<tbMovimentosUpdateWithoutTbfornecedoresInput, tbMovimentosUncheckedUpdateWithoutTbfornecedoresInput>
    create: XOR<tbMovimentosCreateWithoutTbfornecedoresInput, tbMovimentosUncheckedCreateWithoutTbfornecedoresInput>
  }

  export type tbMovimentosUpdateWithWhereUniqueWithoutTbfornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    data: XOR<tbMovimentosUpdateWithoutTbfornecedoresInput, tbMovimentosUncheckedUpdateWithoutTbfornecedoresInput>
  }

  export type tbMovimentosUpdateManyWithWhereWithoutTbfornecedoresInput = {
    where: tbMovimentosScalarWhereInput
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyWithoutTbmovimentosInput>
  }

  export type tbMovimentosScalarWhereInput = {
    AND?: Enumerable<tbMovimentosScalarWhereInput>
    OR?: Enumerable<tbMovimentosScalarWhereInput>
    NOT?: Enumerable<tbMovimentosScalarWhereInput>
    idmovimento?: IntFilter | number
    tipmov?: StringNullableFilter | string | null
    idfor?: IntNullableFilter | number | null
    idusuario_alteracao?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
  }

  export type tbNfUpsertWithWhereUniqueWithoutTbfornecedoresInput = {
    where: tbNfWhereUniqueInput
    update: XOR<tbNfUpdateWithoutTbfornecedoresInput, tbNfUncheckedUpdateWithoutTbfornecedoresInput>
    create: XOR<tbNfCreateWithoutTbfornecedoresInput, tbNfUncheckedCreateWithoutTbfornecedoresInput>
  }

  export type tbNfUpdateWithWhereUniqueWithoutTbfornecedoresInput = {
    where: tbNfWhereUniqueInput
    data: XOR<tbNfUpdateWithoutTbfornecedoresInput, tbNfUncheckedUpdateWithoutTbfornecedoresInput>
  }

  export type tbNfUpdateManyWithWhereWithoutTbfornecedoresInput = {
    where: tbNfScalarWhereInput
    data: XOR<tbNfUpdateManyMutationInput, tbNfUncheckedUpdateManyWithoutTbnfInput>
  }

  export type tbNfScalarWhereInput = {
    AND?: Enumerable<tbNfScalarWhereInput>
    OR?: Enumerable<tbNfScalarWhereInput>
    NOT?: Enumerable<tbNfScalarWhereInput>
    idnf?: IntFilter | number
    numnf?: IntNullableFilter | number | null
    idmovimento?: IntNullableFilter | number | null
    serienf?: IntNullableFilter | number | null
    idfor?: IntNullableFilter | number | null
    idusuario_inclusao?: IntNullableFilter | number | null
    dtemissao?: DateTimeNullableFilter | Date | string | null
    vlrtotal?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbEstoqueCreateWithoutTblocaisInput = {
    idestoque?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
    tbprodutos: tbProdutosCreateNestedOneWithoutTbestoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTblocaisInput = {
    idestoque?: number
    idproduto: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTblocaisInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTblocaisInput, tbEstoqueUncheckedCreateWithoutTblocaisInput>
  }

  export type tbEstoqueCreateManyTblocaisInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTblocaisInput>
    skipDuplicates?: boolean
  }

  export type tbMovitensCreateWithoutTblocaisInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbmovimentos: tbMovimentosCreateNestedOneWithoutTbmovitensInput
    tbprodutos: tbProdutosCreateNestedOneWithoutTbmovitensInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensUncheckedCreateWithoutTblocaisInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensCreateOrConnectWithoutTblocaisInput = {
    where: tbMovitensWhereUniqueInput
    create: XOR<tbMovitensCreateWithoutTblocaisInput, tbMovitensUncheckedCreateWithoutTblocaisInput>
  }

  export type tbMovitensCreateManyTblocaisInputEnvelope = {
    data: Enumerable<tbMovitensCreateManyTblocaisInput>
    skipDuplicates?: boolean
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTblocaisInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTblocaisInput, tbEstoqueUncheckedUpdateWithoutTblocaisInput>
    create: XOR<tbEstoqueCreateWithoutTblocaisInput, tbEstoqueUncheckedCreateWithoutTblocaisInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTblocaisInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTblocaisInput, tbEstoqueUncheckedUpdateWithoutTblocaisInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTblocaisInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbestoqueInput>
  }

  export type tbEstoqueScalarWhereInput = {
    AND?: Enumerable<tbEstoqueScalarWhereInput>
    OR?: Enumerable<tbEstoqueScalarWhereInput>
    NOT?: Enumerable<tbEstoqueScalarWhereInput>
    idestoque?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    dtinc?: DateTimeNullableFilter | Date | string | null
  }

  export type tbMovitensUpsertWithWhereUniqueWithoutTblocaisInput = {
    where: tbMovitensWhereUniqueInput
    update: XOR<tbMovitensUpdateWithoutTblocaisInput, tbMovitensUncheckedUpdateWithoutTblocaisInput>
    create: XOR<tbMovitensCreateWithoutTblocaisInput, tbMovitensUncheckedCreateWithoutTblocaisInput>
  }

  export type tbMovitensUpdateWithWhereUniqueWithoutTblocaisInput = {
    where: tbMovitensWhereUniqueInput
    data: XOR<tbMovitensUpdateWithoutTblocaisInput, tbMovitensUncheckedUpdateWithoutTblocaisInput>
  }

  export type tbMovitensUpdateManyWithWhereWithoutTblocaisInput = {
    where: tbMovitensScalarWhereInput
    data: XOR<tbMovitensUpdateManyMutationInput, tbMovitensUncheckedUpdateManyWithoutTbmovitensInput>
  }

  export type tbMovitensScalarWhereInput = {
    AND?: Enumerable<tbMovitensScalarWhereInput>
    OR?: Enumerable<tbMovitensScalarWhereInput>
    NOT?: Enumerable<tbMovitensScalarWhereInput>
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbFornecedoresCreateWithoutTbmovimentosInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbnf?: tbNfCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateWithoutTbmovimentosInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbnf?: tbNfUncheckedCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresCreateOrConnectWithoutTbmovimentosInput = {
    where: tbFornecedoresWhereUniqueInput
    create: XOR<tbFornecedoresCreateWithoutTbmovimentosInput, tbFornecedoresUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbUsuariosCreateWithoutTbmovimentosInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbnf?: tbNfCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosUncheckedCreateWithoutTbmovimentosInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbnf?: tbNfUncheckedCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosCreateOrConnectWithoutTbmovimentosInput = {
    where: tbUsuariosWhereUniqueInput
    create: XOR<tbUsuariosCreateWithoutTbmovimentosInput, tbUsuariosUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbMovitensCreateWithoutTbmovimentosInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbmovitensInput
    tbprodutos: tbProdutosCreateNestedOneWithoutTbmovitensInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensUncheckedCreateWithoutTbmovimentosInput = {
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensCreateOrConnectWithoutTbmovimentosInput = {
    where: tbMovitensWhereUniqueInput
    create: XOR<tbMovitensCreateWithoutTbmovimentosInput, tbMovitensUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbMovitensCreateManyTbmovimentosInputEnvelope = {
    data: Enumerable<tbMovitensCreateManyTbmovimentosInput>
    skipDuplicates?: boolean
  }

  export type tbNfCreateWithoutTbmovimentosInput = {
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbnfInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbnfInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbnfInput
  }

  export type tbNfUncheckedCreateWithoutTbmovimentosInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbnfInput
  }

  export type tbNfCreateOrConnectWithoutTbmovimentosInput = {
    where: tbNfWhereUniqueInput
    create: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbFornecedoresUpsertWithoutTbmovimentosInput = {
    update: XOR<tbFornecedoresUpdateWithoutTbmovimentosInput, tbFornecedoresUncheckedUpdateWithoutTbmovimentosInput>
    create: XOR<tbFornecedoresCreateWithoutTbmovimentosInput, tbFornecedoresUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbFornecedoresUpdateWithoutTbmovimentosInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbnf?: tbNfUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateWithoutTbmovimentosInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbnf?: tbNfUncheckedUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbUsuariosUpsertWithoutTbmovimentosInput = {
    update: XOR<tbUsuariosUpdateWithoutTbmovimentosInput, tbUsuariosUncheckedUpdateWithoutTbmovimentosInput>
    create: XOR<tbUsuariosCreateWithoutTbmovimentosInput, tbUsuariosUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbUsuariosUpdateWithoutTbmovimentosInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbnf?: tbNfUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateWithoutTbmovimentosInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbnf?: tbNfUncheckedUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbMovitensUpsertWithWhereUniqueWithoutTbmovimentosInput = {
    where: tbMovitensWhereUniqueInput
    update: XOR<tbMovitensUpdateWithoutTbmovimentosInput, tbMovitensUncheckedUpdateWithoutTbmovimentosInput>
    create: XOR<tbMovitensCreateWithoutTbmovimentosInput, tbMovitensUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbMovitensUpdateWithWhereUniqueWithoutTbmovimentosInput = {
    where: tbMovitensWhereUniqueInput
    data: XOR<tbMovitensUpdateWithoutTbmovimentosInput, tbMovitensUncheckedUpdateWithoutTbmovimentosInput>
  }

  export type tbMovitensUpdateManyWithWhereWithoutTbmovimentosInput = {
    where: tbMovitensScalarWhereInput
    data: XOR<tbMovitensUpdateManyMutationInput, tbMovitensUncheckedUpdateManyWithoutTbmovitensInput>
  }

  export type tbNfUpsertWithoutTbmovimentosInput = {
    update: XOR<tbNfUpdateWithoutTbmovimentosInput, tbNfUncheckedUpdateWithoutTbmovimentosInput>
    create: XOR<tbNfCreateWithoutTbmovimentosInput, tbNfUncheckedCreateWithoutTbmovimentosInput>
  }

  export type tbNfUpdateWithoutTbmovimentosInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbnfNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbnfNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateWithoutTbmovimentosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbnfNestedInput
  }

  export type tbLocaisCreateWithoutTbmovitensInput = {
    nomelocal?: string | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisUncheckedCreateWithoutTbmovitensInput = {
    idlocal?: number
    nomelocal?: string | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTblocaisInput
  }

  export type tbLocaisCreateOrConnectWithoutTbmovitensInput = {
    where: tbLocaisWhereUniqueInput
    create: XOR<tbLocaisCreateWithoutTbmovitensInput, tbLocaisUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbMovimentosCreateWithoutTbmovitensInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbmovimentosInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbmovimentosInput
    tbnf?: tbNfCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbmovitensInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbnf?: tbNfUncheckedCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbmovitensInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbmovitensInput, tbMovimentosUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbProdutosCreateWithoutTbmovitensInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbmovitensInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbmovitensInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbmovitensInput, tbProdutosUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbNfitensCreateWithoutTbmovitensInput = {
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
    tbnf: tbNfCreateNestedOneWithoutTbnfitensInput
  }

  export type tbNfitensUncheckedCreateWithoutTbmovitensInput = {
    idnf: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensCreateOrConnectWithoutTbmovitensInput = {
    where: tbNfitensWhereUniqueInput
    create: XOR<tbNfitensCreateWithoutTbmovitensInput, tbNfitensUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbNfitensCreateManyTbmovitensInputEnvelope = {
    data: Enumerable<tbNfitensCreateManyTbmovitensInput>
    skipDuplicates?: boolean
  }

  export type tbLocaisUpsertWithoutTbmovitensInput = {
    update: XOR<tbLocaisUpdateWithoutTbmovitensInput, tbLocaisUncheckedUpdateWithoutTbmovitensInput>
    create: XOR<tbLocaisCreateWithoutTbmovitensInput, tbLocaisUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbLocaisUpdateWithoutTbmovitensInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbestoque?: tbEstoqueUpdateManyWithoutTblocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateWithoutTbmovitensInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTblocaisNestedInput
  }

  export type tbMovimentosUpsertWithoutTbmovitensInput = {
    update: XOR<tbMovimentosUpdateWithoutTbmovitensInput, tbMovimentosUncheckedUpdateWithoutTbmovitensInput>
    create: XOR<tbMovimentosCreateWithoutTbmovitensInput, tbMovimentosUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbMovimentosUpdateWithoutTbmovitensInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbmovimentosNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbmovimentosNestedInput
    tbnf?: tbNfUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbmovitensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbnf?: tbNfUncheckedUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbProdutosUpsertWithoutTbmovitensInput = {
    update: XOR<tbProdutosUpdateWithoutTbmovitensInput, tbProdutosUncheckedUpdateWithoutTbmovitensInput>
    create: XOR<tbProdutosCreateWithoutTbmovitensInput, tbProdutosUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbProdutosUpdateWithoutTbmovitensInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbmovitensInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbNfitensUpsertWithWhereUniqueWithoutTbmovitensInput = {
    where: tbNfitensWhereUniqueInput
    update: XOR<tbNfitensUpdateWithoutTbmovitensInput, tbNfitensUncheckedUpdateWithoutTbmovitensInput>
    create: XOR<tbNfitensCreateWithoutTbmovitensInput, tbNfitensUncheckedCreateWithoutTbmovitensInput>
  }

  export type tbNfitensUpdateWithWhereUniqueWithoutTbmovitensInput = {
    where: tbNfitensWhereUniqueInput
    data: XOR<tbNfitensUpdateWithoutTbmovitensInput, tbNfitensUncheckedUpdateWithoutTbmovitensInput>
  }

  export type tbNfitensUpdateManyWithWhereWithoutTbmovitensInput = {
    where: tbNfitensScalarWhereInput
    data: XOR<tbNfitensUpdateManyMutationInput, tbNfitensUncheckedUpdateManyWithoutTbnfitensInput>
  }

  export type tbNfitensScalarWhereInput = {
    AND?: Enumerable<tbNfitensScalarWhereInput>
    OR?: Enumerable<tbNfitensScalarWhereInput>
    NOT?: Enumerable<tbNfitensScalarWhereInput>
    idnf?: IntFilter | number
    idmovimento?: IntNullableFilter | number | null
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    vlrunitario?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovimentosCreateWithoutTbnfInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbmovimentosInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbmovimentosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbmovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbnfInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbmovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbnfInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbnfInput, tbMovimentosUncheckedCreateWithoutTbnfInput>
  }

  export type tbFornecedoresCreateWithoutTbnfInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbmovimentos?: tbMovimentosCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateWithoutTbnfInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbmovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbfornecedoresInput
  }

  export type tbFornecedoresCreateOrConnectWithoutTbnfInput = {
    where: tbFornecedoresWhereUniqueInput
    create: XOR<tbFornecedoresCreateWithoutTbnfInput, tbFornecedoresUncheckedCreateWithoutTbnfInput>
  }

  export type tbUsuariosCreateWithoutTbnfInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbmovimentos?: tbMovimentosCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosUncheckedCreateWithoutTbnfInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbmovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbusuariosInput
  }

  export type tbUsuariosCreateOrConnectWithoutTbnfInput = {
    where: tbUsuariosWhereUniqueInput
    create: XOR<tbUsuariosCreateWithoutTbnfInput, tbUsuariosUncheckedCreateWithoutTbnfInput>
  }

  export type tbNfitensCreateWithoutTbnfInput = {
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
    tbmovitens?: tbMovitensCreateNestedOneWithoutTbnfitensInput
  }

  export type tbNfitensUncheckedCreateWithoutTbnfInput = {
    idmovimento?: number | null
    seqitem: number
    idproduto: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensCreateOrConnectWithoutTbnfInput = {
    where: tbNfitensWhereUniqueInput
    create: XOR<tbNfitensCreateWithoutTbnfInput, tbNfitensUncheckedCreateWithoutTbnfInput>
  }

  export type tbNfitensCreateManyTbnfInputEnvelope = {
    data: Enumerable<tbNfitensCreateManyTbnfInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithoutTbnfInput = {
    update: XOR<tbMovimentosUpdateWithoutTbnfInput, tbMovimentosUncheckedUpdateWithoutTbnfInput>
    create: XOR<tbMovimentosCreateWithoutTbnfInput, tbMovimentosUncheckedCreateWithoutTbnfInput>
  }

  export type tbMovimentosUpdateWithoutTbnfInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbmovimentosNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbmovimentosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbnfInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbmovimentosNestedInput
  }

  export type tbFornecedoresUpsertWithoutTbnfInput = {
    update: XOR<tbFornecedoresUpdateWithoutTbnfInput, tbFornecedoresUncheckedUpdateWithoutTbnfInput>
    create: XOR<tbFornecedoresCreateWithoutTbnfInput, tbFornecedoresUncheckedCreateWithoutTbnfInput>
  }

  export type tbFornecedoresUpdateWithoutTbnfInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovimentos?: tbMovimentosUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateWithoutTbnfInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbmovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbfornecedoresNestedInput
  }

  export type tbUsuariosUpsertWithoutTbnfInput = {
    update: XOR<tbUsuariosUpdateWithoutTbnfInput, tbUsuariosUncheckedUpdateWithoutTbnfInput>
    create: XOR<tbUsuariosCreateWithoutTbnfInput, tbUsuariosUncheckedCreateWithoutTbnfInput>
  }

  export type tbUsuariosUpdateWithoutTbnfInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbmovimentos?: tbMovimentosUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateWithoutTbnfInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbmovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbusuariosNestedInput
  }

  export type tbNfitensUpsertWithWhereUniqueWithoutTbnfInput = {
    where: tbNfitensWhereUniqueInput
    update: XOR<tbNfitensUpdateWithoutTbnfInput, tbNfitensUncheckedUpdateWithoutTbnfInput>
    create: XOR<tbNfitensCreateWithoutTbnfInput, tbNfitensUncheckedCreateWithoutTbnfInput>
  }

  export type tbNfitensUpdateWithWhereUniqueWithoutTbnfInput = {
    where: tbNfitensWhereUniqueInput
    data: XOR<tbNfitensUpdateWithoutTbnfInput, tbNfitensUncheckedUpdateWithoutTbnfInput>
  }

  export type tbNfitensUpdateManyWithWhereWithoutTbnfInput = {
    where: tbNfitensScalarWhereInput
    data: XOR<tbNfitensUpdateManyMutationInput, tbNfitensUncheckedUpdateManyWithoutTbnfitensInput>
  }

  export type tbMovitensCreateWithoutTbnfitensInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbmovitensInput
    tbmovimentos: tbMovimentosCreateNestedOneWithoutTbmovitensInput
    tbprodutos: tbProdutosCreateNestedOneWithoutTbmovitensInput
  }

  export type tbMovitensUncheckedCreateWithoutTbnfitensInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovitensCreateOrConnectWithoutTbnfitensInput = {
    where: tbMovitensWhereUniqueInput
    create: XOR<tbMovitensCreateWithoutTbnfitensInput, tbMovitensUncheckedCreateWithoutTbnfitensInput>
  }

  export type tbNfCreateWithoutTbnfitensInput = {
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosCreateNestedOneWithoutTbnfInput
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbnfInput
    tbusuarios?: tbUsuariosCreateNestedOneWithoutTbnfInput
  }

  export type tbNfUncheckedCreateWithoutTbnfitensInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfCreateOrConnectWithoutTbnfitensInput = {
    where: tbNfWhereUniqueInput
    create: XOR<tbNfCreateWithoutTbnfitensInput, tbNfUncheckedCreateWithoutTbnfitensInput>
  }

  export type tbMovitensUpsertWithoutTbnfitensInput = {
    update: XOR<tbMovitensUpdateWithoutTbnfitensInput, tbMovitensUncheckedUpdateWithoutTbnfitensInput>
    create: XOR<tbMovitensCreateWithoutTbnfitensInput, tbMovitensUncheckedCreateWithoutTbnfitensInput>
  }

  export type tbMovitensUpdateWithoutTbnfitensInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbmovitensNestedInput
    tbmovimentos?: tbMovimentosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateWithoutTbnfitensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfUpsertWithoutTbnfitensInput = {
    update: XOR<tbNfUpdateWithoutTbnfitensInput, tbNfUncheckedUpdateWithoutTbnfitensInput>
    create: XOR<tbNfCreateWithoutTbnfitensInput, tbNfUncheckedCreateWithoutTbnfitensInput>
  }

  export type tbNfUpdateWithoutTbnfitensInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosUpdateOneWithoutTbnfNestedInput
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbnfNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateWithoutTbnfitensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    idunidade?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbProdutosUpsertWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    update: XOR<tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
    create: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbProdutosUpsertWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    update: XOR<tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
    create: XOR<tbProdutosCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdutosUncheckedCreateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbProdutosUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
  }

  export type tbEstoqueCreateWithoutTbprodutosInput = {
    idestoque?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbestoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTbprodutosInput = {
    idestoque?: number
    idlocal?: number | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTbprodutosInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTbprodutosInput, tbEstoqueUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbEstoqueCreateManyTbprodutosInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTbprodutosInput>
    skipDuplicates?: boolean
  }

  export type tbMovitensCreateWithoutTbprodutosInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisCreateNestedOneWithoutTbmovitensInput
    tbmovimentos: tbMovimentosCreateNestedOneWithoutTbmovitensInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensUncheckedCreateWithoutTbprodutosInput = {
    idmovimento: number
    seqitem?: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbmovitensInput
  }

  export type tbMovitensCreateOrConnectWithoutTbprodutosInput = {
    where: tbMovitensWhereUniqueInput
    create: XOR<tbMovitensCreateWithoutTbprodutosInput, tbMovitensUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbMovitensCreateManyTbprodutosInputEnvelope = {
    data: Enumerable<tbMovitensCreateManyTbprodutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos: tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: number
    idprodutocomp: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    create: XOR<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInputEnvelope = {
    data: Enumerable<tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos: tbProdutosCreateNestedOneWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput
  }

  export type tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: number
    idproduto: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateOrConnectWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    create: XOR<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInputEnvelope = {
    data: Enumerable<tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    skipDuplicates?: boolean
  }

  export type tbTiposprodutosCreateWithoutTbprodutosInput = {
    nometipprod?: string | null
  }

  export type tbTiposprodutosUncheckedCreateWithoutTbprodutosInput = {
    idtipprod?: number
    nometipprod?: string | null
  }

  export type tbTiposprodutosCreateOrConnectWithoutTbprodutosInput = {
    where: tbTiposprodutosWhereUniqueInput
    create: XOR<tbTiposprodutosCreateWithoutTbprodutosInput, tbTiposprodutosUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbUnidademedidaCreateWithoutTbprodutosInput = {
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidademedidaUncheckedCreateWithoutTbprodutosInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidademedidaCreateOrConnectWithoutTbprodutosInput = {
    where: tbUnidademedidaWhereUniqueInput
    create: XOR<tbUnidademedidaCreateWithoutTbprodutosInput, tbUnidademedidaUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTbprodutosInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTbprodutosInput, tbEstoqueUncheckedUpdateWithoutTbprodutosInput>
    create: XOR<tbEstoqueCreateWithoutTbprodutosInput, tbEstoqueUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTbprodutosInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTbprodutosInput, tbEstoqueUncheckedUpdateWithoutTbprodutosInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTbprodutosInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbestoqueInput>
  }

  export type tbMovitensUpsertWithWhereUniqueWithoutTbprodutosInput = {
    where: tbMovitensWhereUniqueInput
    update: XOR<tbMovitensUpdateWithoutTbprodutosInput, tbMovitensUncheckedUpdateWithoutTbprodutosInput>
    create: XOR<tbMovitensCreateWithoutTbprodutosInput, tbMovitensUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbMovitensUpdateWithWhereUniqueWithoutTbprodutosInput = {
    where: tbMovitensWhereUniqueInput
    data: XOR<tbMovitensUpdateWithoutTbprodutosInput, tbMovitensUncheckedUpdateWithoutTbprodutosInput>
  }

  export type tbMovitensUpdateManyWithWhereWithoutTbprodutosInput = {
    where: tbMovitensScalarWhereInput
    data: XOR<tbMovitensUpdateManyMutationInput, tbMovitensUncheckedUpdateManyWithoutTbmovitensInput>
  }

  export type tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    update: XOR<tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
    create: XOR<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    data: XOR<tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput, tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    where: tbProdcomposicaoScalarWhereInput
    data: XOR<tbProdcomposicaoUpdateManyMutationInput, tbProdcomposicaoUncheckedUpdateManyWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput>
  }

  export type tbProdcomposicaoScalarWhereInput = {
    AND?: Enumerable<tbProdcomposicaoScalarWhereInput>
    OR?: Enumerable<tbProdcomposicaoScalarWhereInput>
    NOT?: Enumerable<tbProdcomposicaoScalarWhereInput>
    idcomp?: IntFilter | number
    idproduto?: IntFilter | number
    idprodutocomp?: IntFilter | number
    quantidade?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUpsertWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    update: XOR<tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
    create: XOR<tbProdcomposicaoCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdcomposicaoUncheckedCreateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbProdcomposicaoUpdateWithWhereUniqueWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    where: tbProdcomposicaoWhereUniqueInput
    data: XOR<tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput, tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbProdcomposicaoUpdateManyWithWhereWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    where: tbProdcomposicaoScalarWhereInput
    data: XOR<tbProdcomposicaoUpdateManyMutationInput, tbProdcomposicaoUncheckedUpdateManyWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput>
  }

  export type tbTiposprodutosUpsertWithoutTbprodutosInput = {
    update: XOR<tbTiposprodutosUpdateWithoutTbprodutosInput, tbTiposprodutosUncheckedUpdateWithoutTbprodutosInput>
    create: XOR<tbTiposprodutosCreateWithoutTbprodutosInput, tbTiposprodutosUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbTiposprodutosUpdateWithoutTbprodutosInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbTiposprodutosUncheckedUpdateWithoutTbprodutosInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidademedidaUpsertWithoutTbprodutosInput = {
    update: XOR<tbUnidademedidaUpdateWithoutTbprodutosInput, tbUnidademedidaUncheckedUpdateWithoutTbprodutosInput>
    create: XOR<tbUnidademedidaCreateWithoutTbprodutosInput, tbUnidademedidaUncheckedCreateWithoutTbprodutosInput>
  }

  export type tbUnidademedidaUpdateWithoutTbprodutosInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidademedidaUncheckedUpdateWithoutTbprodutosInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbProdutosCreateWithoutTbtiposprodutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbunidademedida?: tbUnidademedidaCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbtiposprodutosInput = {
    idproduto?: number
    nomeprod?: string | null
    idunidade?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbtiposprodutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbtiposprodutosInput, tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>
  }

  export type tbProdutosCreateManyTbtiposprodutosInputEnvelope = {
    data: Enumerable<tbProdutosCreateManyTbtiposprodutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdutosUpsertWithWhereUniqueWithoutTbtiposprodutosInput = {
    where: tbProdutosWhereUniqueInput
    update: XOR<tbProdutosUpdateWithoutTbtiposprodutosInput, tbProdutosUncheckedUpdateWithoutTbtiposprodutosInput>
    create: XOR<tbProdutosCreateWithoutTbtiposprodutosInput, tbProdutosUncheckedCreateWithoutTbtiposprodutosInput>
  }

  export type tbProdutosUpdateWithWhereUniqueWithoutTbtiposprodutosInput = {
    where: tbProdutosWhereUniqueInput
    data: XOR<tbProdutosUpdateWithoutTbtiposprodutosInput, tbProdutosUncheckedUpdateWithoutTbtiposprodutosInput>
  }

  export type tbProdutosUpdateManyWithWhereWithoutTbtiposprodutosInput = {
    where: tbProdutosScalarWhereInput
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyWithoutTbprodutosInput>
  }

  export type tbProdutosScalarWhereInput = {
    AND?: Enumerable<tbProdutosScalarWhereInput>
    OR?: Enumerable<tbProdutosScalarWhereInput>
    NOT?: Enumerable<tbProdutosScalarWhereInput>
    idproduto?: IntFilter | number
    nomeprod?: StringNullableFilter | string | null
    idtipprod?: IntNullableFilter | number | null
    idunidade?: IntNullableFilter | number | null
    quantminima?: IntNullableFilter | number | null
  }

  export type tbProdutosCreateWithoutTbunidademedidaInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbestoque?: tbEstoqueCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
    tbtiposprodutos?: tbTiposprodutosCreateNestedOneWithoutTbprodutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbunidademedidaInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    quantminima?: number | null
    tbestoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbprodutosInput
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedCreateNestedManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbunidademedidaInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbunidademedidaInput, tbProdutosUncheckedCreateWithoutTbunidademedidaInput>
  }

  export type tbProdutosCreateManyTbunidademedidaInputEnvelope = {
    data: Enumerable<tbProdutosCreateManyTbunidademedidaInput>
    skipDuplicates?: boolean
  }

  export type tbProdutosUpsertWithWhereUniqueWithoutTbunidademedidaInput = {
    where: tbProdutosWhereUniqueInput
    update: XOR<tbProdutosUpdateWithoutTbunidademedidaInput, tbProdutosUncheckedUpdateWithoutTbunidademedidaInput>
    create: XOR<tbProdutosCreateWithoutTbunidademedidaInput, tbProdutosUncheckedCreateWithoutTbunidademedidaInput>
  }

  export type tbProdutosUpdateWithWhereUniqueWithoutTbunidademedidaInput = {
    where: tbProdutosWhereUniqueInput
    data: XOR<tbProdutosUpdateWithoutTbunidademedidaInput, tbProdutosUncheckedUpdateWithoutTbunidademedidaInput>
  }

  export type tbProdutosUpdateManyWithWhereWithoutTbunidademedidaInput = {
    where: tbProdutosScalarWhereInput
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyWithoutTbprodutosInput>
  }

  export type tbMovimentosCreateWithoutTbusuariosInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbmovimentosInput
    tbmovitens?: tbMovitensCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbusuariosInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    dtinc?: Date | string | null
    tbmovitens?: tbMovitensUncheckedCreateNestedManyWithoutTbmovimentosInput
    tbnf?: tbNfUncheckedCreateNestedOneWithoutTbmovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbusuariosInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbusuariosInput, tbMovimentosUncheckedCreateWithoutTbusuariosInput>
  }

  export type tbMovimentosCreateManyTbusuariosInputEnvelope = {
    data: Enumerable<tbMovimentosCreateManyTbusuariosInput>
    skipDuplicates?: boolean
  }

  export type tbNfCreateWithoutTbusuariosInput = {
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosCreateNestedOneWithoutTbnfInput
    tbfornecedores?: tbFornecedoresCreateNestedOneWithoutTbnfInput
    tbnfitens?: tbNfitensCreateNestedManyWithoutTbnfInput
  }

  export type tbNfUncheckedCreateWithoutTbusuariosInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idfor?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedCreateNestedManyWithoutTbnfInput
  }

  export type tbNfCreateOrConnectWithoutTbusuariosInput = {
    where: tbNfWhereUniqueInput
    create: XOR<tbNfCreateWithoutTbusuariosInput, tbNfUncheckedCreateWithoutTbusuariosInput>
  }

  export type tbNfCreateManyTbusuariosInputEnvelope = {
    data: Enumerable<tbNfCreateManyTbusuariosInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithWhereUniqueWithoutTbusuariosInput = {
    where: tbMovimentosWhereUniqueInput
    update: XOR<tbMovimentosUpdateWithoutTbusuariosInput, tbMovimentosUncheckedUpdateWithoutTbusuariosInput>
    create: XOR<tbMovimentosCreateWithoutTbusuariosInput, tbMovimentosUncheckedCreateWithoutTbusuariosInput>
  }

  export type tbMovimentosUpdateWithWhereUniqueWithoutTbusuariosInput = {
    where: tbMovimentosWhereUniqueInput
    data: XOR<tbMovimentosUpdateWithoutTbusuariosInput, tbMovimentosUncheckedUpdateWithoutTbusuariosInput>
  }

  export type tbMovimentosUpdateManyWithWhereWithoutTbusuariosInput = {
    where: tbMovimentosScalarWhereInput
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyWithoutTbmovimentosInput>
  }

  export type tbNfUpsertWithWhereUniqueWithoutTbusuariosInput = {
    where: tbNfWhereUniqueInput
    update: XOR<tbNfUpdateWithoutTbusuariosInput, tbNfUncheckedUpdateWithoutTbusuariosInput>
    create: XOR<tbNfCreateWithoutTbusuariosInput, tbNfUncheckedCreateWithoutTbusuariosInput>
  }

  export type tbNfUpdateWithWhereUniqueWithoutTbusuariosInput = {
    where: tbNfWhereUniqueInput
    data: XOR<tbNfUpdateWithoutTbusuariosInput, tbNfUncheckedUpdateWithoutTbusuariosInput>
  }

  export type tbNfUpdateManyWithWhereWithoutTbusuariosInput = {
    where: tbNfScalarWhereInput
    data: XOR<tbNfUpdateManyMutationInput, tbNfUncheckedUpdateManyWithoutTbnfInput>
  }

  export type tbMovimentosCreateManyTbfornecedoresInput = {
    idmovimento?: number
    tipmov?: string | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
  }

  export type tbNfCreateManyTbfornecedoresInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovimentosUpdateWithoutTbfornecedoresInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbusuarios?: tbUsuariosUpdateOneWithoutTbmovimentosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbfornecedoresInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUncheckedUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbmovimentosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbNfUpdateWithoutTbfornecedoresInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosUpdateOneWithoutTbnfNestedInput
    tbusuarios?: tbUsuariosUpdateOneWithoutTbnfNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateWithoutTbfornecedoresInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateManyWithoutTbnfInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbEstoqueCreateManyTblocaisInput = {
    idestoque?: number
    idproduto: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbMovitensCreateManyTblocaisInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbEstoqueUpdateWithoutTblocaisInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbestoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTblocaisInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbestoqueInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovitensUpdateWithoutTblocaisInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateWithoutTblocaisInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateManyWithoutTbmovitensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovitensCreateManyTbmovimentosInput = {
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovitensUpdateWithoutTbmovimentosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbmovitensNestedInput
    tbprodutos?: tbProdutosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateWithoutTbmovimentosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbNfitensCreateManyTbmovitensInput = {
    idnf: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUpdateWithoutTbmovitensInput = {
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnf?: tbNfUpdateOneRequiredWithoutTbnfitensNestedInput
  }

  export type tbNfitensUncheckedUpdateWithoutTbmovitensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUncheckedUpdateManyWithoutTbnfitensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensCreateManyTbnfInput = {
    idmovimento?: number | null
    seqitem: number
    idproduto: number
    vlrunitario?: Decimal | DecimalJsLike | number | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbNfitensUpdateWithoutTbnfInput = {
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovitens?: tbMovitensUpdateOneWithoutTbnfitensNestedInput
  }

  export type tbNfitensUncheckedUpdateWithoutTbnfInput = {
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vlrtotitem?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbEstoqueCreateManyTbprodutosInput = {
    idestoque?: number
    idlocal?: number | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
    dtinc?: Date | string | null
  }

  export type tbMovitensCreateManyTbprodutosInput = {
    idmovimento: number
    seqitem?: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: number
    idprodutocomp: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoCreateManyTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: number
    idproduto: number
    quantidade?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbEstoqueUpdateWithoutTbprodutosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbestoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTbprodutosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovitensUpdateWithoutTbprodutosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblocais?: tbLocaisUpdateOneWithoutTbmovitensNestedInput
    tbmovimentos?: tbMovimentosUpdateOneRequiredWithoutTbmovitensNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbMovitensUncheckedUpdateWithoutTbprodutosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbmovitensNestedInput
  }

  export type tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUncheckedUpdateManyWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbprodutos_tbprodcomposicao_idprodutoTotbprodutos?: tbProdutosUpdateOneRequiredWithoutTbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutosNestedInput
  }

  export type tbProdcomposicaoUncheckedUpdateWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdcomposicaoUncheckedUpdateManyWithoutTbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbProdutosCreateManyTbtiposprodutosInput = {
    idproduto?: number
    nomeprod?: string | null
    idunidade?: number | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateWithoutTbtiposprodutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbunidademedida?: tbUnidademedidaUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbtiposprodutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbprodutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosCreateManyTbunidademedidaInput = {
    idproduto?: number
    nomeprod?: string | null
    idtipprod?: number | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateWithoutTbunidademedidaInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
    tbtiposprodutos?: tbTiposprodutosUpdateOneWithoutTbprodutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbunidademedidaInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbestoque?: tbEstoqueUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutoTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutoTotbprodutosNestedInput
    tbprodcomposicao_tbprodcomposicao_idprodutocompTotbprodutos?: tbProdcomposicaoUncheckedUpdateManyWithoutTbprodutos_tbprodcomposicao_idprodutocompTotbprodutosNestedInput
  }

  export type tbMovimentosCreateManyTbusuariosInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    dtinc?: Date | string | null
  }

  export type tbNfCreateManyTbusuariosInput = {
    idnf?: number
    numnf?: number | null
    idmovimento?: number | null
    serienf?: number | null
    idfor?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbMovimentosUpdateWithoutTbusuariosInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbmovimentosNestedInput
    tbmovitens?: tbMovitensUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbusuariosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbmovitens?: tbMovitensUncheckedUpdateManyWithoutTbmovimentosNestedInput
    tbnf?: tbNfUncheckedUpdateOneWithoutTbmovimentosNestedInput
  }

  export type tbNfUpdateWithoutTbusuariosInput = {
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbmovimentos?: tbMovimentosUpdateOneWithoutTbnfNestedInput
    tbfornecedores?: tbFornecedoresUpdateOneWithoutTbnfNestedInput
    tbnfitens?: tbNfitensUpdateManyWithoutTbnfNestedInput
  }

  export type tbNfUncheckedUpdateWithoutTbusuariosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tbnfitens?: tbNfitensUncheckedUpdateManyWithoutTbnfNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}

/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model tbFornecedores
 * 
 */
export type tbFornecedores = {
  idfor: number
  nomefor: string | null
  fisjur: string | null
  cnpjcpf: string | null
  telefone: string | null
  cep: string | null
  cidade: string | null
  rua: string | null
  bairro: string | null
  numero: number | null
  complemento: string | null
  email: string | null
}

/**
 * Model tbProdutos
 * 
 */
export type tbProdutos = {
  idproduto: number
  idtipprod: number | null
  idunidade: number | null
  nomeprod: string | null
  quantminima: number | null
}

/**
 * Model tbTiposProdutos
 * 
 */
export type tbTiposProdutos = {
  idtipprod: number
  nometipprod: string | null
}

/**
 * Model tbUnidadeMedida
 * 
 */
export type tbUnidadeMedida = {
  idunidade: number
  siglaun: string | null
  nomeunidade: string | null
}

/**
 * Model tbEstoque
 * 
 */
export type tbEstoque = {
  idestoque: number
  idmovimento: number
  seqitem: number
  idlocal: number | null
  idproduto: number | null
  quantidade: number | null
  dtinc: Date | null
}

/**
 * Model tbLocais
 * 
 */
export type tbLocais = {
  idlocal: number
  nomelocal: string | null
}

/**
 * Model tbMovItens
 * 
 */
export type tbMovItens = {
  idmovimento: number
  seqitem: number
  idproduto: number
  idlocal: number | null
  dtinc: Date | null
  quantidade: number | null
}

/**
 * Model tbMovimentos
 * 
 */
export type tbMovimentos = {
  idmovimento: number
  tipmov: string | null
  idfor: number | null
  idusuario_alteracao: number | null
  dtinc: Date | null
}

/**
 * Model tbNF
 * 
 */
export type tbNF = {
  idnf: number
  numnf: number | null
  idmovimento: number
  serienf: number | null
  idfor: number | null
  idusuario_inclusao: number | null
  dtemissao: Date | null
  vlrtotal: number | null
}

/**
 * Model tbNFItens
 * 
 */
export type tbNFItens = {
  idnf: number
  idmovimento: number
  seqitem: number
  idproduto: number
  vlrunitario: number | null
  quantidade: number | null
  vlrtotitem: number | null
}

/**
 * Model tbProdComposicao
 * 
 */
export type tbProdComposicao = {
  idcomp: number
  idproduto: number
  idprodutocomp: number
  quantidade: number | null
}

/**
 * Model tbUsuarios
 * 
 */
export type tbUsuarios = {
  idusuario: number
  usu_login: string | null
  nome: string | null
  senha: string | null
  dtcriacao: Date | null
  usu_admin: boolean | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TbFornecedores
 * const tbFornecedores = await prisma.tbFornecedores.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TbFornecedores
   * const tbFornecedores = await prisma.tbFornecedores.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.tbFornecedores`: Exposes CRUD operations for the **tbFornecedores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbFornecedores
    * const tbFornecedores = await prisma.tbFornecedores.findMany()
    * ```
    */
  get tbFornecedores(): Prisma.tbFornecedoresDelegate<GlobalReject>;

  /**
   * `prisma.tbProdutos`: Exposes CRUD operations for the **tbProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbProdutos
    * const tbProdutos = await prisma.tbProdutos.findMany()
    * ```
    */
  get tbProdutos(): Prisma.tbProdutosDelegate<GlobalReject>;

  /**
   * `prisma.tbTiposProdutos`: Exposes CRUD operations for the **tbTiposProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbTiposProdutos
    * const tbTiposProdutos = await prisma.tbTiposProdutos.findMany()
    * ```
    */
  get tbTiposProdutos(): Prisma.tbTiposProdutosDelegate<GlobalReject>;

  /**
   * `prisma.tbUnidadeMedida`: Exposes CRUD operations for the **tbUnidadeMedida** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbUnidadeMedidas
    * const tbUnidadeMedidas = await prisma.tbUnidadeMedida.findMany()
    * ```
    */
  get tbUnidadeMedida(): Prisma.tbUnidadeMedidaDelegate<GlobalReject>;

  /**
   * `prisma.tbEstoque`: Exposes CRUD operations for the **tbEstoque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbEstoques
    * const tbEstoques = await prisma.tbEstoque.findMany()
    * ```
    */
  get tbEstoque(): Prisma.tbEstoqueDelegate<GlobalReject>;

  /**
   * `prisma.tbLocais`: Exposes CRUD operations for the **tbLocais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbLocais
    * const tbLocais = await prisma.tbLocais.findMany()
    * ```
    */
  get tbLocais(): Prisma.tbLocaisDelegate<GlobalReject>;

  /**
   * `prisma.tbMovItens`: Exposes CRUD operations for the **tbMovItens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbMovItens
    * const tbMovItens = await prisma.tbMovItens.findMany()
    * ```
    */
  get tbMovItens(): Prisma.tbMovItensDelegate<GlobalReject>;

  /**
   * `prisma.tbMovimentos`: Exposes CRUD operations for the **tbMovimentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbMovimentos
    * const tbMovimentos = await prisma.tbMovimentos.findMany()
    * ```
    */
  get tbMovimentos(): Prisma.tbMovimentosDelegate<GlobalReject>;

  /**
   * `prisma.tbNF`: Exposes CRUD operations for the **tbNF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbNFS
    * const tbNFS = await prisma.tbNF.findMany()
    * ```
    */
  get tbNF(): Prisma.tbNFDelegate<GlobalReject>;

  /**
   * `prisma.tbNFItens`: Exposes CRUD operations for the **tbNFItens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbNFItens
    * const tbNFItens = await prisma.tbNFItens.findMany()
    * ```
    */
  get tbNFItens(): Prisma.tbNFItensDelegate<GlobalReject>;

  /**
   * `prisma.tbProdComposicao`: Exposes CRUD operations for the **tbProdComposicao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbProdComposicaos
    * const tbProdComposicaos = await prisma.tbProdComposicao.findMany()
    * ```
    */
  get tbProdComposicao(): Prisma.tbProdComposicaoDelegate<GlobalReject>;

  /**
   * `prisma.tbUsuarios`: Exposes CRUD operations for the **tbUsuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbUsuarios
    * const tbUsuarios = await prisma.tbUsuarios.findMany()
    * ```
    */
  get tbUsuarios(): Prisma.tbUsuariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    tbFornecedores: 'tbFornecedores',
    tbProdutos: 'tbProdutos',
    tbTiposProdutos: 'tbTiposProdutos',
    tbUnidadeMedida: 'tbUnidadeMedida',
    tbEstoque: 'tbEstoque',
    tbLocais: 'tbLocais',
    tbMovItens: 'tbMovItens',
    tbMovimentos: 'tbMovimentos',
    tbNF: 'tbNF',
    tbNFItens: 'tbNFItens',
    tbProdComposicao: 'tbProdComposicao',
    tbUsuarios: 'tbUsuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TbFornecedoresCountOutputType
   */


  export type TbFornecedoresCountOutputType = {
    tbMovimentos: number
    tbNF: number
  }

  export type TbFornecedoresCountOutputTypeSelect = {
    tbMovimentos?: boolean
    tbNF?: boolean
  }

  export type TbFornecedoresCountOutputTypeGetPayload<S extends boolean | null | undefined | TbFornecedoresCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbFornecedoresCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbFornecedoresCountOutputTypeArgs)
    ? TbFornecedoresCountOutputType 
    : S extends { select: any } & (TbFornecedoresCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbFornecedoresCountOutputType ? TbFornecedoresCountOutputType[P] : never
  } 
      : TbFornecedoresCountOutputType




  // Custom InputTypes

  /**
   * TbFornecedoresCountOutputType without action
   */
  export type TbFornecedoresCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbFornecedoresCountOutputType
     */
    select?: TbFornecedoresCountOutputTypeSelect | null
  }



  /**
   * Count Type TbProdutosCountOutputType
   */


  export type TbProdutosCountOutputType = {
    tbEstoque: number
    tbMovItens: number
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos: number
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos: number
  }

  export type TbProdutosCountOutputTypeSelect = {
    tbEstoque?: boolean
    tbMovItens?: boolean
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: boolean
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: boolean
  }

  export type TbProdutosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbProdutosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbProdutosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbProdutosCountOutputTypeArgs)
    ? TbProdutosCountOutputType 
    : S extends { select: any } & (TbProdutosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbProdutosCountOutputType ? TbProdutosCountOutputType[P] : never
  } 
      : TbProdutosCountOutputType




  // Custom InputTypes

  /**
   * TbProdutosCountOutputType without action
   */
  export type TbProdutosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbProdutosCountOutputType
     */
    select?: TbProdutosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbTiposProdutosCountOutputType
   */


  export type TbTiposProdutosCountOutputType = {
    tbProdutos: number
  }

  export type TbTiposProdutosCountOutputTypeSelect = {
    tbProdutos?: boolean
  }

  export type TbTiposProdutosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbTiposProdutosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbTiposProdutosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbTiposProdutosCountOutputTypeArgs)
    ? TbTiposProdutosCountOutputType 
    : S extends { select: any } & (TbTiposProdutosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbTiposProdutosCountOutputType ? TbTiposProdutosCountOutputType[P] : never
  } 
      : TbTiposProdutosCountOutputType




  // Custom InputTypes

  /**
   * TbTiposProdutosCountOutputType without action
   */
  export type TbTiposProdutosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbTiposProdutosCountOutputType
     */
    select?: TbTiposProdutosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbUnidadeMedidaCountOutputType
   */


  export type TbUnidadeMedidaCountOutputType = {
    tbProdutos: number
  }

  export type TbUnidadeMedidaCountOutputTypeSelect = {
    tbProdutos?: boolean
  }

  export type TbUnidadeMedidaCountOutputTypeGetPayload<S extends boolean | null | undefined | TbUnidadeMedidaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbUnidadeMedidaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbUnidadeMedidaCountOutputTypeArgs)
    ? TbUnidadeMedidaCountOutputType 
    : S extends { select: any } & (TbUnidadeMedidaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbUnidadeMedidaCountOutputType ? TbUnidadeMedidaCountOutputType[P] : never
  } 
      : TbUnidadeMedidaCountOutputType




  // Custom InputTypes

  /**
   * TbUnidadeMedidaCountOutputType without action
   */
  export type TbUnidadeMedidaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbUnidadeMedidaCountOutputType
     */
    select?: TbUnidadeMedidaCountOutputTypeSelect | null
  }



  /**
   * Count Type TbLocaisCountOutputType
   */


  export type TbLocaisCountOutputType = {
    tbEstoque: number
    tbMovItens: number
  }

  export type TbLocaisCountOutputTypeSelect = {
    tbEstoque?: boolean
    tbMovItens?: boolean
  }

  export type TbLocaisCountOutputTypeGetPayload<S extends boolean | null | undefined | TbLocaisCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbLocaisCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbLocaisCountOutputTypeArgs)
    ? TbLocaisCountOutputType 
    : S extends { select: any } & (TbLocaisCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbLocaisCountOutputType ? TbLocaisCountOutputType[P] : never
  } 
      : TbLocaisCountOutputType




  // Custom InputTypes

  /**
   * TbLocaisCountOutputType without action
   */
  export type TbLocaisCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbLocaisCountOutputType
     */
    select?: TbLocaisCountOutputTypeSelect | null
  }



  /**
   * Count Type TbMovItensCountOutputType
   */


  export type TbMovItensCountOutputType = {
    tbEstoque: number
    tbNFItens: number
  }

  export type TbMovItensCountOutputTypeSelect = {
    tbEstoque?: boolean
    tbNFItens?: boolean
  }

  export type TbMovItensCountOutputTypeGetPayload<S extends boolean | null | undefined | TbMovItensCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbMovItensCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbMovItensCountOutputTypeArgs)
    ? TbMovItensCountOutputType 
    : S extends { select: any } & (TbMovItensCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbMovItensCountOutputType ? TbMovItensCountOutputType[P] : never
  } 
      : TbMovItensCountOutputType




  // Custom InputTypes

  /**
   * TbMovItensCountOutputType without action
   */
  export type TbMovItensCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbMovItensCountOutputType
     */
    select?: TbMovItensCountOutputTypeSelect | null
  }



  /**
   * Count Type TbMovimentosCountOutputType
   */


  export type TbMovimentosCountOutputType = {
    tbEstoque: number
    tbMovItens: number
    tbNF: number
  }

  export type TbMovimentosCountOutputTypeSelect = {
    tbEstoque?: boolean
    tbMovItens?: boolean
    tbNF?: boolean
  }

  export type TbMovimentosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbMovimentosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbMovimentosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbMovimentosCountOutputTypeArgs)
    ? TbMovimentosCountOutputType 
    : S extends { select: any } & (TbMovimentosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbMovimentosCountOutputType ? TbMovimentosCountOutputType[P] : never
  } 
      : TbMovimentosCountOutputType




  // Custom InputTypes

  /**
   * TbMovimentosCountOutputType without action
   */
  export type TbMovimentosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbMovimentosCountOutputType
     */
    select?: TbMovimentosCountOutputTypeSelect | null
  }



  /**
   * Count Type TbNFCountOutputType
   */


  export type TbNFCountOutputType = {
    tbNFItens: number
  }

  export type TbNFCountOutputTypeSelect = {
    tbNFItens?: boolean
  }

  export type TbNFCountOutputTypeGetPayload<S extends boolean | null | undefined | TbNFCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbNFCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbNFCountOutputTypeArgs)
    ? TbNFCountOutputType 
    : S extends { select: any } & (TbNFCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbNFCountOutputType ? TbNFCountOutputType[P] : never
  } 
      : TbNFCountOutputType




  // Custom InputTypes

  /**
   * TbNFCountOutputType without action
   */
  export type TbNFCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbNFCountOutputType
     */
    select?: TbNFCountOutputTypeSelect | null
  }



  /**
   * Count Type TbUsuariosCountOutputType
   */


  export type TbUsuariosCountOutputType = {
    tbMovimentos: number
    tbNF: number
  }

  export type TbUsuariosCountOutputTypeSelect = {
    tbMovimentos?: boolean
    tbNF?: boolean
  }

  export type TbUsuariosCountOutputTypeGetPayload<S extends boolean | null | undefined | TbUsuariosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TbUsuariosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TbUsuariosCountOutputTypeArgs)
    ? TbUsuariosCountOutputType 
    : S extends { select: any } & (TbUsuariosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TbUsuariosCountOutputType ? TbUsuariosCountOutputType[P] : never
  } 
      : TbUsuariosCountOutputType




  // Custom InputTypes

  /**
   * TbUsuariosCountOutputType without action
   */
  export type TbUsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TbUsuariosCountOutputType
     */
    select?: TbUsuariosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model tbFornecedores
   */


  export type AggregateTbFornecedores = {
    _count: TbFornecedoresCountAggregateOutputType | null
    _avg: TbFornecedoresAvgAggregateOutputType | null
    _sum: TbFornecedoresSumAggregateOutputType | null
    _min: TbFornecedoresMinAggregateOutputType | null
    _max: TbFornecedoresMaxAggregateOutputType | null
  }

  export type TbFornecedoresAvgAggregateOutputType = {
    idfor: number | null
    numero: number | null
  }

  export type TbFornecedoresSumAggregateOutputType = {
    idfor: number | null
    numero: number | null
  }

  export type TbFornecedoresMinAggregateOutputType = {
    idfor: number | null
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
  }

  export type TbFornecedoresMaxAggregateOutputType = {
    idfor: number | null
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
  }

  export type TbFornecedoresCountAggregateOutputType = {
    idfor: number
    nomefor: number
    fisjur: number
    cnpjcpf: number
    telefone: number
    cep: number
    cidade: number
    rua: number
    bairro: number
    numero: number
    complemento: number
    email: number
    _all: number
  }


  export type TbFornecedoresAvgAggregateInputType = {
    idfor?: true
    numero?: true
  }

  export type TbFornecedoresSumAggregateInputType = {
    idfor?: true
    numero?: true
  }

  export type TbFornecedoresMinAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
  }

  export type TbFornecedoresMaxAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
  }

  export type TbFornecedoresCountAggregateInputType = {
    idfor?: true
    nomefor?: true
    fisjur?: true
    cnpjcpf?: true
    telefone?: true
    cep?: true
    cidade?: true
    rua?: true
    bairro?: true
    numero?: true
    complemento?: true
    email?: true
    _all?: true
  }

  export type TbFornecedoresAggregateArgs = {
    /**
     * Filter which tbFornecedores to aggregate.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbFornecedores
    **/
    _count?: true | TbFornecedoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbFornecedoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbFornecedoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbFornecedoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbFornecedoresMaxAggregateInputType
  }

  export type GetTbFornecedoresAggregateType<T extends TbFornecedoresAggregateArgs> = {
        [P in keyof T & keyof AggregateTbFornecedores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbFornecedores[P]>
      : GetScalarType<T[P], AggregateTbFornecedores[P]>
  }




  export type TbFornecedoresGroupByArgs = {
    where?: tbFornecedoresWhereInput
    orderBy?: Enumerable<tbFornecedoresOrderByWithAggregationInput>
    by: TbFornecedoresScalarFieldEnum[]
    having?: tbFornecedoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbFornecedoresCountAggregateInputType | true
    _avg?: TbFornecedoresAvgAggregateInputType
    _sum?: TbFornecedoresSumAggregateInputType
    _min?: TbFornecedoresMinAggregateInputType
    _max?: TbFornecedoresMaxAggregateInputType
  }


  export type TbFornecedoresGroupByOutputType = {
    idfor: number
    nomefor: string | null
    fisjur: string | null
    cnpjcpf: string | null
    telefone: string | null
    cep: string | null
    cidade: string | null
    rua: string | null
    bairro: string | null
    numero: number | null
    complemento: string | null
    email: string | null
    _count: TbFornecedoresCountAggregateOutputType | null
    _avg: TbFornecedoresAvgAggregateOutputType | null
    _sum: TbFornecedoresSumAggregateOutputType | null
    _min: TbFornecedoresMinAggregateOutputType | null
    _max: TbFornecedoresMaxAggregateOutputType | null
  }

  type GetTbFornecedoresGroupByPayload<T extends TbFornecedoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbFornecedoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbFornecedoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbFornecedoresGroupByOutputType[P]>
            : GetScalarType<T[P], TbFornecedoresGroupByOutputType[P]>
        }
      >
    >


  export type tbFornecedoresSelect = {
    idfor?: boolean
    nomefor?: boolean
    fisjur?: boolean
    cnpjcpf?: boolean
    telefone?: boolean
    cep?: boolean
    cidade?: boolean
    rua?: boolean
    bairro?: boolean
    numero?: boolean
    complemento?: boolean
    email?: boolean
    tbMovimentos?: boolean | tbFornecedores$tbMovimentosArgs
    tbNF?: boolean | tbFornecedores$tbNFArgs
    _count?: boolean | TbFornecedoresCountOutputTypeArgs
  }


  export type tbFornecedoresInclude = {
    tbMovimentos?: boolean | tbFornecedores$tbMovimentosArgs
    tbNF?: boolean | tbFornecedores$tbNFArgs
    _count?: boolean | TbFornecedoresCountOutputTypeArgs
  }

  export type tbFornecedoresGetPayload<S extends boolean | null | undefined | tbFornecedoresArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbFornecedores :
    S extends undefined ? never :
    S extends { include: any } & (tbFornecedoresArgs | tbFornecedoresFindManyArgs)
    ? tbFornecedores  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbMovimentos' ? Array < tbMovimentosGetPayload<S['include'][P]>>  :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbFornecedoresCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbFornecedoresArgs | tbFornecedoresFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbMovimentos' ? Array < tbMovimentosGetPayload<S['select'][P]>>  :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbFornecedoresCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbFornecedores ? tbFornecedores[P] : never
  } 
      : tbFornecedores


  type tbFornecedoresCountArgs = 
    Omit<tbFornecedoresFindManyArgs, 'select' | 'include'> & {
      select?: TbFornecedoresCountAggregateInputType | true
    }

  export interface tbFornecedoresDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbFornecedores that matches the filter.
     * @param {tbFornecedoresFindUniqueArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbFornecedoresFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbFornecedoresFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbFornecedores'> extends True ? Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>> : Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | null, null>

    /**
     * Find one TbFornecedores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbFornecedoresFindUniqueOrThrowArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbFornecedoresFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbFornecedoresFindUniqueOrThrowArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Find the first TbFornecedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindFirstArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbFornecedoresFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbFornecedoresFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbFornecedores'> extends True ? Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>> : Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | null, null>

    /**
     * Find the first TbFornecedores that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindFirstOrThrowArgs} args - Arguments to find a TbFornecedores
     * @example
     * // Get one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbFornecedoresFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbFornecedoresFindFirstOrThrowArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Find zero or more TbFornecedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findMany()
     * 
     * // Get first 10 TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.findMany({ take: 10 })
     * 
     * // Only select the `idfor`
     * const tbFornecedoresWithIdforOnly = await prisma.tbFornecedores.findMany({ select: { idfor: true } })
     * 
    **/
    findMany<T extends tbFornecedoresFindManyArgs>(
      args?: SelectSubset<T, tbFornecedoresFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbFornecedoresGetPayload<T>>>

    /**
     * Create a TbFornecedores.
     * @param {tbFornecedoresCreateArgs} args - Arguments to create a TbFornecedores.
     * @example
     * // Create one TbFornecedores
     * const TbFornecedores = await prisma.tbFornecedores.create({
     *   data: {
     *     // ... data to create a TbFornecedores
     *   }
     * })
     * 
    **/
    create<T extends tbFornecedoresCreateArgs>(
      args: SelectSubset<T, tbFornecedoresCreateArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Create many TbFornecedores.
     *     @param {tbFornecedoresCreateManyArgs} args - Arguments to create many TbFornecedores.
     *     @example
     *     // Create many TbFornecedores
     *     const tbFornecedores = await prisma.tbFornecedores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbFornecedoresCreateManyArgs>(
      args?: SelectSubset<T, tbFornecedoresCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbFornecedores.
     * @param {tbFornecedoresDeleteArgs} args - Arguments to delete one TbFornecedores.
     * @example
     * // Delete one TbFornecedores
     * const TbFornecedores = await prisma.tbFornecedores.delete({
     *   where: {
     *     // ... filter to delete one TbFornecedores
     *   }
     * })
     * 
    **/
    delete<T extends tbFornecedoresDeleteArgs>(
      args: SelectSubset<T, tbFornecedoresDeleteArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Update one TbFornecedores.
     * @param {tbFornecedoresUpdateArgs} args - Arguments to update one TbFornecedores.
     * @example
     * // Update one TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbFornecedoresUpdateArgs>(
      args: SelectSubset<T, tbFornecedoresUpdateArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Delete zero or more TbFornecedores.
     * @param {tbFornecedoresDeleteManyArgs} args - Arguments to filter TbFornecedores to delete.
     * @example
     * // Delete a few TbFornecedores
     * const { count } = await prisma.tbFornecedores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbFornecedoresDeleteManyArgs>(
      args?: SelectSubset<T, tbFornecedoresDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbFornecedoresUpdateManyArgs>(
      args: SelectSubset<T, tbFornecedoresUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbFornecedores.
     * @param {tbFornecedoresUpsertArgs} args - Arguments to update or create a TbFornecedores.
     * @example
     * // Update or create a TbFornecedores
     * const tbFornecedores = await prisma.tbFornecedores.upsert({
     *   create: {
     *     // ... data to create a TbFornecedores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbFornecedores we want to update
     *   }
     * })
    **/
    upsert<T extends tbFornecedoresUpsertArgs>(
      args: SelectSubset<T, tbFornecedoresUpsertArgs>
    ): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T>>

    /**
     * Count the number of TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbFornecedoresCountArgs} args - Arguments to filter TbFornecedores to count.
     * @example
     * // Count the number of TbFornecedores
     * const count = await prisma.tbFornecedores.count({
     *   where: {
     *     // ... the filter for the TbFornecedores we want to count
     *   }
     * })
    **/
    count<T extends tbFornecedoresCountArgs>(
      args?: Subset<T, tbFornecedoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbFornecedoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbFornecedoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbFornecedoresAggregateArgs>(args: Subset<T, TbFornecedoresAggregateArgs>): Prisma.PrismaPromise<GetTbFornecedoresAggregateType<T>>

    /**
     * Group by TbFornecedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbFornecedoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbFornecedoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbFornecedoresGroupByArgs['orderBy'] }
        : { orderBy?: TbFornecedoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbFornecedoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbFornecedoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbFornecedores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbFornecedoresClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbMovimentos<T extends tbFornecedores$tbMovimentosArgs= {}>(args?: Subset<T, tbFornecedores$tbMovimentosArgs>): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>| Null>;

    tbNF<T extends tbFornecedores$tbNFArgs= {}>(args?: Subset<T, tbFornecedores$tbNFArgs>): Prisma.PrismaPromise<Array<tbNFGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbFornecedores base type for findUnique actions
   */
  export type tbFornecedoresFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where: tbFornecedoresWhereUniqueInput
  }

  /**
   * tbFornecedores findUnique
   */
  export interface tbFornecedoresFindUniqueArgs extends tbFornecedoresFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbFornecedores findUniqueOrThrow
   */
  export type tbFornecedoresFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores base type for findFirst actions
   */
  export type tbFornecedoresFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbFornecedores.
     */
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }

  /**
   * tbFornecedores findFirst
   */
  export interface tbFornecedoresFindFirstArgs extends tbFornecedoresFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbFornecedores findFirstOrThrow
   */
  export type tbFornecedoresFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbFornecedores.
     */
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }


  /**
   * tbFornecedores findMany
   */
  export type tbFornecedoresFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter, which tbFornecedores to fetch.
     */
    where?: tbFornecedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbFornecedores to fetch.
     */
    orderBy?: Enumerable<tbFornecedoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbFornecedores.
     */
    cursor?: tbFornecedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbFornecedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbFornecedores.
     */
    skip?: number
    distinct?: Enumerable<TbFornecedoresScalarFieldEnum>
  }


  /**
   * tbFornecedores create
   */
  export type tbFornecedoresCreateArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The data needed to create a tbFornecedores.
     */
    data: XOR<tbFornecedoresCreateInput, tbFornecedoresUncheckedCreateInput>
  }


  /**
   * tbFornecedores createMany
   */
  export type tbFornecedoresCreateManyArgs = {
    /**
     * The data used to create many tbFornecedores.
     */
    data: Enumerable<tbFornecedoresCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbFornecedores update
   */
  export type tbFornecedoresUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The data needed to update a tbFornecedores.
     */
    data: XOR<tbFornecedoresUpdateInput, tbFornecedoresUncheckedUpdateInput>
    /**
     * Choose, which tbFornecedores to update.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores updateMany
   */
  export type tbFornecedoresUpdateManyArgs = {
    /**
     * The data used to update tbFornecedores.
     */
    data: XOR<tbFornecedoresUpdateManyMutationInput, tbFornecedoresUncheckedUpdateManyInput>
    /**
     * Filter which tbFornecedores to update
     */
    where?: tbFornecedoresWhereInput
  }


  /**
   * tbFornecedores upsert
   */
  export type tbFornecedoresUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * The filter to search for the tbFornecedores to update in case it exists.
     */
    where: tbFornecedoresWhereUniqueInput
    /**
     * In case the tbFornecedores found by the `where` argument doesn't exist, create a new tbFornecedores with this data.
     */
    create: XOR<tbFornecedoresCreateInput, tbFornecedoresUncheckedCreateInput>
    /**
     * In case the tbFornecedores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbFornecedoresUpdateInput, tbFornecedoresUncheckedUpdateInput>
  }


  /**
   * tbFornecedores delete
   */
  export type tbFornecedoresDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
    /**
     * Filter which tbFornecedores to delete.
     */
    where: tbFornecedoresWhereUniqueInput
  }


  /**
   * tbFornecedores deleteMany
   */
  export type tbFornecedoresDeleteManyArgs = {
    /**
     * Filter which tbFornecedores to delete
     */
    where?: tbFornecedoresWhereInput
  }


  /**
   * tbFornecedores.tbMovimentos
   */
  export type tbFornecedores$tbMovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    cursor?: tbMovimentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbFornecedores.tbNF
   */
  export type tbFornecedores$tbNFArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    where?: tbNFWhereInput
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    cursor?: tbNFWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }


  /**
   * tbFornecedores without action
   */
  export type tbFornecedoresArgs = {
    /**
     * Select specific fields to fetch from the tbFornecedores
     */
    select?: tbFornecedoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbFornecedoresInclude | null
  }



  /**
   * Model tbProdutos
   */


  export type AggregateTbProdutos = {
    _count: TbProdutosCountAggregateOutputType | null
    _avg: TbProdutosAvgAggregateOutputType | null
    _sum: TbProdutosSumAggregateOutputType | null
    _min: TbProdutosMinAggregateOutputType | null
    _max: TbProdutosMaxAggregateOutputType | null
  }

  export type TbProdutosAvgAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosSumAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    quantminima: number | null
  }

  export type TbProdutosMinAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    nomeprod: string | null
    quantminima: number | null
  }

  export type TbProdutosMaxAggregateOutputType = {
    idproduto: number | null
    idtipprod: number | null
    idunidade: number | null
    nomeprod: string | null
    quantminima: number | null
  }

  export type TbProdutosCountAggregateOutputType = {
    idproduto: number
    idtipprod: number
    idunidade: number
    nomeprod: number
    quantminima: number
    _all: number
  }


  export type TbProdutosAvgAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosSumAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    quantminima?: true
  }

  export type TbProdutosMinAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    nomeprod?: true
    quantminima?: true
  }

  export type TbProdutosMaxAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    nomeprod?: true
    quantminima?: true
  }

  export type TbProdutosCountAggregateInputType = {
    idproduto?: true
    idtipprod?: true
    idunidade?: true
    nomeprod?: true
    quantminima?: true
    _all?: true
  }

  export type TbProdutosAggregateArgs = {
    /**
     * Filter which tbProdutos to aggregate.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbProdutos
    **/
    _count?: true | TbProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbProdutosMaxAggregateInputType
  }

  export type GetTbProdutosAggregateType<T extends TbProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbProdutos[P]>
      : GetScalarType<T[P], AggregateTbProdutos[P]>
  }




  export type TbProdutosGroupByArgs = {
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithAggregationInput>
    by: TbProdutosScalarFieldEnum[]
    having?: tbProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbProdutosCountAggregateInputType | true
    _avg?: TbProdutosAvgAggregateInputType
    _sum?: TbProdutosSumAggregateInputType
    _min?: TbProdutosMinAggregateInputType
    _max?: TbProdutosMaxAggregateInputType
  }


  export type TbProdutosGroupByOutputType = {
    idproduto: number
    idtipprod: number | null
    idunidade: number | null
    nomeprod: string | null
    quantminima: number | null
    _count: TbProdutosCountAggregateOutputType | null
    _avg: TbProdutosAvgAggregateOutputType | null
    _sum: TbProdutosSumAggregateOutputType | null
    _min: TbProdutosMinAggregateOutputType | null
    _max: TbProdutosMaxAggregateOutputType | null
  }

  type GetTbProdutosGroupByPayload<T extends TbProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], TbProdutosGroupByOutputType[P]>
        }
      >
    >


  export type tbProdutosSelect = {
    idproduto?: boolean
    idtipprod?: boolean
    idunidade?: boolean
    nomeprod?: boolean
    quantminima?: boolean
    tbEstoque?: boolean | tbProdutos$tbEstoqueArgs
    tbMovItens?: boolean | tbProdutos$tbMovItensArgs
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: boolean | tbProdutos$tbProdComposicao_tbProdComposicao_idprodutoTotbProdutosArgs
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: boolean | tbProdutos$tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosArgs
    tbTiposProdutos?: boolean | tbTiposProdutosArgs
    tbUnidadeMedida?: boolean | tbUnidadeMedidaArgs
    _count?: boolean | TbProdutosCountOutputTypeArgs
  }


  export type tbProdutosInclude = {
    tbEstoque?: boolean | tbProdutos$tbEstoqueArgs
    tbMovItens?: boolean | tbProdutos$tbMovItensArgs
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: boolean | tbProdutos$tbProdComposicao_tbProdComposicao_idprodutoTotbProdutosArgs
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: boolean | tbProdutos$tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosArgs
    tbTiposProdutos?: boolean | tbTiposProdutosArgs
    tbUnidadeMedida?: boolean | tbUnidadeMedidaArgs
    _count?: boolean | TbProdutosCountOutputTypeArgs
  }

  export type tbProdutosGetPayload<S extends boolean | null | undefined | tbProdutosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbProdutos :
    S extends undefined ? never :
    S extends { include: any } & (tbProdutosArgs | tbProdutosFindManyArgs)
    ? tbProdutos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['include'][P]>>  :
        P extends 'tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos' ? Array < tbProdComposicaoGetPayload<S['include'][P]>>  :
        P extends 'tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos' ? Array < tbProdComposicaoGetPayload<S['include'][P]>>  :
        P extends 'tbTiposProdutos' ? tbTiposProdutosGetPayload<S['include'][P]> | null :
        P extends 'tbUnidadeMedida' ? tbUnidadeMedidaGetPayload<S['include'][P]> | null :
        P extends '_count' ? TbProdutosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbProdutosArgs | tbProdutosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['select'][P]>>  :
        P extends 'tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos' ? Array < tbProdComposicaoGetPayload<S['select'][P]>>  :
        P extends 'tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos' ? Array < tbProdComposicaoGetPayload<S['select'][P]>>  :
        P extends 'tbTiposProdutos' ? tbTiposProdutosGetPayload<S['select'][P]> | null :
        P extends 'tbUnidadeMedida' ? tbUnidadeMedidaGetPayload<S['select'][P]> | null :
        P extends '_count' ? TbProdutosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbProdutos ? tbProdutos[P] : never
  } 
      : tbProdutos


  type tbProdutosCountArgs = 
    Omit<tbProdutosFindManyArgs, 'select' | 'include'> & {
      select?: TbProdutosCountAggregateInputType | true
    }

  export interface tbProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbProdutos that matches the filter.
     * @param {tbProdutosFindUniqueArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbProdutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbProdutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbProdutos'> extends True ? Prisma__tbProdutosClient<tbProdutosGetPayload<T>> : Prisma__tbProdutosClient<tbProdutosGetPayload<T> | null, null>

    /**
     * Find one TbProdutos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbProdutosFindUniqueOrThrowArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbProdutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbProdutosFindUniqueOrThrowArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Find the first TbProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindFirstArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbProdutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbProdutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbProdutos'> extends True ? Prisma__tbProdutosClient<tbProdutosGetPayload<T>> : Prisma__tbProdutosClient<tbProdutosGetPayload<T> | null, null>

    /**
     * Find the first TbProdutos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindFirstOrThrowArgs} args - Arguments to find a TbProdutos
     * @example
     * // Get one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbProdutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbProdutosFindFirstOrThrowArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Find zero or more TbProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findMany()
     * 
     * // Get first 10 TbProdutos
     * const tbProdutos = await prisma.tbProdutos.findMany({ take: 10 })
     * 
     * // Only select the `idproduto`
     * const tbProdutosWithIdprodutoOnly = await prisma.tbProdutos.findMany({ select: { idproduto: true } })
     * 
    **/
    findMany<T extends tbProdutosFindManyArgs>(
      args?: SelectSubset<T, tbProdutosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>>

    /**
     * Create a TbProdutos.
     * @param {tbProdutosCreateArgs} args - Arguments to create a TbProdutos.
     * @example
     * // Create one TbProdutos
     * const TbProdutos = await prisma.tbProdutos.create({
     *   data: {
     *     // ... data to create a TbProdutos
     *   }
     * })
     * 
    **/
    create<T extends tbProdutosCreateArgs>(
      args: SelectSubset<T, tbProdutosCreateArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Create many TbProdutos.
     *     @param {tbProdutosCreateManyArgs} args - Arguments to create many TbProdutos.
     *     @example
     *     // Create many TbProdutos
     *     const tbProdutos = await prisma.tbProdutos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbProdutosCreateManyArgs>(
      args?: SelectSubset<T, tbProdutosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbProdutos.
     * @param {tbProdutosDeleteArgs} args - Arguments to delete one TbProdutos.
     * @example
     * // Delete one TbProdutos
     * const TbProdutos = await prisma.tbProdutos.delete({
     *   where: {
     *     // ... filter to delete one TbProdutos
     *   }
     * })
     * 
    **/
    delete<T extends tbProdutosDeleteArgs>(
      args: SelectSubset<T, tbProdutosDeleteArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Update one TbProdutos.
     * @param {tbProdutosUpdateArgs} args - Arguments to update one TbProdutos.
     * @example
     * // Update one TbProdutos
     * const tbProdutos = await prisma.tbProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbProdutosUpdateArgs>(
      args: SelectSubset<T, tbProdutosUpdateArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Delete zero or more TbProdutos.
     * @param {tbProdutosDeleteManyArgs} args - Arguments to filter TbProdutos to delete.
     * @example
     * // Delete a few TbProdutos
     * const { count } = await prisma.tbProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbProdutosDeleteManyArgs>(
      args?: SelectSubset<T, tbProdutosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbProdutos
     * const tbProdutos = await prisma.tbProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbProdutosUpdateManyArgs>(
      args: SelectSubset<T, tbProdutosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbProdutos.
     * @param {tbProdutosUpsertArgs} args - Arguments to update or create a TbProdutos.
     * @example
     * // Update or create a TbProdutos
     * const tbProdutos = await prisma.tbProdutos.upsert({
     *   create: {
     *     // ... data to create a TbProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbProdutos we want to update
     *   }
     * })
    **/
    upsert<T extends tbProdutosUpsertArgs>(
      args: SelectSubset<T, tbProdutosUpsertArgs>
    ): Prisma__tbProdutosClient<tbProdutosGetPayload<T>>

    /**
     * Count the number of TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdutosCountArgs} args - Arguments to filter TbProdutos to count.
     * @example
     * // Count the number of TbProdutos
     * const count = await prisma.tbProdutos.count({
     *   where: {
     *     // ... the filter for the TbProdutos we want to count
     *   }
     * })
    **/
    count<T extends tbProdutosCountArgs>(
      args?: Subset<T, tbProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbProdutosAggregateArgs>(args: Subset<T, TbProdutosAggregateArgs>): Prisma.PrismaPromise<GetTbProdutosAggregateType<T>>

    /**
     * Group by TbProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbProdutosGroupByArgs['orderBy'] }
        : { orderBy?: TbProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbProdutosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbEstoque<T extends tbProdutos$tbEstoqueArgs= {}>(args?: Subset<T, tbProdutos$tbEstoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbMovItens<T extends tbProdutos$tbMovItensArgs= {}>(args?: Subset<T, tbProdutos$tbMovItensArgs>): Prisma.PrismaPromise<Array<tbMovItensGetPayload<T>>| Null>;

    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos<T extends tbProdutos$tbProdComposicao_tbProdComposicao_idprodutoTotbProdutosArgs= {}>(args?: Subset<T, tbProdutos$tbProdComposicao_tbProdComposicao_idprodutoTotbProdutosArgs>): Prisma.PrismaPromise<Array<tbProdComposicaoGetPayload<T>>| Null>;

    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos<T extends tbProdutos$tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosArgs= {}>(args?: Subset<T, tbProdutos$tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosArgs>): Prisma.PrismaPromise<Array<tbProdComposicaoGetPayload<T>>| Null>;

    tbTiposProdutos<T extends tbTiposProdutosArgs= {}>(args?: Subset<T, tbTiposProdutosArgs>): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T> | Null>;

    tbUnidadeMedida<T extends tbUnidadeMedidaArgs= {}>(args?: Subset<T, tbUnidadeMedidaArgs>): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbProdutos base type for findUnique actions
   */
  export type tbProdutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where: tbProdutosWhereUniqueInput
  }

  /**
   * tbProdutos findUnique
   */
  export interface tbProdutosFindUniqueArgs extends tbProdutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdutos findUniqueOrThrow
   */
  export type tbProdutosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos base type for findFirst actions
   */
  export type tbProdutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdutos.
     */
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }

  /**
   * tbProdutos findFirst
   */
  export interface tbProdutosFindFirstArgs extends tbProdutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdutos findFirstOrThrow
   */
  export type tbProdutosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdutos.
     */
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbProdutos findMany
   */
  export type tbProdutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter, which tbProdutos to fetch.
     */
    where?: tbProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdutos to fetch.
     */
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbProdutos.
     */
    cursor?: tbProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdutos.
     */
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbProdutos create
   */
  export type tbProdutosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The data needed to create a tbProdutos.
     */
    data: XOR<tbProdutosCreateInput, tbProdutosUncheckedCreateInput>
  }


  /**
   * tbProdutos createMany
   */
  export type tbProdutosCreateManyArgs = {
    /**
     * The data used to create many tbProdutos.
     */
    data: Enumerable<tbProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbProdutos update
   */
  export type tbProdutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The data needed to update a tbProdutos.
     */
    data: XOR<tbProdutosUpdateInput, tbProdutosUncheckedUpdateInput>
    /**
     * Choose, which tbProdutos to update.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos updateMany
   */
  export type tbProdutosUpdateManyArgs = {
    /**
     * The data used to update tbProdutos.
     */
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyInput>
    /**
     * Filter which tbProdutos to update
     */
    where?: tbProdutosWhereInput
  }


  /**
   * tbProdutos upsert
   */
  export type tbProdutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * The filter to search for the tbProdutos to update in case it exists.
     */
    where: tbProdutosWhereUniqueInput
    /**
     * In case the tbProdutos found by the `where` argument doesn't exist, create a new tbProdutos with this data.
     */
    create: XOR<tbProdutosCreateInput, tbProdutosUncheckedCreateInput>
    /**
     * In case the tbProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbProdutosUpdateInput, tbProdutosUncheckedUpdateInput>
  }


  /**
   * tbProdutos delete
   */
  export type tbProdutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    /**
     * Filter which tbProdutos to delete.
     */
    where: tbProdutosWhereUniqueInput
  }


  /**
   * tbProdutos deleteMany
   */
  export type tbProdutosDeleteManyArgs = {
    /**
     * Filter which tbProdutos to delete
     */
    where?: tbProdutosWhereInput
  }


  /**
   * tbProdutos.tbEstoque
   */
  export type tbProdutos$tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbProdutos.tbMovItens
   */
  export type tbProdutos$tbMovItensArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    where?: tbMovItensWhereInput
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    cursor?: tbMovItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }


  /**
   * tbProdutos.tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos
   */
  export type tbProdutos$tbProdComposicao_tbProdComposicao_idprodutoTotbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    where?: tbProdComposicaoWhereInput
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    cursor?: tbProdComposicaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdComposicaoScalarFieldEnum>
  }


  /**
   * tbProdutos.tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos
   */
  export type tbProdutos$tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    where?: tbProdComposicaoWhereInput
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    cursor?: tbProdComposicaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdComposicaoScalarFieldEnum>
  }


  /**
   * tbProdutos without action
   */
  export type tbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
  }



  /**
   * Model tbTiposProdutos
   */


  export type AggregateTbTiposProdutos = {
    _count: TbTiposProdutosCountAggregateOutputType | null
    _avg: TbTiposProdutosAvgAggregateOutputType | null
    _sum: TbTiposProdutosSumAggregateOutputType | null
    _min: TbTiposProdutosMinAggregateOutputType | null
    _max: TbTiposProdutosMaxAggregateOutputType | null
  }

  export type TbTiposProdutosAvgAggregateOutputType = {
    idtipprod: number | null
  }

  export type TbTiposProdutosSumAggregateOutputType = {
    idtipprod: number | null
  }

  export type TbTiposProdutosMinAggregateOutputType = {
    idtipprod: number | null
    nometipprod: string | null
  }

  export type TbTiposProdutosMaxAggregateOutputType = {
    idtipprod: number | null
    nometipprod: string | null
  }

  export type TbTiposProdutosCountAggregateOutputType = {
    idtipprod: number
    nometipprod: number
    _all: number
  }


  export type TbTiposProdutosAvgAggregateInputType = {
    idtipprod?: true
  }

  export type TbTiposProdutosSumAggregateInputType = {
    idtipprod?: true
  }

  export type TbTiposProdutosMinAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
  }

  export type TbTiposProdutosMaxAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
  }

  export type TbTiposProdutosCountAggregateInputType = {
    idtipprod?: true
    nometipprod?: true
    _all?: true
  }

  export type TbTiposProdutosAggregateArgs = {
    /**
     * Filter which tbTiposProdutos to aggregate.
     */
    where?: tbTiposProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposProdutos to fetch.
     */
    orderBy?: Enumerable<tbTiposProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbTiposProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbTiposProdutos
    **/
    _count?: true | TbTiposProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbTiposProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbTiposProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbTiposProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbTiposProdutosMaxAggregateInputType
  }

  export type GetTbTiposProdutosAggregateType<T extends TbTiposProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbTiposProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbTiposProdutos[P]>
      : GetScalarType<T[P], AggregateTbTiposProdutos[P]>
  }




  export type TbTiposProdutosGroupByArgs = {
    where?: tbTiposProdutosWhereInput
    orderBy?: Enumerable<tbTiposProdutosOrderByWithAggregationInput>
    by: TbTiposProdutosScalarFieldEnum[]
    having?: tbTiposProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbTiposProdutosCountAggregateInputType | true
    _avg?: TbTiposProdutosAvgAggregateInputType
    _sum?: TbTiposProdutosSumAggregateInputType
    _min?: TbTiposProdutosMinAggregateInputType
    _max?: TbTiposProdutosMaxAggregateInputType
  }


  export type TbTiposProdutosGroupByOutputType = {
    idtipprod: number
    nometipprod: string | null
    _count: TbTiposProdutosCountAggregateOutputType | null
    _avg: TbTiposProdutosAvgAggregateOutputType | null
    _sum: TbTiposProdutosSumAggregateOutputType | null
    _min: TbTiposProdutosMinAggregateOutputType | null
    _max: TbTiposProdutosMaxAggregateOutputType | null
  }

  type GetTbTiposProdutosGroupByPayload<T extends TbTiposProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbTiposProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbTiposProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbTiposProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], TbTiposProdutosGroupByOutputType[P]>
        }
      >
    >


  export type tbTiposProdutosSelect = {
    idtipprod?: boolean
    nometipprod?: boolean
    tbProdutos?: boolean | tbTiposProdutos$tbProdutosArgs
    _count?: boolean | TbTiposProdutosCountOutputTypeArgs
  }


  export type tbTiposProdutosInclude = {
    tbProdutos?: boolean | tbTiposProdutos$tbProdutosArgs
    _count?: boolean | TbTiposProdutosCountOutputTypeArgs
  }

  export type tbTiposProdutosGetPayload<S extends boolean | null | undefined | tbTiposProdutosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbTiposProdutos :
    S extends undefined ? never :
    S extends { include: any } & (tbTiposProdutosArgs | tbTiposProdutosFindManyArgs)
    ? tbTiposProdutos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbProdutos' ? Array < tbProdutosGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbTiposProdutosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbTiposProdutosArgs | tbTiposProdutosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbProdutos' ? Array < tbProdutosGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbTiposProdutosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbTiposProdutos ? tbTiposProdutos[P] : never
  } 
      : tbTiposProdutos


  type tbTiposProdutosCountArgs = 
    Omit<tbTiposProdutosFindManyArgs, 'select' | 'include'> & {
      select?: TbTiposProdutosCountAggregateInputType | true
    }

  export interface tbTiposProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbTiposProdutos that matches the filter.
     * @param {tbTiposProdutosFindUniqueArgs} args - Arguments to find a TbTiposProdutos
     * @example
     * // Get one TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbTiposProdutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbTiposProdutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbTiposProdutos'> extends True ? Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>> : Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T> | null, null>

    /**
     * Find one TbTiposProdutos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbTiposProdutosFindUniqueOrThrowArgs} args - Arguments to find a TbTiposProdutos
     * @example
     * // Get one TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbTiposProdutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbTiposProdutosFindUniqueOrThrowArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Find the first TbTiposProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposProdutosFindFirstArgs} args - Arguments to find a TbTiposProdutos
     * @example
     * // Get one TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbTiposProdutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbTiposProdutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbTiposProdutos'> extends True ? Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>> : Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T> | null, null>

    /**
     * Find the first TbTiposProdutos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposProdutosFindFirstOrThrowArgs} args - Arguments to find a TbTiposProdutos
     * @example
     * // Get one TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbTiposProdutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbTiposProdutosFindFirstOrThrowArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Find zero or more TbTiposProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findMany()
     * 
     * // Get first 10 TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.findMany({ take: 10 })
     * 
     * // Only select the `idtipprod`
     * const tbTiposProdutosWithIdtipprodOnly = await prisma.tbTiposProdutos.findMany({ select: { idtipprod: true } })
     * 
    **/
    findMany<T extends tbTiposProdutosFindManyArgs>(
      args?: SelectSubset<T, tbTiposProdutosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbTiposProdutosGetPayload<T>>>

    /**
     * Create a TbTiposProdutos.
     * @param {tbTiposProdutosCreateArgs} args - Arguments to create a TbTiposProdutos.
     * @example
     * // Create one TbTiposProdutos
     * const TbTiposProdutos = await prisma.tbTiposProdutos.create({
     *   data: {
     *     // ... data to create a TbTiposProdutos
     *   }
     * })
     * 
    **/
    create<T extends tbTiposProdutosCreateArgs>(
      args: SelectSubset<T, tbTiposProdutosCreateArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Create many TbTiposProdutos.
     *     @param {tbTiposProdutosCreateManyArgs} args - Arguments to create many TbTiposProdutos.
     *     @example
     *     // Create many TbTiposProdutos
     *     const tbTiposProdutos = await prisma.tbTiposProdutos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbTiposProdutosCreateManyArgs>(
      args?: SelectSubset<T, tbTiposProdutosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbTiposProdutos.
     * @param {tbTiposProdutosDeleteArgs} args - Arguments to delete one TbTiposProdutos.
     * @example
     * // Delete one TbTiposProdutos
     * const TbTiposProdutos = await prisma.tbTiposProdutos.delete({
     *   where: {
     *     // ... filter to delete one TbTiposProdutos
     *   }
     * })
     * 
    **/
    delete<T extends tbTiposProdutosDeleteArgs>(
      args: SelectSubset<T, tbTiposProdutosDeleteArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Update one TbTiposProdutos.
     * @param {tbTiposProdutosUpdateArgs} args - Arguments to update one TbTiposProdutos.
     * @example
     * // Update one TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbTiposProdutosUpdateArgs>(
      args: SelectSubset<T, tbTiposProdutosUpdateArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Delete zero or more TbTiposProdutos.
     * @param {tbTiposProdutosDeleteManyArgs} args - Arguments to filter TbTiposProdutos to delete.
     * @example
     * // Delete a few TbTiposProdutos
     * const { count } = await prisma.tbTiposProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbTiposProdutosDeleteManyArgs>(
      args?: SelectSubset<T, tbTiposProdutosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbTiposProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbTiposProdutosUpdateManyArgs>(
      args: SelectSubset<T, tbTiposProdutosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbTiposProdutos.
     * @param {tbTiposProdutosUpsertArgs} args - Arguments to update or create a TbTiposProdutos.
     * @example
     * // Update or create a TbTiposProdutos
     * const tbTiposProdutos = await prisma.tbTiposProdutos.upsert({
     *   create: {
     *     // ... data to create a TbTiposProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbTiposProdutos we want to update
     *   }
     * })
    **/
    upsert<T extends tbTiposProdutosUpsertArgs>(
      args: SelectSubset<T, tbTiposProdutosUpsertArgs>
    ): Prisma__tbTiposProdutosClient<tbTiposProdutosGetPayload<T>>

    /**
     * Count the number of TbTiposProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbTiposProdutosCountArgs} args - Arguments to filter TbTiposProdutos to count.
     * @example
     * // Count the number of TbTiposProdutos
     * const count = await prisma.tbTiposProdutos.count({
     *   where: {
     *     // ... the filter for the TbTiposProdutos we want to count
     *   }
     * })
    **/
    count<T extends tbTiposProdutosCountArgs>(
      args?: Subset<T, tbTiposProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbTiposProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbTiposProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbTiposProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbTiposProdutosAggregateArgs>(args: Subset<T, TbTiposProdutosAggregateArgs>): Prisma.PrismaPromise<GetTbTiposProdutosAggregateType<T>>

    /**
     * Group by TbTiposProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbTiposProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbTiposProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbTiposProdutosGroupByArgs['orderBy'] }
        : { orderBy?: TbTiposProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbTiposProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbTiposProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbTiposProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbTiposProdutosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbProdutos<T extends tbTiposProdutos$tbProdutosArgs= {}>(args?: Subset<T, tbTiposProdutos$tbProdutosArgs>): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbTiposProdutos base type for findUnique actions
   */
  export type tbTiposProdutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter, which tbTiposProdutos to fetch.
     */
    where: tbTiposProdutosWhereUniqueInput
  }

  /**
   * tbTiposProdutos findUnique
   */
  export interface tbTiposProdutosFindUniqueArgs extends tbTiposProdutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbTiposProdutos findUniqueOrThrow
   */
  export type tbTiposProdutosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter, which tbTiposProdutos to fetch.
     */
    where: tbTiposProdutosWhereUniqueInput
  }


  /**
   * tbTiposProdutos base type for findFirst actions
   */
  export type tbTiposProdutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter, which tbTiposProdutos to fetch.
     */
    where?: tbTiposProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposProdutos to fetch.
     */
    orderBy?: Enumerable<tbTiposProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbTiposProdutos.
     */
    cursor?: tbTiposProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbTiposProdutos.
     */
    distinct?: Enumerable<TbTiposProdutosScalarFieldEnum>
  }

  /**
   * tbTiposProdutos findFirst
   */
  export interface tbTiposProdutosFindFirstArgs extends tbTiposProdutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbTiposProdutos findFirstOrThrow
   */
  export type tbTiposProdutosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter, which tbTiposProdutos to fetch.
     */
    where?: tbTiposProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposProdutos to fetch.
     */
    orderBy?: Enumerable<tbTiposProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbTiposProdutos.
     */
    cursor?: tbTiposProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbTiposProdutos.
     */
    distinct?: Enumerable<TbTiposProdutosScalarFieldEnum>
  }


  /**
   * tbTiposProdutos findMany
   */
  export type tbTiposProdutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter, which tbTiposProdutos to fetch.
     */
    where?: tbTiposProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbTiposProdutos to fetch.
     */
    orderBy?: Enumerable<tbTiposProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbTiposProdutos.
     */
    cursor?: tbTiposProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbTiposProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbTiposProdutos.
     */
    skip?: number
    distinct?: Enumerable<TbTiposProdutosScalarFieldEnum>
  }


  /**
   * tbTiposProdutos create
   */
  export type tbTiposProdutosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * The data needed to create a tbTiposProdutos.
     */
    data: XOR<tbTiposProdutosCreateInput, tbTiposProdutosUncheckedCreateInput>
  }


  /**
   * tbTiposProdutos createMany
   */
  export type tbTiposProdutosCreateManyArgs = {
    /**
     * The data used to create many tbTiposProdutos.
     */
    data: Enumerable<tbTiposProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbTiposProdutos update
   */
  export type tbTiposProdutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * The data needed to update a tbTiposProdutos.
     */
    data: XOR<tbTiposProdutosUpdateInput, tbTiposProdutosUncheckedUpdateInput>
    /**
     * Choose, which tbTiposProdutos to update.
     */
    where: tbTiposProdutosWhereUniqueInput
  }


  /**
   * tbTiposProdutos updateMany
   */
  export type tbTiposProdutosUpdateManyArgs = {
    /**
     * The data used to update tbTiposProdutos.
     */
    data: XOR<tbTiposProdutosUpdateManyMutationInput, tbTiposProdutosUncheckedUpdateManyInput>
    /**
     * Filter which tbTiposProdutos to update
     */
    where?: tbTiposProdutosWhereInput
  }


  /**
   * tbTiposProdutos upsert
   */
  export type tbTiposProdutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * The filter to search for the tbTiposProdutos to update in case it exists.
     */
    where: tbTiposProdutosWhereUniqueInput
    /**
     * In case the tbTiposProdutos found by the `where` argument doesn't exist, create a new tbTiposProdutos with this data.
     */
    create: XOR<tbTiposProdutosCreateInput, tbTiposProdutosUncheckedCreateInput>
    /**
     * In case the tbTiposProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbTiposProdutosUpdateInput, tbTiposProdutosUncheckedUpdateInput>
  }


  /**
   * tbTiposProdutos delete
   */
  export type tbTiposProdutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
    /**
     * Filter which tbTiposProdutos to delete.
     */
    where: tbTiposProdutosWhereUniqueInput
  }


  /**
   * tbTiposProdutos deleteMany
   */
  export type tbTiposProdutosDeleteManyArgs = {
    /**
     * Filter which tbTiposProdutos to delete
     */
    where?: tbTiposProdutosWhereInput
  }


  /**
   * tbTiposProdutos.tbProdutos
   */
  export type tbTiposProdutos$tbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    cursor?: tbProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbTiposProdutos without action
   */
  export type tbTiposProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbTiposProdutos
     */
    select?: tbTiposProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbTiposProdutosInclude | null
  }



  /**
   * Model tbUnidadeMedida
   */


  export type AggregateTbUnidadeMedida = {
    _count: TbUnidadeMedidaCountAggregateOutputType | null
    _avg: TbUnidadeMedidaAvgAggregateOutputType | null
    _sum: TbUnidadeMedidaSumAggregateOutputType | null
    _min: TbUnidadeMedidaMinAggregateOutputType | null
    _max: TbUnidadeMedidaMaxAggregateOutputType | null
  }

  export type TbUnidadeMedidaAvgAggregateOutputType = {
    idunidade: number | null
  }

  export type TbUnidadeMedidaSumAggregateOutputType = {
    idunidade: number | null
  }

  export type TbUnidadeMedidaMinAggregateOutputType = {
    idunidade: number | null
    siglaun: string | null
    nomeunidade: string | null
  }

  export type TbUnidadeMedidaMaxAggregateOutputType = {
    idunidade: number | null
    siglaun: string | null
    nomeunidade: string | null
  }

  export type TbUnidadeMedidaCountAggregateOutputType = {
    idunidade: number
    siglaun: number
    nomeunidade: number
    _all: number
  }


  export type TbUnidadeMedidaAvgAggregateInputType = {
    idunidade?: true
  }

  export type TbUnidadeMedidaSumAggregateInputType = {
    idunidade?: true
  }

  export type TbUnidadeMedidaMinAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
  }

  export type TbUnidadeMedidaMaxAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
  }

  export type TbUnidadeMedidaCountAggregateInputType = {
    idunidade?: true
    siglaun?: true
    nomeunidade?: true
    _all?: true
  }

  export type TbUnidadeMedidaAggregateArgs = {
    /**
     * Filter which tbUnidadeMedida to aggregate.
     */
    where?: tbUnidadeMedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidadeMedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidadeMedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbUnidadeMedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidadeMedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidadeMedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbUnidadeMedidas
    **/
    _count?: true | TbUnidadeMedidaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbUnidadeMedidaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbUnidadeMedidaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbUnidadeMedidaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbUnidadeMedidaMaxAggregateInputType
  }

  export type GetTbUnidadeMedidaAggregateType<T extends TbUnidadeMedidaAggregateArgs> = {
        [P in keyof T & keyof AggregateTbUnidadeMedida]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbUnidadeMedida[P]>
      : GetScalarType<T[P], AggregateTbUnidadeMedida[P]>
  }




  export type TbUnidadeMedidaGroupByArgs = {
    where?: tbUnidadeMedidaWhereInput
    orderBy?: Enumerable<tbUnidadeMedidaOrderByWithAggregationInput>
    by: TbUnidadeMedidaScalarFieldEnum[]
    having?: tbUnidadeMedidaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbUnidadeMedidaCountAggregateInputType | true
    _avg?: TbUnidadeMedidaAvgAggregateInputType
    _sum?: TbUnidadeMedidaSumAggregateInputType
    _min?: TbUnidadeMedidaMinAggregateInputType
    _max?: TbUnidadeMedidaMaxAggregateInputType
  }


  export type TbUnidadeMedidaGroupByOutputType = {
    idunidade: number
    siglaun: string | null
    nomeunidade: string | null
    _count: TbUnidadeMedidaCountAggregateOutputType | null
    _avg: TbUnidadeMedidaAvgAggregateOutputType | null
    _sum: TbUnidadeMedidaSumAggregateOutputType | null
    _min: TbUnidadeMedidaMinAggregateOutputType | null
    _max: TbUnidadeMedidaMaxAggregateOutputType | null
  }

  type GetTbUnidadeMedidaGroupByPayload<T extends TbUnidadeMedidaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbUnidadeMedidaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbUnidadeMedidaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbUnidadeMedidaGroupByOutputType[P]>
            : GetScalarType<T[P], TbUnidadeMedidaGroupByOutputType[P]>
        }
      >
    >


  export type tbUnidadeMedidaSelect = {
    idunidade?: boolean
    siglaun?: boolean
    nomeunidade?: boolean
    tbProdutos?: boolean | tbUnidadeMedida$tbProdutosArgs
    _count?: boolean | TbUnidadeMedidaCountOutputTypeArgs
  }


  export type tbUnidadeMedidaInclude = {
    tbProdutos?: boolean | tbUnidadeMedida$tbProdutosArgs
    _count?: boolean | TbUnidadeMedidaCountOutputTypeArgs
  }

  export type tbUnidadeMedidaGetPayload<S extends boolean | null | undefined | tbUnidadeMedidaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbUnidadeMedida :
    S extends undefined ? never :
    S extends { include: any } & (tbUnidadeMedidaArgs | tbUnidadeMedidaFindManyArgs)
    ? tbUnidadeMedida  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbProdutos' ? Array < tbProdutosGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbUnidadeMedidaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbUnidadeMedidaArgs | tbUnidadeMedidaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbProdutos' ? Array < tbProdutosGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbUnidadeMedidaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbUnidadeMedida ? tbUnidadeMedida[P] : never
  } 
      : tbUnidadeMedida


  type tbUnidadeMedidaCountArgs = 
    Omit<tbUnidadeMedidaFindManyArgs, 'select' | 'include'> & {
      select?: TbUnidadeMedidaCountAggregateInputType | true
    }

  export interface tbUnidadeMedidaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbUnidadeMedida that matches the filter.
     * @param {tbUnidadeMedidaFindUniqueArgs} args - Arguments to find a TbUnidadeMedida
     * @example
     * // Get one TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbUnidadeMedidaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbUnidadeMedidaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbUnidadeMedida'> extends True ? Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>> : Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T> | null, null>

    /**
     * Find one TbUnidadeMedida that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbUnidadeMedidaFindUniqueOrThrowArgs} args - Arguments to find a TbUnidadeMedida
     * @example
     * // Get one TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbUnidadeMedidaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbUnidadeMedidaFindUniqueOrThrowArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Find the first TbUnidadeMedida that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidadeMedidaFindFirstArgs} args - Arguments to find a TbUnidadeMedida
     * @example
     * // Get one TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbUnidadeMedidaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbUnidadeMedidaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbUnidadeMedida'> extends True ? Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>> : Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T> | null, null>

    /**
     * Find the first TbUnidadeMedida that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidadeMedidaFindFirstOrThrowArgs} args - Arguments to find a TbUnidadeMedida
     * @example
     * // Get one TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbUnidadeMedidaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbUnidadeMedidaFindFirstOrThrowArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Find zero or more TbUnidadeMedidas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidadeMedidaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbUnidadeMedidas
     * const tbUnidadeMedidas = await prisma.tbUnidadeMedida.findMany()
     * 
     * // Get first 10 TbUnidadeMedidas
     * const tbUnidadeMedidas = await prisma.tbUnidadeMedida.findMany({ take: 10 })
     * 
     * // Only select the `idunidade`
     * const tbUnidadeMedidaWithIdunidadeOnly = await prisma.tbUnidadeMedida.findMany({ select: { idunidade: true } })
     * 
    **/
    findMany<T extends tbUnidadeMedidaFindManyArgs>(
      args?: SelectSubset<T, tbUnidadeMedidaFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbUnidadeMedidaGetPayload<T>>>

    /**
     * Create a TbUnidadeMedida.
     * @param {tbUnidadeMedidaCreateArgs} args - Arguments to create a TbUnidadeMedida.
     * @example
     * // Create one TbUnidadeMedida
     * const TbUnidadeMedida = await prisma.tbUnidadeMedida.create({
     *   data: {
     *     // ... data to create a TbUnidadeMedida
     *   }
     * })
     * 
    **/
    create<T extends tbUnidadeMedidaCreateArgs>(
      args: SelectSubset<T, tbUnidadeMedidaCreateArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Create many TbUnidadeMedidas.
     *     @param {tbUnidadeMedidaCreateManyArgs} args - Arguments to create many TbUnidadeMedidas.
     *     @example
     *     // Create many TbUnidadeMedidas
     *     const tbUnidadeMedida = await prisma.tbUnidadeMedida.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbUnidadeMedidaCreateManyArgs>(
      args?: SelectSubset<T, tbUnidadeMedidaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbUnidadeMedida.
     * @param {tbUnidadeMedidaDeleteArgs} args - Arguments to delete one TbUnidadeMedida.
     * @example
     * // Delete one TbUnidadeMedida
     * const TbUnidadeMedida = await prisma.tbUnidadeMedida.delete({
     *   where: {
     *     // ... filter to delete one TbUnidadeMedida
     *   }
     * })
     * 
    **/
    delete<T extends tbUnidadeMedidaDeleteArgs>(
      args: SelectSubset<T, tbUnidadeMedidaDeleteArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Update one TbUnidadeMedida.
     * @param {tbUnidadeMedidaUpdateArgs} args - Arguments to update one TbUnidadeMedida.
     * @example
     * // Update one TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbUnidadeMedidaUpdateArgs>(
      args: SelectSubset<T, tbUnidadeMedidaUpdateArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Delete zero or more TbUnidadeMedidas.
     * @param {tbUnidadeMedidaDeleteManyArgs} args - Arguments to filter TbUnidadeMedidas to delete.
     * @example
     * // Delete a few TbUnidadeMedidas
     * const { count } = await prisma.tbUnidadeMedida.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbUnidadeMedidaDeleteManyArgs>(
      args?: SelectSubset<T, tbUnidadeMedidaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbUnidadeMedidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidadeMedidaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbUnidadeMedidas
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbUnidadeMedidaUpdateManyArgs>(
      args: SelectSubset<T, tbUnidadeMedidaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbUnidadeMedida.
     * @param {tbUnidadeMedidaUpsertArgs} args - Arguments to update or create a TbUnidadeMedida.
     * @example
     * // Update or create a TbUnidadeMedida
     * const tbUnidadeMedida = await prisma.tbUnidadeMedida.upsert({
     *   create: {
     *     // ... data to create a TbUnidadeMedida
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbUnidadeMedida we want to update
     *   }
     * })
    **/
    upsert<T extends tbUnidadeMedidaUpsertArgs>(
      args: SelectSubset<T, tbUnidadeMedidaUpsertArgs>
    ): Prisma__tbUnidadeMedidaClient<tbUnidadeMedidaGetPayload<T>>

    /**
     * Count the number of TbUnidadeMedidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUnidadeMedidaCountArgs} args - Arguments to filter TbUnidadeMedidas to count.
     * @example
     * // Count the number of TbUnidadeMedidas
     * const count = await prisma.tbUnidadeMedida.count({
     *   where: {
     *     // ... the filter for the TbUnidadeMedidas we want to count
     *   }
     * })
    **/
    count<T extends tbUnidadeMedidaCountArgs>(
      args?: Subset<T, tbUnidadeMedidaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbUnidadeMedidaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbUnidadeMedida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUnidadeMedidaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbUnidadeMedidaAggregateArgs>(args: Subset<T, TbUnidadeMedidaAggregateArgs>): Prisma.PrismaPromise<GetTbUnidadeMedidaAggregateType<T>>

    /**
     * Group by TbUnidadeMedida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUnidadeMedidaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbUnidadeMedidaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbUnidadeMedidaGroupByArgs['orderBy'] }
        : { orderBy?: TbUnidadeMedidaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbUnidadeMedidaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbUnidadeMedidaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbUnidadeMedida.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbUnidadeMedidaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbProdutos<T extends tbUnidadeMedida$tbProdutosArgs= {}>(args?: Subset<T, tbUnidadeMedida$tbProdutosArgs>): Prisma.PrismaPromise<Array<tbProdutosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbUnidadeMedida base type for findUnique actions
   */
  export type tbUnidadeMedidaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter, which tbUnidadeMedida to fetch.
     */
    where: tbUnidadeMedidaWhereUniqueInput
  }

  /**
   * tbUnidadeMedida findUnique
   */
  export interface tbUnidadeMedidaFindUniqueArgs extends tbUnidadeMedidaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUnidadeMedida findUniqueOrThrow
   */
  export type tbUnidadeMedidaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter, which tbUnidadeMedida to fetch.
     */
    where: tbUnidadeMedidaWhereUniqueInput
  }


  /**
   * tbUnidadeMedida base type for findFirst actions
   */
  export type tbUnidadeMedidaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter, which tbUnidadeMedida to fetch.
     */
    where?: tbUnidadeMedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidadeMedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidadeMedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUnidadeMedidas.
     */
    cursor?: tbUnidadeMedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidadeMedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidadeMedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUnidadeMedidas.
     */
    distinct?: Enumerable<TbUnidadeMedidaScalarFieldEnum>
  }

  /**
   * tbUnidadeMedida findFirst
   */
  export interface tbUnidadeMedidaFindFirstArgs extends tbUnidadeMedidaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUnidadeMedida findFirstOrThrow
   */
  export type tbUnidadeMedidaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter, which tbUnidadeMedida to fetch.
     */
    where?: tbUnidadeMedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidadeMedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidadeMedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUnidadeMedidas.
     */
    cursor?: tbUnidadeMedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidadeMedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidadeMedidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUnidadeMedidas.
     */
    distinct?: Enumerable<TbUnidadeMedidaScalarFieldEnum>
  }


  /**
   * tbUnidadeMedida findMany
   */
  export type tbUnidadeMedidaFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter, which tbUnidadeMedidas to fetch.
     */
    where?: tbUnidadeMedidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUnidadeMedidas to fetch.
     */
    orderBy?: Enumerable<tbUnidadeMedidaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbUnidadeMedidas.
     */
    cursor?: tbUnidadeMedidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUnidadeMedidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUnidadeMedidas.
     */
    skip?: number
    distinct?: Enumerable<TbUnidadeMedidaScalarFieldEnum>
  }


  /**
   * tbUnidadeMedida create
   */
  export type tbUnidadeMedidaCreateArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * The data needed to create a tbUnidadeMedida.
     */
    data: XOR<tbUnidadeMedidaCreateInput, tbUnidadeMedidaUncheckedCreateInput>
  }


  /**
   * tbUnidadeMedida createMany
   */
  export type tbUnidadeMedidaCreateManyArgs = {
    /**
     * The data used to create many tbUnidadeMedidas.
     */
    data: Enumerable<tbUnidadeMedidaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbUnidadeMedida update
   */
  export type tbUnidadeMedidaUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * The data needed to update a tbUnidadeMedida.
     */
    data: XOR<tbUnidadeMedidaUpdateInput, tbUnidadeMedidaUncheckedUpdateInput>
    /**
     * Choose, which tbUnidadeMedida to update.
     */
    where: tbUnidadeMedidaWhereUniqueInput
  }


  /**
   * tbUnidadeMedida updateMany
   */
  export type tbUnidadeMedidaUpdateManyArgs = {
    /**
     * The data used to update tbUnidadeMedidas.
     */
    data: XOR<tbUnidadeMedidaUpdateManyMutationInput, tbUnidadeMedidaUncheckedUpdateManyInput>
    /**
     * Filter which tbUnidadeMedidas to update
     */
    where?: tbUnidadeMedidaWhereInput
  }


  /**
   * tbUnidadeMedida upsert
   */
  export type tbUnidadeMedidaUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * The filter to search for the tbUnidadeMedida to update in case it exists.
     */
    where: tbUnidadeMedidaWhereUniqueInput
    /**
     * In case the tbUnidadeMedida found by the `where` argument doesn't exist, create a new tbUnidadeMedida with this data.
     */
    create: XOR<tbUnidadeMedidaCreateInput, tbUnidadeMedidaUncheckedCreateInput>
    /**
     * In case the tbUnidadeMedida was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbUnidadeMedidaUpdateInput, tbUnidadeMedidaUncheckedUpdateInput>
  }


  /**
   * tbUnidadeMedida delete
   */
  export type tbUnidadeMedidaDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
    /**
     * Filter which tbUnidadeMedida to delete.
     */
    where: tbUnidadeMedidaWhereUniqueInput
  }


  /**
   * tbUnidadeMedida deleteMany
   */
  export type tbUnidadeMedidaDeleteManyArgs = {
    /**
     * Filter which tbUnidadeMedidas to delete
     */
    where?: tbUnidadeMedidaWhereInput
  }


  /**
   * tbUnidadeMedida.tbProdutos
   */
  export type tbUnidadeMedida$tbProdutosArgs = {
    /**
     * Select specific fields to fetch from the tbProdutos
     */
    select?: tbProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdutosInclude | null
    where?: tbProdutosWhereInput
    orderBy?: Enumerable<tbProdutosOrderByWithRelationInput>
    cursor?: tbProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbProdutosScalarFieldEnum>
  }


  /**
   * tbUnidadeMedida without action
   */
  export type tbUnidadeMedidaArgs = {
    /**
     * Select specific fields to fetch from the tbUnidadeMedida
     */
    select?: tbUnidadeMedidaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUnidadeMedidaInclude | null
  }



  /**
   * Model tbEstoque
   */


  export type AggregateTbEstoque = {
    _count: TbEstoqueCountAggregateOutputType | null
    _avg: TbEstoqueAvgAggregateOutputType | null
    _sum: TbEstoqueSumAggregateOutputType | null
    _min: TbEstoqueMinAggregateOutputType | null
    _max: TbEstoqueMaxAggregateOutputType | null
  }

  export type TbEstoqueAvgAggregateOutputType = {
    idestoque: number | null
    idmovimento: number | null
    seqitem: number | null
    idlocal: number | null
    idproduto: number | null
    quantidade: number | null
  }

  export type TbEstoqueSumAggregateOutputType = {
    idestoque: number | null
    idmovimento: number | null
    seqitem: number | null
    idlocal: number | null
    idproduto: number | null
    quantidade: number | null
  }

  export type TbEstoqueMinAggregateOutputType = {
    idestoque: number | null
    idmovimento: number | null
    seqitem: number | null
    idlocal: number | null
    idproduto: number | null
    quantidade: number | null
    dtinc: Date | null
  }

  export type TbEstoqueMaxAggregateOutputType = {
    idestoque: number | null
    idmovimento: number | null
    seqitem: number | null
    idlocal: number | null
    idproduto: number | null
    quantidade: number | null
    dtinc: Date | null
  }

  export type TbEstoqueCountAggregateOutputType = {
    idestoque: number
    idmovimento: number
    seqitem: number
    idlocal: number
    idproduto: number
    quantidade: number
    dtinc: number
    _all: number
  }


  export type TbEstoqueAvgAggregateInputType = {
    idestoque?: true
    idmovimento?: true
    seqitem?: true
    idlocal?: true
    idproduto?: true
    quantidade?: true
  }

  export type TbEstoqueSumAggregateInputType = {
    idestoque?: true
    idmovimento?: true
    seqitem?: true
    idlocal?: true
    idproduto?: true
    quantidade?: true
  }

  export type TbEstoqueMinAggregateInputType = {
    idestoque?: true
    idmovimento?: true
    seqitem?: true
    idlocal?: true
    idproduto?: true
    quantidade?: true
    dtinc?: true
  }

  export type TbEstoqueMaxAggregateInputType = {
    idestoque?: true
    idmovimento?: true
    seqitem?: true
    idlocal?: true
    idproduto?: true
    quantidade?: true
    dtinc?: true
  }

  export type TbEstoqueCountAggregateInputType = {
    idestoque?: true
    idmovimento?: true
    seqitem?: true
    idlocal?: true
    idproduto?: true
    quantidade?: true
    dtinc?: true
    _all?: true
  }

  export type TbEstoqueAggregateArgs = {
    /**
     * Filter which tbEstoque to aggregate.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbEstoques
    **/
    _count?: true | TbEstoqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbEstoqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbEstoqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbEstoqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbEstoqueMaxAggregateInputType
  }

  export type GetTbEstoqueAggregateType<T extends TbEstoqueAggregateArgs> = {
        [P in keyof T & keyof AggregateTbEstoque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbEstoque[P]>
      : GetScalarType<T[P], AggregateTbEstoque[P]>
  }




  export type TbEstoqueGroupByArgs = {
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithAggregationInput>
    by: TbEstoqueScalarFieldEnum[]
    having?: tbEstoqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbEstoqueCountAggregateInputType | true
    _avg?: TbEstoqueAvgAggregateInputType
    _sum?: TbEstoqueSumAggregateInputType
    _min?: TbEstoqueMinAggregateInputType
    _max?: TbEstoqueMaxAggregateInputType
  }


  export type TbEstoqueGroupByOutputType = {
    idestoque: number
    idmovimento: number
    seqitem: number
    idlocal: number | null
    idproduto: number | null
    quantidade: number | null
    dtinc: Date | null
    _count: TbEstoqueCountAggregateOutputType | null
    _avg: TbEstoqueAvgAggregateOutputType | null
    _sum: TbEstoqueSumAggregateOutputType | null
    _min: TbEstoqueMinAggregateOutputType | null
    _max: TbEstoqueMaxAggregateOutputType | null
  }

  type GetTbEstoqueGroupByPayload<T extends TbEstoqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbEstoqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbEstoqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbEstoqueGroupByOutputType[P]>
            : GetScalarType<T[P], TbEstoqueGroupByOutputType[P]>
        }
      >
    >


  export type tbEstoqueSelect = {
    idestoque?: boolean
    idmovimento?: boolean
    seqitem?: boolean
    idlocal?: boolean
    idproduto?: boolean
    quantidade?: boolean
    dtinc?: boolean
    tbLocais?: boolean | tbLocaisArgs
    tbMovimentos?: boolean | tbMovimentosArgs
    tbProdutos?: boolean | tbProdutosArgs
    tbMovItens?: boolean | tbMovItensArgs
  }


  export type tbEstoqueInclude = {
    tbLocais?: boolean | tbLocaisArgs
    tbMovimentos?: boolean | tbMovimentosArgs
    tbProdutos?: boolean | tbProdutosArgs
    tbMovItens?: boolean | tbMovItensArgs
  }

  export type tbEstoqueGetPayload<S extends boolean | null | undefined | tbEstoqueArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbEstoque :
    S extends undefined ? never :
    S extends { include: any } & (tbEstoqueArgs | tbEstoqueFindManyArgs)
    ? tbEstoque  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbLocais' ? tbLocaisGetPayload<S['include'][P]> | null :
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['include'][P]> :
        P extends 'tbProdutos' ? tbProdutosGetPayload<S['include'][P]> | null :
        P extends 'tbMovItens' ? tbMovItensGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (tbEstoqueArgs | tbEstoqueFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbLocais' ? tbLocaisGetPayload<S['select'][P]> | null :
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['select'][P]> :
        P extends 'tbProdutos' ? tbProdutosGetPayload<S['select'][P]> | null :
        P extends 'tbMovItens' ? tbMovItensGetPayload<S['select'][P]> | null :  P extends keyof tbEstoque ? tbEstoque[P] : never
  } 
      : tbEstoque


  type tbEstoqueCountArgs = 
    Omit<tbEstoqueFindManyArgs, 'select' | 'include'> & {
      select?: TbEstoqueCountAggregateInputType | true
    }

  export interface tbEstoqueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbEstoque that matches the filter.
     * @param {tbEstoqueFindUniqueArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbEstoqueFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbEstoqueFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbEstoque'> extends True ? Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>> : Prisma__tbEstoqueClient<tbEstoqueGetPayload<T> | null, null>

    /**
     * Find one TbEstoque that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbEstoqueFindUniqueOrThrowArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbEstoqueFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbEstoqueFindUniqueOrThrowArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Find the first TbEstoque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindFirstArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbEstoqueFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbEstoqueFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbEstoque'> extends True ? Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>> : Prisma__tbEstoqueClient<tbEstoqueGetPayload<T> | null, null>

    /**
     * Find the first TbEstoque that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindFirstOrThrowArgs} args - Arguments to find a TbEstoque
     * @example
     * // Get one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbEstoqueFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbEstoqueFindFirstOrThrowArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Find zero or more TbEstoques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbEstoques
     * const tbEstoques = await prisma.tbEstoque.findMany()
     * 
     * // Get first 10 TbEstoques
     * const tbEstoques = await prisma.tbEstoque.findMany({ take: 10 })
     * 
     * // Only select the `idestoque`
     * const tbEstoqueWithIdestoqueOnly = await prisma.tbEstoque.findMany({ select: { idestoque: true } })
     * 
    **/
    findMany<T extends tbEstoqueFindManyArgs>(
      args?: SelectSubset<T, tbEstoqueFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>>

    /**
     * Create a TbEstoque.
     * @param {tbEstoqueCreateArgs} args - Arguments to create a TbEstoque.
     * @example
     * // Create one TbEstoque
     * const TbEstoque = await prisma.tbEstoque.create({
     *   data: {
     *     // ... data to create a TbEstoque
     *   }
     * })
     * 
    **/
    create<T extends tbEstoqueCreateArgs>(
      args: SelectSubset<T, tbEstoqueCreateArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Create many TbEstoques.
     *     @param {tbEstoqueCreateManyArgs} args - Arguments to create many TbEstoques.
     *     @example
     *     // Create many TbEstoques
     *     const tbEstoque = await prisma.tbEstoque.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbEstoqueCreateManyArgs>(
      args?: SelectSubset<T, tbEstoqueCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbEstoque.
     * @param {tbEstoqueDeleteArgs} args - Arguments to delete one TbEstoque.
     * @example
     * // Delete one TbEstoque
     * const TbEstoque = await prisma.tbEstoque.delete({
     *   where: {
     *     // ... filter to delete one TbEstoque
     *   }
     * })
     * 
    **/
    delete<T extends tbEstoqueDeleteArgs>(
      args: SelectSubset<T, tbEstoqueDeleteArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Update one TbEstoque.
     * @param {tbEstoqueUpdateArgs} args - Arguments to update one TbEstoque.
     * @example
     * // Update one TbEstoque
     * const tbEstoque = await prisma.tbEstoque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbEstoqueUpdateArgs>(
      args: SelectSubset<T, tbEstoqueUpdateArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Delete zero or more TbEstoques.
     * @param {tbEstoqueDeleteManyArgs} args - Arguments to filter TbEstoques to delete.
     * @example
     * // Delete a few TbEstoques
     * const { count } = await prisma.tbEstoque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbEstoqueDeleteManyArgs>(
      args?: SelectSubset<T, tbEstoqueDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbEstoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbEstoques
     * const tbEstoque = await prisma.tbEstoque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbEstoqueUpdateManyArgs>(
      args: SelectSubset<T, tbEstoqueUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbEstoque.
     * @param {tbEstoqueUpsertArgs} args - Arguments to update or create a TbEstoque.
     * @example
     * // Update or create a TbEstoque
     * const tbEstoque = await prisma.tbEstoque.upsert({
     *   create: {
     *     // ... data to create a TbEstoque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbEstoque we want to update
     *   }
     * })
    **/
    upsert<T extends tbEstoqueUpsertArgs>(
      args: SelectSubset<T, tbEstoqueUpsertArgs>
    ): Prisma__tbEstoqueClient<tbEstoqueGetPayload<T>>

    /**
     * Count the number of TbEstoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbEstoqueCountArgs} args - Arguments to filter TbEstoques to count.
     * @example
     * // Count the number of TbEstoques
     * const count = await prisma.tbEstoque.count({
     *   where: {
     *     // ... the filter for the TbEstoques we want to count
     *   }
     * })
    **/
    count<T extends tbEstoqueCountArgs>(
      args?: Subset<T, tbEstoqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbEstoqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbEstoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbEstoqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbEstoqueAggregateArgs>(args: Subset<T, TbEstoqueAggregateArgs>): Prisma.PrismaPromise<GetTbEstoqueAggregateType<T>>

    /**
     * Group by TbEstoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbEstoqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbEstoqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbEstoqueGroupByArgs['orderBy'] }
        : { orderBy?: TbEstoqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbEstoqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbEstoqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbEstoque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbEstoqueClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbLocais<T extends tbLocaisArgs= {}>(args?: Subset<T, tbLocaisArgs>): Prisma__tbLocaisClient<tbLocaisGetPayload<T> | Null>;

    tbMovimentos<T extends tbMovimentosArgs= {}>(args?: Subset<T, tbMovimentosArgs>): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | Null>;

    tbProdutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    tbMovItens<T extends tbMovItensArgs= {}>(args?: Subset<T, tbMovItensArgs>): Prisma__tbMovItensClient<tbMovItensGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbEstoque base type for findUnique actions
   */
  export type tbEstoqueFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where: tbEstoqueWhereUniqueInput
  }

  /**
   * tbEstoque findUnique
   */
  export interface tbEstoqueFindUniqueArgs extends tbEstoqueFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbEstoque findUniqueOrThrow
   */
  export type tbEstoqueFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque base type for findFirst actions
   */
  export type tbEstoqueFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbEstoques.
     */
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }

  /**
   * tbEstoque findFirst
   */
  export interface tbEstoqueFindFirstArgs extends tbEstoqueFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbEstoque findFirstOrThrow
   */
  export type tbEstoqueFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoque to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbEstoques.
     */
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbEstoque findMany
   */
  export type tbEstoqueFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter, which tbEstoques to fetch.
     */
    where?: tbEstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbEstoques to fetch.
     */
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbEstoques.
     */
    cursor?: tbEstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbEstoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbEstoques.
     */
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbEstoque create
   */
  export type tbEstoqueCreateArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The data needed to create a tbEstoque.
     */
    data: XOR<tbEstoqueCreateInput, tbEstoqueUncheckedCreateInput>
  }


  /**
   * tbEstoque createMany
   */
  export type tbEstoqueCreateManyArgs = {
    /**
     * The data used to create many tbEstoques.
     */
    data: Enumerable<tbEstoqueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbEstoque update
   */
  export type tbEstoqueUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The data needed to update a tbEstoque.
     */
    data: XOR<tbEstoqueUpdateInput, tbEstoqueUncheckedUpdateInput>
    /**
     * Choose, which tbEstoque to update.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque updateMany
   */
  export type tbEstoqueUpdateManyArgs = {
    /**
     * The data used to update tbEstoques.
     */
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyInput>
    /**
     * Filter which tbEstoques to update
     */
    where?: tbEstoqueWhereInput
  }


  /**
   * tbEstoque upsert
   */
  export type tbEstoqueUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * The filter to search for the tbEstoque to update in case it exists.
     */
    where: tbEstoqueWhereUniqueInput
    /**
     * In case the tbEstoque found by the `where` argument doesn't exist, create a new tbEstoque with this data.
     */
    create: XOR<tbEstoqueCreateInput, tbEstoqueUncheckedCreateInput>
    /**
     * In case the tbEstoque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbEstoqueUpdateInput, tbEstoqueUncheckedUpdateInput>
  }


  /**
   * tbEstoque delete
   */
  export type tbEstoqueDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    /**
     * Filter which tbEstoque to delete.
     */
    where: tbEstoqueWhereUniqueInput
  }


  /**
   * tbEstoque deleteMany
   */
  export type tbEstoqueDeleteManyArgs = {
    /**
     * Filter which tbEstoques to delete
     */
    where?: tbEstoqueWhereInput
  }


  /**
   * tbEstoque without action
   */
  export type tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
  }



  /**
   * Model tbLocais
   */


  export type AggregateTbLocais = {
    _count: TbLocaisCountAggregateOutputType | null
    _avg: TbLocaisAvgAggregateOutputType | null
    _sum: TbLocaisSumAggregateOutputType | null
    _min: TbLocaisMinAggregateOutputType | null
    _max: TbLocaisMaxAggregateOutputType | null
  }

  export type TbLocaisAvgAggregateOutputType = {
    idlocal: number | null
  }

  export type TbLocaisSumAggregateOutputType = {
    idlocal: number | null
  }

  export type TbLocaisMinAggregateOutputType = {
    idlocal: number | null
    nomelocal: string | null
  }

  export type TbLocaisMaxAggregateOutputType = {
    idlocal: number | null
    nomelocal: string | null
  }

  export type TbLocaisCountAggregateOutputType = {
    idlocal: number
    nomelocal: number
    _all: number
  }


  export type TbLocaisAvgAggregateInputType = {
    idlocal?: true
  }

  export type TbLocaisSumAggregateInputType = {
    idlocal?: true
  }

  export type TbLocaisMinAggregateInputType = {
    idlocal?: true
    nomelocal?: true
  }

  export type TbLocaisMaxAggregateInputType = {
    idlocal?: true
    nomelocal?: true
  }

  export type TbLocaisCountAggregateInputType = {
    idlocal?: true
    nomelocal?: true
    _all?: true
  }

  export type TbLocaisAggregateArgs = {
    /**
     * Filter which tbLocais to aggregate.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbLocais
    **/
    _count?: true | TbLocaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbLocaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbLocaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbLocaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbLocaisMaxAggregateInputType
  }

  export type GetTbLocaisAggregateType<T extends TbLocaisAggregateArgs> = {
        [P in keyof T & keyof AggregateTbLocais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbLocais[P]>
      : GetScalarType<T[P], AggregateTbLocais[P]>
  }




  export type TbLocaisGroupByArgs = {
    where?: tbLocaisWhereInput
    orderBy?: Enumerable<tbLocaisOrderByWithAggregationInput>
    by: TbLocaisScalarFieldEnum[]
    having?: tbLocaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbLocaisCountAggregateInputType | true
    _avg?: TbLocaisAvgAggregateInputType
    _sum?: TbLocaisSumAggregateInputType
    _min?: TbLocaisMinAggregateInputType
    _max?: TbLocaisMaxAggregateInputType
  }


  export type TbLocaisGroupByOutputType = {
    idlocal: number
    nomelocal: string | null
    _count: TbLocaisCountAggregateOutputType | null
    _avg: TbLocaisAvgAggregateOutputType | null
    _sum: TbLocaisSumAggregateOutputType | null
    _min: TbLocaisMinAggregateOutputType | null
    _max: TbLocaisMaxAggregateOutputType | null
  }

  type GetTbLocaisGroupByPayload<T extends TbLocaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbLocaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbLocaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbLocaisGroupByOutputType[P]>
            : GetScalarType<T[P], TbLocaisGroupByOutputType[P]>
        }
      >
    >


  export type tbLocaisSelect = {
    idlocal?: boolean
    nomelocal?: boolean
    tbEstoque?: boolean | tbLocais$tbEstoqueArgs
    tbMovItens?: boolean | tbLocais$tbMovItensArgs
    _count?: boolean | TbLocaisCountOutputTypeArgs
  }


  export type tbLocaisInclude = {
    tbEstoque?: boolean | tbLocais$tbEstoqueArgs
    tbMovItens?: boolean | tbLocais$tbMovItensArgs
    _count?: boolean | TbLocaisCountOutputTypeArgs
  }

  export type tbLocaisGetPayload<S extends boolean | null | undefined | tbLocaisArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbLocais :
    S extends undefined ? never :
    S extends { include: any } & (tbLocaisArgs | tbLocaisFindManyArgs)
    ? tbLocais  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbLocaisCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbLocaisArgs | tbLocaisFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbLocaisCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbLocais ? tbLocais[P] : never
  } 
      : tbLocais


  type tbLocaisCountArgs = 
    Omit<tbLocaisFindManyArgs, 'select' | 'include'> & {
      select?: TbLocaisCountAggregateInputType | true
    }

  export interface tbLocaisDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbLocais that matches the filter.
     * @param {tbLocaisFindUniqueArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbLocaisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbLocaisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbLocais'> extends True ? Prisma__tbLocaisClient<tbLocaisGetPayload<T>> : Prisma__tbLocaisClient<tbLocaisGetPayload<T> | null, null>

    /**
     * Find one TbLocais that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbLocaisFindUniqueOrThrowArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbLocaisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbLocaisFindUniqueOrThrowArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Find the first TbLocais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindFirstArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbLocaisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbLocaisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbLocais'> extends True ? Prisma__tbLocaisClient<tbLocaisGetPayload<T>> : Prisma__tbLocaisClient<tbLocaisGetPayload<T> | null, null>

    /**
     * Find the first TbLocais that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindFirstOrThrowArgs} args - Arguments to find a TbLocais
     * @example
     * // Get one TbLocais
     * const tbLocais = await prisma.tbLocais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbLocaisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbLocaisFindFirstOrThrowArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Find zero or more TbLocais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbLocais
     * const tbLocais = await prisma.tbLocais.findMany()
     * 
     * // Get first 10 TbLocais
     * const tbLocais = await prisma.tbLocais.findMany({ take: 10 })
     * 
     * // Only select the `idlocal`
     * const tbLocaisWithIdlocalOnly = await prisma.tbLocais.findMany({ select: { idlocal: true } })
     * 
    **/
    findMany<T extends tbLocaisFindManyArgs>(
      args?: SelectSubset<T, tbLocaisFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbLocaisGetPayload<T>>>

    /**
     * Create a TbLocais.
     * @param {tbLocaisCreateArgs} args - Arguments to create a TbLocais.
     * @example
     * // Create one TbLocais
     * const TbLocais = await prisma.tbLocais.create({
     *   data: {
     *     // ... data to create a TbLocais
     *   }
     * })
     * 
    **/
    create<T extends tbLocaisCreateArgs>(
      args: SelectSubset<T, tbLocaisCreateArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Create many TbLocais.
     *     @param {tbLocaisCreateManyArgs} args - Arguments to create many TbLocais.
     *     @example
     *     // Create many TbLocais
     *     const tbLocais = await prisma.tbLocais.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbLocaisCreateManyArgs>(
      args?: SelectSubset<T, tbLocaisCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbLocais.
     * @param {tbLocaisDeleteArgs} args - Arguments to delete one TbLocais.
     * @example
     * // Delete one TbLocais
     * const TbLocais = await prisma.tbLocais.delete({
     *   where: {
     *     // ... filter to delete one TbLocais
     *   }
     * })
     * 
    **/
    delete<T extends tbLocaisDeleteArgs>(
      args: SelectSubset<T, tbLocaisDeleteArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Update one TbLocais.
     * @param {tbLocaisUpdateArgs} args - Arguments to update one TbLocais.
     * @example
     * // Update one TbLocais
     * const tbLocais = await prisma.tbLocais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbLocaisUpdateArgs>(
      args: SelectSubset<T, tbLocaisUpdateArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Delete zero or more TbLocais.
     * @param {tbLocaisDeleteManyArgs} args - Arguments to filter TbLocais to delete.
     * @example
     * // Delete a few TbLocais
     * const { count } = await prisma.tbLocais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbLocaisDeleteManyArgs>(
      args?: SelectSubset<T, tbLocaisDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbLocais
     * const tbLocais = await prisma.tbLocais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbLocaisUpdateManyArgs>(
      args: SelectSubset<T, tbLocaisUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbLocais.
     * @param {tbLocaisUpsertArgs} args - Arguments to update or create a TbLocais.
     * @example
     * // Update or create a TbLocais
     * const tbLocais = await prisma.tbLocais.upsert({
     *   create: {
     *     // ... data to create a TbLocais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbLocais we want to update
     *   }
     * })
    **/
    upsert<T extends tbLocaisUpsertArgs>(
      args: SelectSubset<T, tbLocaisUpsertArgs>
    ): Prisma__tbLocaisClient<tbLocaisGetPayload<T>>

    /**
     * Count the number of TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbLocaisCountArgs} args - Arguments to filter TbLocais to count.
     * @example
     * // Count the number of TbLocais
     * const count = await prisma.tbLocais.count({
     *   where: {
     *     // ... the filter for the TbLocais we want to count
     *   }
     * })
    **/
    count<T extends tbLocaisCountArgs>(
      args?: Subset<T, tbLocaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbLocaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbLocaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbLocaisAggregateArgs>(args: Subset<T, TbLocaisAggregateArgs>): Prisma.PrismaPromise<GetTbLocaisAggregateType<T>>

    /**
     * Group by TbLocais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbLocaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbLocaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbLocaisGroupByArgs['orderBy'] }
        : { orderBy?: TbLocaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbLocaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbLocaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbLocais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbLocaisClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbEstoque<T extends tbLocais$tbEstoqueArgs= {}>(args?: Subset<T, tbLocais$tbEstoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbMovItens<T extends tbLocais$tbMovItensArgs= {}>(args?: Subset<T, tbLocais$tbMovItensArgs>): Prisma.PrismaPromise<Array<tbMovItensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbLocais base type for findUnique actions
   */
  export type tbLocaisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where: tbLocaisWhereUniqueInput
  }

  /**
   * tbLocais findUnique
   */
  export interface tbLocaisFindUniqueArgs extends tbLocaisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbLocais findUniqueOrThrow
   */
  export type tbLocaisFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais base type for findFirst actions
   */
  export type tbLocaisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbLocais.
     */
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }

  /**
   * tbLocais findFirst
   */
  export interface tbLocaisFindFirstArgs extends tbLocaisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbLocais findFirstOrThrow
   */
  export type tbLocaisFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbLocais.
     */
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }


  /**
   * tbLocais findMany
   */
  export type tbLocaisFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter, which tbLocais to fetch.
     */
    where?: tbLocaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbLocais to fetch.
     */
    orderBy?: Enumerable<tbLocaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbLocais.
     */
    cursor?: tbLocaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbLocais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbLocais.
     */
    skip?: number
    distinct?: Enumerable<TbLocaisScalarFieldEnum>
  }


  /**
   * tbLocais create
   */
  export type tbLocaisCreateArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The data needed to create a tbLocais.
     */
    data: XOR<tbLocaisCreateInput, tbLocaisUncheckedCreateInput>
  }


  /**
   * tbLocais createMany
   */
  export type tbLocaisCreateManyArgs = {
    /**
     * The data used to create many tbLocais.
     */
    data: Enumerable<tbLocaisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbLocais update
   */
  export type tbLocaisUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The data needed to update a tbLocais.
     */
    data: XOR<tbLocaisUpdateInput, tbLocaisUncheckedUpdateInput>
    /**
     * Choose, which tbLocais to update.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais updateMany
   */
  export type tbLocaisUpdateManyArgs = {
    /**
     * The data used to update tbLocais.
     */
    data: XOR<tbLocaisUpdateManyMutationInput, tbLocaisUncheckedUpdateManyInput>
    /**
     * Filter which tbLocais to update
     */
    where?: tbLocaisWhereInput
  }


  /**
   * tbLocais upsert
   */
  export type tbLocaisUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * The filter to search for the tbLocais to update in case it exists.
     */
    where: tbLocaisWhereUniqueInput
    /**
     * In case the tbLocais found by the `where` argument doesn't exist, create a new tbLocais with this data.
     */
    create: XOR<tbLocaisCreateInput, tbLocaisUncheckedCreateInput>
    /**
     * In case the tbLocais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbLocaisUpdateInput, tbLocaisUncheckedUpdateInput>
  }


  /**
   * tbLocais delete
   */
  export type tbLocaisDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
    /**
     * Filter which tbLocais to delete.
     */
    where: tbLocaisWhereUniqueInput
  }


  /**
   * tbLocais deleteMany
   */
  export type tbLocaisDeleteManyArgs = {
    /**
     * Filter which tbLocais to delete
     */
    where?: tbLocaisWhereInput
  }


  /**
   * tbLocais.tbEstoque
   */
  export type tbLocais$tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbLocais.tbMovItens
   */
  export type tbLocais$tbMovItensArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    where?: tbMovItensWhereInput
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    cursor?: tbMovItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }


  /**
   * tbLocais without action
   */
  export type tbLocaisArgs = {
    /**
     * Select specific fields to fetch from the tbLocais
     */
    select?: tbLocaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbLocaisInclude | null
  }



  /**
   * Model tbMovItens
   */


  export type AggregateTbMovItens = {
    _count: TbMovItensCountAggregateOutputType | null
    _avg: TbMovItensAvgAggregateOutputType | null
    _sum: TbMovItensSumAggregateOutputType | null
    _min: TbMovItensMinAggregateOutputType | null
    _max: TbMovItensMaxAggregateOutputType | null
  }

  export type TbMovItensAvgAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: number | null
  }

  export type TbMovItensSumAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    quantidade: number | null
  }

  export type TbMovItensMinAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    dtinc: Date | null
    quantidade: number | null
  }

  export type TbMovItensMaxAggregateOutputType = {
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    idlocal: number | null
    dtinc: Date | null
    quantidade: number | null
  }

  export type TbMovItensCountAggregateOutputType = {
    idmovimento: number
    seqitem: number
    idproduto: number
    idlocal: number
    dtinc: number
    quantidade: number
    _all: number
  }


  export type TbMovItensAvgAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbMovItensSumAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    quantidade?: true
  }

  export type TbMovItensMinAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
  }

  export type TbMovItensMaxAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
  }

  export type TbMovItensCountAggregateInputType = {
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    idlocal?: true
    dtinc?: true
    quantidade?: true
    _all?: true
  }

  export type TbMovItensAggregateArgs = {
    /**
     * Filter which tbMovItens to aggregate.
     */
    where?: tbMovItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovItens to fetch.
     */
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbMovItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbMovItens
    **/
    _count?: true | TbMovItensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbMovItensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbMovItensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbMovItensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbMovItensMaxAggregateInputType
  }

  export type GetTbMovItensAggregateType<T extends TbMovItensAggregateArgs> = {
        [P in keyof T & keyof AggregateTbMovItens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbMovItens[P]>
      : GetScalarType<T[P], AggregateTbMovItens[P]>
  }




  export type TbMovItensGroupByArgs = {
    where?: tbMovItensWhereInput
    orderBy?: Enumerable<tbMovItensOrderByWithAggregationInput>
    by: TbMovItensScalarFieldEnum[]
    having?: tbMovItensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbMovItensCountAggregateInputType | true
    _avg?: TbMovItensAvgAggregateInputType
    _sum?: TbMovItensSumAggregateInputType
    _min?: TbMovItensMinAggregateInputType
    _max?: TbMovItensMaxAggregateInputType
  }


  export type TbMovItensGroupByOutputType = {
    idmovimento: number
    seqitem: number
    idproduto: number
    idlocal: number | null
    dtinc: Date | null
    quantidade: number | null
    _count: TbMovItensCountAggregateOutputType | null
    _avg: TbMovItensAvgAggregateOutputType | null
    _sum: TbMovItensSumAggregateOutputType | null
    _min: TbMovItensMinAggregateOutputType | null
    _max: TbMovItensMaxAggregateOutputType | null
  }

  type GetTbMovItensGroupByPayload<T extends TbMovItensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbMovItensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbMovItensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbMovItensGroupByOutputType[P]>
            : GetScalarType<T[P], TbMovItensGroupByOutputType[P]>
        }
      >
    >


  export type tbMovItensSelect = {
    idmovimento?: boolean
    seqitem?: boolean
    idproduto?: boolean
    idlocal?: boolean
    dtinc?: boolean
    quantidade?: boolean
    tbEstoque?: boolean | tbMovItens$tbEstoqueArgs
    tbLocais?: boolean | tbLocaisArgs
    tbMovimentos?: boolean | tbMovimentosArgs
    tbProdutos?: boolean | tbProdutosArgs
    tbNFItens?: boolean | tbMovItens$tbNFItensArgs
    _count?: boolean | TbMovItensCountOutputTypeArgs
  }


  export type tbMovItensInclude = {
    tbEstoque?: boolean | tbMovItens$tbEstoqueArgs
    tbLocais?: boolean | tbLocaisArgs
    tbMovimentos?: boolean | tbMovimentosArgs
    tbProdutos?: boolean | tbProdutosArgs
    tbNFItens?: boolean | tbMovItens$tbNFItensArgs
    _count?: boolean | TbMovItensCountOutputTypeArgs
  }

  export type tbMovItensGetPayload<S extends boolean | null | undefined | tbMovItensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbMovItens :
    S extends undefined ? never :
    S extends { include: any } & (tbMovItensArgs | tbMovItensFindManyArgs)
    ? tbMovItens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbLocais' ? tbLocaisGetPayload<S['include'][P]> | null :
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['include'][P]> :
        P extends 'tbProdutos' ? tbProdutosGetPayload<S['include'][P]> :
        P extends 'tbNFItens' ? Array < tbNFItensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbMovItensCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbMovItensArgs | tbMovItensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbLocais' ? tbLocaisGetPayload<S['select'][P]> | null :
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['select'][P]> :
        P extends 'tbProdutos' ? tbProdutosGetPayload<S['select'][P]> :
        P extends 'tbNFItens' ? Array < tbNFItensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbMovItensCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbMovItens ? tbMovItens[P] : never
  } 
      : tbMovItens


  type tbMovItensCountArgs = 
    Omit<tbMovItensFindManyArgs, 'select' | 'include'> & {
      select?: TbMovItensCountAggregateInputType | true
    }

  export interface tbMovItensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbMovItens that matches the filter.
     * @param {tbMovItensFindUniqueArgs} args - Arguments to find a TbMovItens
     * @example
     * // Get one TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbMovItensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbMovItensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbMovItens'> extends True ? Prisma__tbMovItensClient<tbMovItensGetPayload<T>> : Prisma__tbMovItensClient<tbMovItensGetPayload<T> | null, null>

    /**
     * Find one TbMovItens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbMovItensFindUniqueOrThrowArgs} args - Arguments to find a TbMovItens
     * @example
     * // Get one TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbMovItensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbMovItensFindUniqueOrThrowArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Find the first TbMovItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovItensFindFirstArgs} args - Arguments to find a TbMovItens
     * @example
     * // Get one TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbMovItensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbMovItensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbMovItens'> extends True ? Prisma__tbMovItensClient<tbMovItensGetPayload<T>> : Prisma__tbMovItensClient<tbMovItensGetPayload<T> | null, null>

    /**
     * Find the first TbMovItens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovItensFindFirstOrThrowArgs} args - Arguments to find a TbMovItens
     * @example
     * // Get one TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbMovItensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbMovItensFindFirstOrThrowArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Find zero or more TbMovItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovItensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findMany()
     * 
     * // Get first 10 TbMovItens
     * const tbMovItens = await prisma.tbMovItens.findMany({ take: 10 })
     * 
     * // Only select the `idmovimento`
     * const tbMovItensWithIdmovimentoOnly = await prisma.tbMovItens.findMany({ select: { idmovimento: true } })
     * 
    **/
    findMany<T extends tbMovItensFindManyArgs>(
      args?: SelectSubset<T, tbMovItensFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbMovItensGetPayload<T>>>

    /**
     * Create a TbMovItens.
     * @param {tbMovItensCreateArgs} args - Arguments to create a TbMovItens.
     * @example
     * // Create one TbMovItens
     * const TbMovItens = await prisma.tbMovItens.create({
     *   data: {
     *     // ... data to create a TbMovItens
     *   }
     * })
     * 
    **/
    create<T extends tbMovItensCreateArgs>(
      args: SelectSubset<T, tbMovItensCreateArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Create many TbMovItens.
     *     @param {tbMovItensCreateManyArgs} args - Arguments to create many TbMovItens.
     *     @example
     *     // Create many TbMovItens
     *     const tbMovItens = await prisma.tbMovItens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbMovItensCreateManyArgs>(
      args?: SelectSubset<T, tbMovItensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbMovItens.
     * @param {tbMovItensDeleteArgs} args - Arguments to delete one TbMovItens.
     * @example
     * // Delete one TbMovItens
     * const TbMovItens = await prisma.tbMovItens.delete({
     *   where: {
     *     // ... filter to delete one TbMovItens
     *   }
     * })
     * 
    **/
    delete<T extends tbMovItensDeleteArgs>(
      args: SelectSubset<T, tbMovItensDeleteArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Update one TbMovItens.
     * @param {tbMovItensUpdateArgs} args - Arguments to update one TbMovItens.
     * @example
     * // Update one TbMovItens
     * const tbMovItens = await prisma.tbMovItens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbMovItensUpdateArgs>(
      args: SelectSubset<T, tbMovItensUpdateArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Delete zero or more TbMovItens.
     * @param {tbMovItensDeleteManyArgs} args - Arguments to filter TbMovItens to delete.
     * @example
     * // Delete a few TbMovItens
     * const { count } = await prisma.tbMovItens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbMovItensDeleteManyArgs>(
      args?: SelectSubset<T, tbMovItensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbMovItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovItensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbMovItens
     * const tbMovItens = await prisma.tbMovItens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbMovItensUpdateManyArgs>(
      args: SelectSubset<T, tbMovItensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbMovItens.
     * @param {tbMovItensUpsertArgs} args - Arguments to update or create a TbMovItens.
     * @example
     * // Update or create a TbMovItens
     * const tbMovItens = await prisma.tbMovItens.upsert({
     *   create: {
     *     // ... data to create a TbMovItens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbMovItens we want to update
     *   }
     * })
    **/
    upsert<T extends tbMovItensUpsertArgs>(
      args: SelectSubset<T, tbMovItensUpsertArgs>
    ): Prisma__tbMovItensClient<tbMovItensGetPayload<T>>

    /**
     * Count the number of TbMovItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovItensCountArgs} args - Arguments to filter TbMovItens to count.
     * @example
     * // Count the number of TbMovItens
     * const count = await prisma.tbMovItens.count({
     *   where: {
     *     // ... the filter for the TbMovItens we want to count
     *   }
     * })
    **/
    count<T extends tbMovItensCountArgs>(
      args?: Subset<T, tbMovItensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbMovItensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbMovItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovItensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbMovItensAggregateArgs>(args: Subset<T, TbMovItensAggregateArgs>): Prisma.PrismaPromise<GetTbMovItensAggregateType<T>>

    /**
     * Group by TbMovItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovItensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbMovItensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbMovItensGroupByArgs['orderBy'] }
        : { orderBy?: TbMovItensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbMovItensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbMovItensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbMovItens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbMovItensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbEstoque<T extends tbMovItens$tbEstoqueArgs= {}>(args?: Subset<T, tbMovItens$tbEstoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbLocais<T extends tbLocaisArgs= {}>(args?: Subset<T, tbLocaisArgs>): Prisma__tbLocaisClient<tbLocaisGetPayload<T> | Null>;

    tbMovimentos<T extends tbMovimentosArgs= {}>(args?: Subset<T, tbMovimentosArgs>): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | Null>;

    tbProdutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    tbNFItens<T extends tbMovItens$tbNFItensArgs= {}>(args?: Subset<T, tbMovItens$tbNFItensArgs>): Prisma.PrismaPromise<Array<tbNFItensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbMovItens base type for findUnique actions
   */
  export type tbMovItensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter, which tbMovItens to fetch.
     */
    where: tbMovItensWhereUniqueInput
  }

  /**
   * tbMovItens findUnique
   */
  export interface tbMovItensFindUniqueArgs extends tbMovItensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovItens findUniqueOrThrow
   */
  export type tbMovItensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter, which tbMovItens to fetch.
     */
    where: tbMovItensWhereUniqueInput
  }


  /**
   * tbMovItens base type for findFirst actions
   */
  export type tbMovItensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter, which tbMovItens to fetch.
     */
    where?: tbMovItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovItens to fetch.
     */
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovItens.
     */
    cursor?: tbMovItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovItens.
     */
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }

  /**
   * tbMovItens findFirst
   */
  export interface tbMovItensFindFirstArgs extends tbMovItensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovItens findFirstOrThrow
   */
  export type tbMovItensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter, which tbMovItens to fetch.
     */
    where?: tbMovItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovItens to fetch.
     */
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovItens.
     */
    cursor?: tbMovItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovItens.
     */
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }


  /**
   * tbMovItens findMany
   */
  export type tbMovItensFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter, which tbMovItens to fetch.
     */
    where?: tbMovItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovItens to fetch.
     */
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbMovItens.
     */
    cursor?: tbMovItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovItens.
     */
    skip?: number
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }


  /**
   * tbMovItens create
   */
  export type tbMovItensCreateArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * The data needed to create a tbMovItens.
     */
    data: XOR<tbMovItensCreateInput, tbMovItensUncheckedCreateInput>
  }


  /**
   * tbMovItens createMany
   */
  export type tbMovItensCreateManyArgs = {
    /**
     * The data used to create many tbMovItens.
     */
    data: Enumerable<tbMovItensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbMovItens update
   */
  export type tbMovItensUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * The data needed to update a tbMovItens.
     */
    data: XOR<tbMovItensUpdateInput, tbMovItensUncheckedUpdateInput>
    /**
     * Choose, which tbMovItens to update.
     */
    where: tbMovItensWhereUniqueInput
  }


  /**
   * tbMovItens updateMany
   */
  export type tbMovItensUpdateManyArgs = {
    /**
     * The data used to update tbMovItens.
     */
    data: XOR<tbMovItensUpdateManyMutationInput, tbMovItensUncheckedUpdateManyInput>
    /**
     * Filter which tbMovItens to update
     */
    where?: tbMovItensWhereInput
  }


  /**
   * tbMovItens upsert
   */
  export type tbMovItensUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * The filter to search for the tbMovItens to update in case it exists.
     */
    where: tbMovItensWhereUniqueInput
    /**
     * In case the tbMovItens found by the `where` argument doesn't exist, create a new tbMovItens with this data.
     */
    create: XOR<tbMovItensCreateInput, tbMovItensUncheckedCreateInput>
    /**
     * In case the tbMovItens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbMovItensUpdateInput, tbMovItensUncheckedUpdateInput>
  }


  /**
   * tbMovItens delete
   */
  export type tbMovItensDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    /**
     * Filter which tbMovItens to delete.
     */
    where: tbMovItensWhereUniqueInput
  }


  /**
   * tbMovItens deleteMany
   */
  export type tbMovItensDeleteManyArgs = {
    /**
     * Filter which tbMovItens to delete
     */
    where?: tbMovItensWhereInput
  }


  /**
   * tbMovItens.tbEstoque
   */
  export type tbMovItens$tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbMovItens.tbNFItens
   */
  export type tbMovItens$tbNFItensArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    where?: tbNFItensWhereInput
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    cursor?: tbNFItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNFItensScalarFieldEnum>
  }


  /**
   * tbMovItens without action
   */
  export type tbMovItensArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
  }



  /**
   * Model tbMovimentos
   */


  export type AggregateTbMovimentos = {
    _count: TbMovimentosCountAggregateOutputType | null
    _avg: TbMovimentosAvgAggregateOutputType | null
    _sum: TbMovimentosSumAggregateOutputType | null
    _min: TbMovimentosMinAggregateOutputType | null
    _max: TbMovimentosMaxAggregateOutputType | null
  }

  export type TbMovimentosAvgAggregateOutputType = {
    idmovimento: number | null
    idfor: number | null
    idusuario_alteracao: number | null
  }

  export type TbMovimentosSumAggregateOutputType = {
    idmovimento: number | null
    idfor: number | null
    idusuario_alteracao: number | null
  }

  export type TbMovimentosMinAggregateOutputType = {
    idmovimento: number | null
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
  }

  export type TbMovimentosMaxAggregateOutputType = {
    idmovimento: number | null
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
  }

  export type TbMovimentosCountAggregateOutputType = {
    idmovimento: number
    tipmov: number
    idfor: number
    idusuario_alteracao: number
    dtinc: number
    _all: number
  }


  export type TbMovimentosAvgAggregateInputType = {
    idmovimento?: true
    idfor?: true
    idusuario_alteracao?: true
  }

  export type TbMovimentosSumAggregateInputType = {
    idmovimento?: true
    idfor?: true
    idusuario_alteracao?: true
  }

  export type TbMovimentosMinAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
  }

  export type TbMovimentosMaxAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
  }

  export type TbMovimentosCountAggregateInputType = {
    idmovimento?: true
    tipmov?: true
    idfor?: true
    idusuario_alteracao?: true
    dtinc?: true
    _all?: true
  }

  export type TbMovimentosAggregateArgs = {
    /**
     * Filter which tbMovimentos to aggregate.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbMovimentos
    **/
    _count?: true | TbMovimentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbMovimentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbMovimentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbMovimentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbMovimentosMaxAggregateInputType
  }

  export type GetTbMovimentosAggregateType<T extends TbMovimentosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbMovimentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbMovimentos[P]>
      : GetScalarType<T[P], AggregateTbMovimentos[P]>
  }




  export type TbMovimentosGroupByArgs = {
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithAggregationInput>
    by: TbMovimentosScalarFieldEnum[]
    having?: tbMovimentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbMovimentosCountAggregateInputType | true
    _avg?: TbMovimentosAvgAggregateInputType
    _sum?: TbMovimentosSumAggregateInputType
    _min?: TbMovimentosMinAggregateInputType
    _max?: TbMovimentosMaxAggregateInputType
  }


  export type TbMovimentosGroupByOutputType = {
    idmovimento: number
    tipmov: string | null
    idfor: number | null
    idusuario_alteracao: number | null
    dtinc: Date | null
    _count: TbMovimentosCountAggregateOutputType | null
    _avg: TbMovimentosAvgAggregateOutputType | null
    _sum: TbMovimentosSumAggregateOutputType | null
    _min: TbMovimentosMinAggregateOutputType | null
    _max: TbMovimentosMaxAggregateOutputType | null
  }

  type GetTbMovimentosGroupByPayload<T extends TbMovimentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbMovimentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbMovimentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbMovimentosGroupByOutputType[P]>
            : GetScalarType<T[P], TbMovimentosGroupByOutputType[P]>
        }
      >
    >


  export type tbMovimentosSelect = {
    idmovimento?: boolean
    tipmov?: boolean
    idfor?: boolean
    idusuario_alteracao?: boolean
    dtinc?: boolean
    tbEstoque?: boolean | tbMovimentos$tbEstoqueArgs
    tbMovItens?: boolean | tbMovimentos$tbMovItensArgs
    tbFornecedores?: boolean | tbFornecedoresArgs
    tbUsuarios?: boolean | tbUsuariosArgs
    tbNF?: boolean | tbMovimentos$tbNFArgs
    _count?: boolean | TbMovimentosCountOutputTypeArgs
  }


  export type tbMovimentosInclude = {
    tbEstoque?: boolean | tbMovimentos$tbEstoqueArgs
    tbMovItens?: boolean | tbMovimentos$tbMovItensArgs
    tbFornecedores?: boolean | tbFornecedoresArgs
    tbUsuarios?: boolean | tbUsuariosArgs
    tbNF?: boolean | tbMovimentos$tbNFArgs
    _count?: boolean | TbMovimentosCountOutputTypeArgs
  }

  export type tbMovimentosGetPayload<S extends boolean | null | undefined | tbMovimentosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbMovimentos :
    S extends undefined ? never :
    S extends { include: any } & (tbMovimentosArgs | tbMovimentosFindManyArgs)
    ? tbMovimentos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['include'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['include'][P]>>  :
        P extends 'tbFornecedores' ? tbFornecedoresGetPayload<S['include'][P]> | null :
        P extends 'tbUsuarios' ? tbUsuariosGetPayload<S['include'][P]> | null :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbMovimentosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbMovimentosArgs | tbMovimentosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbEstoque' ? Array < tbEstoqueGetPayload<S['select'][P]>>  :
        P extends 'tbMovItens' ? Array < tbMovItensGetPayload<S['select'][P]>>  :
        P extends 'tbFornecedores' ? tbFornecedoresGetPayload<S['select'][P]> | null :
        P extends 'tbUsuarios' ? tbUsuariosGetPayload<S['select'][P]> | null :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbMovimentosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbMovimentos ? tbMovimentos[P] : never
  } 
      : tbMovimentos


  type tbMovimentosCountArgs = 
    Omit<tbMovimentosFindManyArgs, 'select' | 'include'> & {
      select?: TbMovimentosCountAggregateInputType | true
    }

  export interface tbMovimentosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbMovimentos that matches the filter.
     * @param {tbMovimentosFindUniqueArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbMovimentosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbMovimentosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbMovimentos'> extends True ? Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>> : Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | null, null>

    /**
     * Find one TbMovimentos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbMovimentosFindUniqueOrThrowArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbMovimentosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbMovimentosFindUniqueOrThrowArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Find the first TbMovimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindFirstArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbMovimentosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbMovimentosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbMovimentos'> extends True ? Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>> : Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | null, null>

    /**
     * Find the first TbMovimentos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindFirstOrThrowArgs} args - Arguments to find a TbMovimentos
     * @example
     * // Get one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbMovimentosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbMovimentosFindFirstOrThrowArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Find zero or more TbMovimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findMany()
     * 
     * // Get first 10 TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.findMany({ take: 10 })
     * 
     * // Only select the `idmovimento`
     * const tbMovimentosWithIdmovimentoOnly = await prisma.tbMovimentos.findMany({ select: { idmovimento: true } })
     * 
    **/
    findMany<T extends tbMovimentosFindManyArgs>(
      args?: SelectSubset<T, tbMovimentosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>>

    /**
     * Create a TbMovimentos.
     * @param {tbMovimentosCreateArgs} args - Arguments to create a TbMovimentos.
     * @example
     * // Create one TbMovimentos
     * const TbMovimentos = await prisma.tbMovimentos.create({
     *   data: {
     *     // ... data to create a TbMovimentos
     *   }
     * })
     * 
    **/
    create<T extends tbMovimentosCreateArgs>(
      args: SelectSubset<T, tbMovimentosCreateArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Create many TbMovimentos.
     *     @param {tbMovimentosCreateManyArgs} args - Arguments to create many TbMovimentos.
     *     @example
     *     // Create many TbMovimentos
     *     const tbMovimentos = await prisma.tbMovimentos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbMovimentosCreateManyArgs>(
      args?: SelectSubset<T, tbMovimentosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbMovimentos.
     * @param {tbMovimentosDeleteArgs} args - Arguments to delete one TbMovimentos.
     * @example
     * // Delete one TbMovimentos
     * const TbMovimentos = await prisma.tbMovimentos.delete({
     *   where: {
     *     // ... filter to delete one TbMovimentos
     *   }
     * })
     * 
    **/
    delete<T extends tbMovimentosDeleteArgs>(
      args: SelectSubset<T, tbMovimentosDeleteArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Update one TbMovimentos.
     * @param {tbMovimentosUpdateArgs} args - Arguments to update one TbMovimentos.
     * @example
     * // Update one TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbMovimentosUpdateArgs>(
      args: SelectSubset<T, tbMovimentosUpdateArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Delete zero or more TbMovimentos.
     * @param {tbMovimentosDeleteManyArgs} args - Arguments to filter TbMovimentos to delete.
     * @example
     * // Delete a few TbMovimentos
     * const { count } = await prisma.tbMovimentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbMovimentosDeleteManyArgs>(
      args?: SelectSubset<T, tbMovimentosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbMovimentosUpdateManyArgs>(
      args: SelectSubset<T, tbMovimentosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbMovimentos.
     * @param {tbMovimentosUpsertArgs} args - Arguments to update or create a TbMovimentos.
     * @example
     * // Update or create a TbMovimentos
     * const tbMovimentos = await prisma.tbMovimentos.upsert({
     *   create: {
     *     // ... data to create a TbMovimentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbMovimentos we want to update
     *   }
     * })
    **/
    upsert<T extends tbMovimentosUpsertArgs>(
      args: SelectSubset<T, tbMovimentosUpsertArgs>
    ): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T>>

    /**
     * Count the number of TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbMovimentosCountArgs} args - Arguments to filter TbMovimentos to count.
     * @example
     * // Count the number of TbMovimentos
     * const count = await prisma.tbMovimentos.count({
     *   where: {
     *     // ... the filter for the TbMovimentos we want to count
     *   }
     * })
    **/
    count<T extends tbMovimentosCountArgs>(
      args?: Subset<T, tbMovimentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbMovimentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovimentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbMovimentosAggregateArgs>(args: Subset<T, TbMovimentosAggregateArgs>): Prisma.PrismaPromise<GetTbMovimentosAggregateType<T>>

    /**
     * Group by TbMovimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbMovimentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbMovimentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbMovimentosGroupByArgs['orderBy'] }
        : { orderBy?: TbMovimentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbMovimentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbMovimentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbMovimentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbMovimentosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbEstoque<T extends tbMovimentos$tbEstoqueArgs= {}>(args?: Subset<T, tbMovimentos$tbEstoqueArgs>): Prisma.PrismaPromise<Array<tbEstoqueGetPayload<T>>| Null>;

    tbMovItens<T extends tbMovimentos$tbMovItensArgs= {}>(args?: Subset<T, tbMovimentos$tbMovItensArgs>): Prisma.PrismaPromise<Array<tbMovItensGetPayload<T>>| Null>;

    tbFornecedores<T extends tbFornecedoresArgs= {}>(args?: Subset<T, tbFornecedoresArgs>): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | Null>;

    tbUsuarios<T extends tbUsuariosArgs= {}>(args?: Subset<T, tbUsuariosArgs>): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | Null>;

    tbNF<T extends tbMovimentos$tbNFArgs= {}>(args?: Subset<T, tbMovimentos$tbNFArgs>): Prisma.PrismaPromise<Array<tbNFGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbMovimentos base type for findUnique actions
   */
  export type tbMovimentosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where: tbMovimentosWhereUniqueInput
  }

  /**
   * tbMovimentos findUnique
   */
  export interface tbMovimentosFindUniqueArgs extends tbMovimentosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovimentos findUniqueOrThrow
   */
  export type tbMovimentosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos base type for findFirst actions
   */
  export type tbMovimentosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovimentos.
     */
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }

  /**
   * tbMovimentos findFirst
   */
  export interface tbMovimentosFindFirstArgs extends tbMovimentosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbMovimentos findFirstOrThrow
   */
  export type tbMovimentosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbMovimentos.
     */
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbMovimentos findMany
   */
  export type tbMovimentosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter, which tbMovimentos to fetch.
     */
    where?: tbMovimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbMovimentos to fetch.
     */
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbMovimentos.
     */
    cursor?: tbMovimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbMovimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbMovimentos.
     */
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbMovimentos create
   */
  export type tbMovimentosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The data needed to create a tbMovimentos.
     */
    data: XOR<tbMovimentosCreateInput, tbMovimentosUncheckedCreateInput>
  }


  /**
   * tbMovimentos createMany
   */
  export type tbMovimentosCreateManyArgs = {
    /**
     * The data used to create many tbMovimentos.
     */
    data: Enumerable<tbMovimentosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbMovimentos update
   */
  export type tbMovimentosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The data needed to update a tbMovimentos.
     */
    data: XOR<tbMovimentosUpdateInput, tbMovimentosUncheckedUpdateInput>
    /**
     * Choose, which tbMovimentos to update.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos updateMany
   */
  export type tbMovimentosUpdateManyArgs = {
    /**
     * The data used to update tbMovimentos.
     */
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyInput>
    /**
     * Filter which tbMovimentos to update
     */
    where?: tbMovimentosWhereInput
  }


  /**
   * tbMovimentos upsert
   */
  export type tbMovimentosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * The filter to search for the tbMovimentos to update in case it exists.
     */
    where: tbMovimentosWhereUniqueInput
    /**
     * In case the tbMovimentos found by the `where` argument doesn't exist, create a new tbMovimentos with this data.
     */
    create: XOR<tbMovimentosCreateInput, tbMovimentosUncheckedCreateInput>
    /**
     * In case the tbMovimentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbMovimentosUpdateInput, tbMovimentosUncheckedUpdateInput>
  }


  /**
   * tbMovimentos delete
   */
  export type tbMovimentosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    /**
     * Filter which tbMovimentos to delete.
     */
    where: tbMovimentosWhereUniqueInput
  }


  /**
   * tbMovimentos deleteMany
   */
  export type tbMovimentosDeleteManyArgs = {
    /**
     * Filter which tbMovimentos to delete
     */
    where?: tbMovimentosWhereInput
  }


  /**
   * tbMovimentos.tbEstoque
   */
  export type tbMovimentos$tbEstoqueArgs = {
    /**
     * Select specific fields to fetch from the tbEstoque
     */
    select?: tbEstoqueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbEstoqueInclude | null
    where?: tbEstoqueWhereInput
    orderBy?: Enumerable<tbEstoqueOrderByWithRelationInput>
    cursor?: tbEstoqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbEstoqueScalarFieldEnum>
  }


  /**
   * tbMovimentos.tbMovItens
   */
  export type tbMovimentos$tbMovItensArgs = {
    /**
     * Select specific fields to fetch from the tbMovItens
     */
    select?: tbMovItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovItensInclude | null
    where?: tbMovItensWhereInput
    orderBy?: Enumerable<tbMovItensOrderByWithRelationInput>
    cursor?: tbMovItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovItensScalarFieldEnum>
  }


  /**
   * tbMovimentos.tbNF
   */
  export type tbMovimentos$tbNFArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    where?: tbNFWhereInput
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    cursor?: tbNFWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }


  /**
   * tbMovimentos without action
   */
  export type tbMovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
  }



  /**
   * Model tbNF
   */


  export type AggregateTbNF = {
    _count: TbNFCountAggregateOutputType | null
    _avg: TbNFAvgAggregateOutputType | null
    _sum: TbNFSumAggregateOutputType | null
    _min: TbNFMinAggregateOutputType | null
    _max: TbNFMaxAggregateOutputType | null
  }

  export type TbNFAvgAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    vlrtotal: number | null
  }

  export type TbNFSumAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    vlrtotal: number | null
  }

  export type TbNFMinAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: number | null
  }

  export type TbNFMaxAggregateOutputType = {
    idnf: number | null
    numnf: number | null
    idmovimento: number | null
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: number | null
  }

  export type TbNFCountAggregateOutputType = {
    idnf: number
    numnf: number
    idmovimento: number
    serienf: number
    idfor: number
    idusuario_inclusao: number
    dtemissao: number
    vlrtotal: number
    _all: number
  }


  export type TbNFAvgAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    vlrtotal?: true
  }

  export type TbNFSumAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    vlrtotal?: true
  }

  export type TbNFMinAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
  }

  export type TbNFMaxAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
  }

  export type TbNFCountAggregateInputType = {
    idnf?: true
    numnf?: true
    idmovimento?: true
    serienf?: true
    idfor?: true
    idusuario_inclusao?: true
    dtemissao?: true
    vlrtotal?: true
    _all?: true
  }

  export type TbNFAggregateArgs = {
    /**
     * Filter which tbNF to aggregate.
     */
    where?: tbNFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFS to fetch.
     */
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbNFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbNFS
    **/
    _count?: true | TbNFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbNFAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbNFSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbNFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbNFMaxAggregateInputType
  }

  export type GetTbNFAggregateType<T extends TbNFAggregateArgs> = {
        [P in keyof T & keyof AggregateTbNF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbNF[P]>
      : GetScalarType<T[P], AggregateTbNF[P]>
  }




  export type TbNFGroupByArgs = {
    where?: tbNFWhereInput
    orderBy?: Enumerable<tbNFOrderByWithAggregationInput>
    by: TbNFScalarFieldEnum[]
    having?: tbNFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbNFCountAggregateInputType | true
    _avg?: TbNFAvgAggregateInputType
    _sum?: TbNFSumAggregateInputType
    _min?: TbNFMinAggregateInputType
    _max?: TbNFMaxAggregateInputType
  }


  export type TbNFGroupByOutputType = {
    idnf: number
    numnf: number | null
    idmovimento: number
    serienf: number | null
    idfor: number | null
    idusuario_inclusao: number | null
    dtemissao: Date | null
    vlrtotal: number | null
    _count: TbNFCountAggregateOutputType | null
    _avg: TbNFAvgAggregateOutputType | null
    _sum: TbNFSumAggregateOutputType | null
    _min: TbNFMinAggregateOutputType | null
    _max: TbNFMaxAggregateOutputType | null
  }

  type GetTbNFGroupByPayload<T extends TbNFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbNFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbNFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbNFGroupByOutputType[P]>
            : GetScalarType<T[P], TbNFGroupByOutputType[P]>
        }
      >
    >


  export type tbNFSelect = {
    idnf?: boolean
    numnf?: boolean
    idmovimento?: boolean
    serienf?: boolean
    idfor?: boolean
    idusuario_inclusao?: boolean
    dtemissao?: boolean
    vlrtotal?: boolean
    tbMovimentos?: boolean | tbMovimentosArgs
    tbFornecedores?: boolean | tbFornecedoresArgs
    tbUsuarios?: boolean | tbUsuariosArgs
    tbNFItens?: boolean | tbNF$tbNFItensArgs
    _count?: boolean | TbNFCountOutputTypeArgs
  }


  export type tbNFInclude = {
    tbMovimentos?: boolean | tbMovimentosArgs
    tbFornecedores?: boolean | tbFornecedoresArgs
    tbUsuarios?: boolean | tbUsuariosArgs
    tbNFItens?: boolean | tbNF$tbNFItensArgs
    _count?: boolean | TbNFCountOutputTypeArgs
  }

  export type tbNFGetPayload<S extends boolean | null | undefined | tbNFArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbNF :
    S extends undefined ? never :
    S extends { include: any } & (tbNFArgs | tbNFFindManyArgs)
    ? tbNF  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['include'][P]> :
        P extends 'tbFornecedores' ? tbFornecedoresGetPayload<S['include'][P]> | null :
        P extends 'tbUsuarios' ? tbUsuariosGetPayload<S['include'][P]> | null :
        P extends 'tbNFItens' ? Array < tbNFItensGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbNFCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbNFArgs | tbNFFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbMovimentos' ? tbMovimentosGetPayload<S['select'][P]> :
        P extends 'tbFornecedores' ? tbFornecedoresGetPayload<S['select'][P]> | null :
        P extends 'tbUsuarios' ? tbUsuariosGetPayload<S['select'][P]> | null :
        P extends 'tbNFItens' ? Array < tbNFItensGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbNFCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbNF ? tbNF[P] : never
  } 
      : tbNF


  type tbNFCountArgs = 
    Omit<tbNFFindManyArgs, 'select' | 'include'> & {
      select?: TbNFCountAggregateInputType | true
    }

  export interface tbNFDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbNF that matches the filter.
     * @param {tbNFFindUniqueArgs} args - Arguments to find a TbNF
     * @example
     * // Get one TbNF
     * const tbNF = await prisma.tbNF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbNFFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbNFFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbNF'> extends True ? Prisma__tbNFClient<tbNFGetPayload<T>> : Prisma__tbNFClient<tbNFGetPayload<T> | null, null>

    /**
     * Find one TbNF that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbNFFindUniqueOrThrowArgs} args - Arguments to find a TbNF
     * @example
     * // Get one TbNF
     * const tbNF = await prisma.tbNF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbNFFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbNFFindUniqueOrThrowArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Find the first TbNF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFFindFirstArgs} args - Arguments to find a TbNF
     * @example
     * // Get one TbNF
     * const tbNF = await prisma.tbNF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbNFFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbNFFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbNF'> extends True ? Prisma__tbNFClient<tbNFGetPayload<T>> : Prisma__tbNFClient<tbNFGetPayload<T> | null, null>

    /**
     * Find the first TbNF that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFFindFirstOrThrowArgs} args - Arguments to find a TbNF
     * @example
     * // Get one TbNF
     * const tbNF = await prisma.tbNF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbNFFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbNFFindFirstOrThrowArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Find zero or more TbNFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbNFS
     * const tbNFS = await prisma.tbNF.findMany()
     * 
     * // Get first 10 TbNFS
     * const tbNFS = await prisma.tbNF.findMany({ take: 10 })
     * 
     * // Only select the `idnf`
     * const tbNFWithIdnfOnly = await prisma.tbNF.findMany({ select: { idnf: true } })
     * 
    **/
    findMany<T extends tbNFFindManyArgs>(
      args?: SelectSubset<T, tbNFFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbNFGetPayload<T>>>

    /**
     * Create a TbNF.
     * @param {tbNFCreateArgs} args - Arguments to create a TbNF.
     * @example
     * // Create one TbNF
     * const TbNF = await prisma.tbNF.create({
     *   data: {
     *     // ... data to create a TbNF
     *   }
     * })
     * 
    **/
    create<T extends tbNFCreateArgs>(
      args: SelectSubset<T, tbNFCreateArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Create many TbNFS.
     *     @param {tbNFCreateManyArgs} args - Arguments to create many TbNFS.
     *     @example
     *     // Create many TbNFS
     *     const tbNF = await prisma.tbNF.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbNFCreateManyArgs>(
      args?: SelectSubset<T, tbNFCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbNF.
     * @param {tbNFDeleteArgs} args - Arguments to delete one TbNF.
     * @example
     * // Delete one TbNF
     * const TbNF = await prisma.tbNF.delete({
     *   where: {
     *     // ... filter to delete one TbNF
     *   }
     * })
     * 
    **/
    delete<T extends tbNFDeleteArgs>(
      args: SelectSubset<T, tbNFDeleteArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Update one TbNF.
     * @param {tbNFUpdateArgs} args - Arguments to update one TbNF.
     * @example
     * // Update one TbNF
     * const tbNF = await prisma.tbNF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbNFUpdateArgs>(
      args: SelectSubset<T, tbNFUpdateArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Delete zero or more TbNFS.
     * @param {tbNFDeleteManyArgs} args - Arguments to filter TbNFS to delete.
     * @example
     * // Delete a few TbNFS
     * const { count } = await prisma.tbNF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbNFDeleteManyArgs>(
      args?: SelectSubset<T, tbNFDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbNFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbNFS
     * const tbNF = await prisma.tbNF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbNFUpdateManyArgs>(
      args: SelectSubset<T, tbNFUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbNF.
     * @param {tbNFUpsertArgs} args - Arguments to update or create a TbNF.
     * @example
     * // Update or create a TbNF
     * const tbNF = await prisma.tbNF.upsert({
     *   create: {
     *     // ... data to create a TbNF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbNF we want to update
     *   }
     * })
    **/
    upsert<T extends tbNFUpsertArgs>(
      args: SelectSubset<T, tbNFUpsertArgs>
    ): Prisma__tbNFClient<tbNFGetPayload<T>>

    /**
     * Count the number of TbNFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFCountArgs} args - Arguments to filter TbNFS to count.
     * @example
     * // Count the number of TbNFS
     * const count = await prisma.tbNF.count({
     *   where: {
     *     // ... the filter for the TbNFS we want to count
     *   }
     * })
    **/
    count<T extends tbNFCountArgs>(
      args?: Subset<T, tbNFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbNFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbNF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbNFAggregateArgs>(args: Subset<T, TbNFAggregateArgs>): Prisma.PrismaPromise<GetTbNFAggregateType<T>>

    /**
     * Group by TbNF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbNFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbNFGroupByArgs['orderBy'] }
        : { orderBy?: TbNFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbNFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbNFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbNF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbNFClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbMovimentos<T extends tbMovimentosArgs= {}>(args?: Subset<T, tbMovimentosArgs>): Prisma__tbMovimentosClient<tbMovimentosGetPayload<T> | Null>;

    tbFornecedores<T extends tbFornecedoresArgs= {}>(args?: Subset<T, tbFornecedoresArgs>): Prisma__tbFornecedoresClient<tbFornecedoresGetPayload<T> | Null>;

    tbUsuarios<T extends tbUsuariosArgs= {}>(args?: Subset<T, tbUsuariosArgs>): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | Null>;

    tbNFItens<T extends tbNF$tbNFItensArgs= {}>(args?: Subset<T, tbNF$tbNFItensArgs>): Prisma.PrismaPromise<Array<tbNFItensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbNF base type for findUnique actions
   */
  export type tbNFFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter, which tbNF to fetch.
     */
    where: tbNFWhereUniqueInput
  }

  /**
   * tbNF findUnique
   */
  export interface tbNFFindUniqueArgs extends tbNFFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNF findUniqueOrThrow
   */
  export type tbNFFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter, which tbNF to fetch.
     */
    where: tbNFWhereUniqueInput
  }


  /**
   * tbNF base type for findFirst actions
   */
  export type tbNFFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter, which tbNF to fetch.
     */
    where?: tbNFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFS to fetch.
     */
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNFS.
     */
    cursor?: tbNFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNFS.
     */
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }

  /**
   * tbNF findFirst
   */
  export interface tbNFFindFirstArgs extends tbNFFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNF findFirstOrThrow
   */
  export type tbNFFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter, which tbNF to fetch.
     */
    where?: tbNFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFS to fetch.
     */
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNFS.
     */
    cursor?: tbNFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNFS.
     */
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }


  /**
   * tbNF findMany
   */
  export type tbNFFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter, which tbNFS to fetch.
     */
    where?: tbNFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFS to fetch.
     */
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbNFS.
     */
    cursor?: tbNFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFS.
     */
    skip?: number
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }


  /**
   * tbNF create
   */
  export type tbNFCreateArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * The data needed to create a tbNF.
     */
    data: XOR<tbNFCreateInput, tbNFUncheckedCreateInput>
  }


  /**
   * tbNF createMany
   */
  export type tbNFCreateManyArgs = {
    /**
     * The data used to create many tbNFS.
     */
    data: Enumerable<tbNFCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbNF update
   */
  export type tbNFUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * The data needed to update a tbNF.
     */
    data: XOR<tbNFUpdateInput, tbNFUncheckedUpdateInput>
    /**
     * Choose, which tbNF to update.
     */
    where: tbNFWhereUniqueInput
  }


  /**
   * tbNF updateMany
   */
  export type tbNFUpdateManyArgs = {
    /**
     * The data used to update tbNFS.
     */
    data: XOR<tbNFUpdateManyMutationInput, tbNFUncheckedUpdateManyInput>
    /**
     * Filter which tbNFS to update
     */
    where?: tbNFWhereInput
  }


  /**
   * tbNF upsert
   */
  export type tbNFUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * The filter to search for the tbNF to update in case it exists.
     */
    where: tbNFWhereUniqueInput
    /**
     * In case the tbNF found by the `where` argument doesn't exist, create a new tbNF with this data.
     */
    create: XOR<tbNFCreateInput, tbNFUncheckedCreateInput>
    /**
     * In case the tbNF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbNFUpdateInput, tbNFUncheckedUpdateInput>
  }


  /**
   * tbNF delete
   */
  export type tbNFDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    /**
     * Filter which tbNF to delete.
     */
    where: tbNFWhereUniqueInput
  }


  /**
   * tbNF deleteMany
   */
  export type tbNFDeleteManyArgs = {
    /**
     * Filter which tbNFS to delete
     */
    where?: tbNFWhereInput
  }


  /**
   * tbNF.tbNFItens
   */
  export type tbNF$tbNFItensArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    where?: tbNFItensWhereInput
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    cursor?: tbNFItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNFItensScalarFieldEnum>
  }


  /**
   * tbNF without action
   */
  export type tbNFArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
  }



  /**
   * Model tbNFItens
   */


  export type AggregateTbNFItens = {
    _count: TbNFItensCountAggregateOutputType | null
    _avg: TbNFItensAvgAggregateOutputType | null
    _sum: TbNFItensSumAggregateOutputType | null
    _min: TbNFItensMinAggregateOutputType | null
    _max: TbNFItensMaxAggregateOutputType | null
  }

  export type TbNFItensAvgAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: number | null
    quantidade: number | null
    vlrtotitem: number | null
  }

  export type TbNFItensSumAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: number | null
    quantidade: number | null
    vlrtotitem: number | null
  }

  export type TbNFItensMinAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: number | null
    quantidade: number | null
    vlrtotitem: number | null
  }

  export type TbNFItensMaxAggregateOutputType = {
    idnf: number | null
    idmovimento: number | null
    seqitem: number | null
    idproduto: number | null
    vlrunitario: number | null
    quantidade: number | null
    vlrtotitem: number | null
  }

  export type TbNFItensCountAggregateOutputType = {
    idnf: number
    idmovimento: number
    seqitem: number
    idproduto: number
    vlrunitario: number
    quantidade: number
    vlrtotitem: number
    _all: number
  }


  export type TbNFItensAvgAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNFItensSumAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNFItensMinAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNFItensMaxAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
  }

  export type TbNFItensCountAggregateInputType = {
    idnf?: true
    idmovimento?: true
    seqitem?: true
    idproduto?: true
    vlrunitario?: true
    quantidade?: true
    vlrtotitem?: true
    _all?: true
  }

  export type TbNFItensAggregateArgs = {
    /**
     * Filter which tbNFItens to aggregate.
     */
    where?: tbNFItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFItens to fetch.
     */
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbNFItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbNFItens
    **/
    _count?: true | TbNFItensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbNFItensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbNFItensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbNFItensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbNFItensMaxAggregateInputType
  }

  export type GetTbNFItensAggregateType<T extends TbNFItensAggregateArgs> = {
        [P in keyof T & keyof AggregateTbNFItens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbNFItens[P]>
      : GetScalarType<T[P], AggregateTbNFItens[P]>
  }




  export type TbNFItensGroupByArgs = {
    where?: tbNFItensWhereInput
    orderBy?: Enumerable<tbNFItensOrderByWithAggregationInput>
    by: TbNFItensScalarFieldEnum[]
    having?: tbNFItensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbNFItensCountAggregateInputType | true
    _avg?: TbNFItensAvgAggregateInputType
    _sum?: TbNFItensSumAggregateInputType
    _min?: TbNFItensMinAggregateInputType
    _max?: TbNFItensMaxAggregateInputType
  }


  export type TbNFItensGroupByOutputType = {
    idnf: number
    idmovimento: number
    seqitem: number
    idproduto: number
    vlrunitario: number | null
    quantidade: number | null
    vlrtotitem: number | null
    _count: TbNFItensCountAggregateOutputType | null
    _avg: TbNFItensAvgAggregateOutputType | null
    _sum: TbNFItensSumAggregateOutputType | null
    _min: TbNFItensMinAggregateOutputType | null
    _max: TbNFItensMaxAggregateOutputType | null
  }

  type GetTbNFItensGroupByPayload<T extends TbNFItensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbNFItensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbNFItensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbNFItensGroupByOutputType[P]>
            : GetScalarType<T[P], TbNFItensGroupByOutputType[P]>
        }
      >
    >


  export type tbNFItensSelect = {
    idnf?: boolean
    idmovimento?: boolean
    seqitem?: boolean
    idproduto?: boolean
    vlrunitario?: boolean
    quantidade?: boolean
    vlrtotitem?: boolean
    tbMovItens?: boolean | tbMovItensArgs
    tbNF?: boolean | tbNFArgs
  }


  export type tbNFItensInclude = {
    tbMovItens?: boolean | tbMovItensArgs
    tbNF?: boolean | tbNFArgs
  }

  export type tbNFItensGetPayload<S extends boolean | null | undefined | tbNFItensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbNFItens :
    S extends undefined ? never :
    S extends { include: any } & (tbNFItensArgs | tbNFItensFindManyArgs)
    ? tbNFItens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbMovItens' ? tbMovItensGetPayload<S['include'][P]> :
        P extends 'tbNF' ? tbNFGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbNFItensArgs | tbNFItensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbMovItens' ? tbMovItensGetPayload<S['select'][P]> :
        P extends 'tbNF' ? tbNFGetPayload<S['select'][P]> :  P extends keyof tbNFItens ? tbNFItens[P] : never
  } 
      : tbNFItens


  type tbNFItensCountArgs = 
    Omit<tbNFItensFindManyArgs, 'select' | 'include'> & {
      select?: TbNFItensCountAggregateInputType | true
    }

  export interface tbNFItensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbNFItens that matches the filter.
     * @param {tbNFItensFindUniqueArgs} args - Arguments to find a TbNFItens
     * @example
     * // Get one TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbNFItensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbNFItensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbNFItens'> extends True ? Prisma__tbNFItensClient<tbNFItensGetPayload<T>> : Prisma__tbNFItensClient<tbNFItensGetPayload<T> | null, null>

    /**
     * Find one TbNFItens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbNFItensFindUniqueOrThrowArgs} args - Arguments to find a TbNFItens
     * @example
     * // Get one TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbNFItensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbNFItensFindUniqueOrThrowArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Find the first TbNFItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFItensFindFirstArgs} args - Arguments to find a TbNFItens
     * @example
     * // Get one TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbNFItensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbNFItensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbNFItens'> extends True ? Prisma__tbNFItensClient<tbNFItensGetPayload<T>> : Prisma__tbNFItensClient<tbNFItensGetPayload<T> | null, null>

    /**
     * Find the first TbNFItens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFItensFindFirstOrThrowArgs} args - Arguments to find a TbNFItens
     * @example
     * // Get one TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbNFItensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbNFItensFindFirstOrThrowArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Find zero or more TbNFItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFItensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findMany()
     * 
     * // Get first 10 TbNFItens
     * const tbNFItens = await prisma.tbNFItens.findMany({ take: 10 })
     * 
     * // Only select the `idnf`
     * const tbNFItensWithIdnfOnly = await prisma.tbNFItens.findMany({ select: { idnf: true } })
     * 
    **/
    findMany<T extends tbNFItensFindManyArgs>(
      args?: SelectSubset<T, tbNFItensFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbNFItensGetPayload<T>>>

    /**
     * Create a TbNFItens.
     * @param {tbNFItensCreateArgs} args - Arguments to create a TbNFItens.
     * @example
     * // Create one TbNFItens
     * const TbNFItens = await prisma.tbNFItens.create({
     *   data: {
     *     // ... data to create a TbNFItens
     *   }
     * })
     * 
    **/
    create<T extends tbNFItensCreateArgs>(
      args: SelectSubset<T, tbNFItensCreateArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Create many TbNFItens.
     *     @param {tbNFItensCreateManyArgs} args - Arguments to create many TbNFItens.
     *     @example
     *     // Create many TbNFItens
     *     const tbNFItens = await prisma.tbNFItens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbNFItensCreateManyArgs>(
      args?: SelectSubset<T, tbNFItensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbNFItens.
     * @param {tbNFItensDeleteArgs} args - Arguments to delete one TbNFItens.
     * @example
     * // Delete one TbNFItens
     * const TbNFItens = await prisma.tbNFItens.delete({
     *   where: {
     *     // ... filter to delete one TbNFItens
     *   }
     * })
     * 
    **/
    delete<T extends tbNFItensDeleteArgs>(
      args: SelectSubset<T, tbNFItensDeleteArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Update one TbNFItens.
     * @param {tbNFItensUpdateArgs} args - Arguments to update one TbNFItens.
     * @example
     * // Update one TbNFItens
     * const tbNFItens = await prisma.tbNFItens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbNFItensUpdateArgs>(
      args: SelectSubset<T, tbNFItensUpdateArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Delete zero or more TbNFItens.
     * @param {tbNFItensDeleteManyArgs} args - Arguments to filter TbNFItens to delete.
     * @example
     * // Delete a few TbNFItens
     * const { count } = await prisma.tbNFItens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbNFItensDeleteManyArgs>(
      args?: SelectSubset<T, tbNFItensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbNFItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFItensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbNFItens
     * const tbNFItens = await prisma.tbNFItens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbNFItensUpdateManyArgs>(
      args: SelectSubset<T, tbNFItensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbNFItens.
     * @param {tbNFItensUpsertArgs} args - Arguments to update or create a TbNFItens.
     * @example
     * // Update or create a TbNFItens
     * const tbNFItens = await prisma.tbNFItens.upsert({
     *   create: {
     *     // ... data to create a TbNFItens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbNFItens we want to update
     *   }
     * })
    **/
    upsert<T extends tbNFItensUpsertArgs>(
      args: SelectSubset<T, tbNFItensUpsertArgs>
    ): Prisma__tbNFItensClient<tbNFItensGetPayload<T>>

    /**
     * Count the number of TbNFItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbNFItensCountArgs} args - Arguments to filter TbNFItens to count.
     * @example
     * // Count the number of TbNFItens
     * const count = await prisma.tbNFItens.count({
     *   where: {
     *     // ... the filter for the TbNFItens we want to count
     *   }
     * })
    **/
    count<T extends tbNFItensCountArgs>(
      args?: Subset<T, tbNFItensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbNFItensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbNFItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNFItensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbNFItensAggregateArgs>(args: Subset<T, TbNFItensAggregateArgs>): Prisma.PrismaPromise<GetTbNFItensAggregateType<T>>

    /**
     * Group by TbNFItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbNFItensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbNFItensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbNFItensGroupByArgs['orderBy'] }
        : { orderBy?: TbNFItensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbNFItensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbNFItensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbNFItens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbNFItensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbMovItens<T extends tbMovItensArgs= {}>(args?: Subset<T, tbMovItensArgs>): Prisma__tbMovItensClient<tbMovItensGetPayload<T> | Null>;

    tbNF<T extends tbNFArgs= {}>(args?: Subset<T, tbNFArgs>): Prisma__tbNFClient<tbNFGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbNFItens base type for findUnique actions
   */
  export type tbNFItensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter, which tbNFItens to fetch.
     */
    where: tbNFItensWhereUniqueInput
  }

  /**
   * tbNFItens findUnique
   */
  export interface tbNFItensFindUniqueArgs extends tbNFItensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNFItens findUniqueOrThrow
   */
  export type tbNFItensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter, which tbNFItens to fetch.
     */
    where: tbNFItensWhereUniqueInput
  }


  /**
   * tbNFItens base type for findFirst actions
   */
  export type tbNFItensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter, which tbNFItens to fetch.
     */
    where?: tbNFItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFItens to fetch.
     */
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNFItens.
     */
    cursor?: tbNFItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNFItens.
     */
    distinct?: Enumerable<TbNFItensScalarFieldEnum>
  }

  /**
   * tbNFItens findFirst
   */
  export interface tbNFItensFindFirstArgs extends tbNFItensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbNFItens findFirstOrThrow
   */
  export type tbNFItensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter, which tbNFItens to fetch.
     */
    where?: tbNFItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFItens to fetch.
     */
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbNFItens.
     */
    cursor?: tbNFItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbNFItens.
     */
    distinct?: Enumerable<TbNFItensScalarFieldEnum>
  }


  /**
   * tbNFItens findMany
   */
  export type tbNFItensFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter, which tbNFItens to fetch.
     */
    where?: tbNFItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbNFItens to fetch.
     */
    orderBy?: Enumerable<tbNFItensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbNFItens.
     */
    cursor?: tbNFItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbNFItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbNFItens.
     */
    skip?: number
    distinct?: Enumerable<TbNFItensScalarFieldEnum>
  }


  /**
   * tbNFItens create
   */
  export type tbNFItensCreateArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * The data needed to create a tbNFItens.
     */
    data: XOR<tbNFItensCreateInput, tbNFItensUncheckedCreateInput>
  }


  /**
   * tbNFItens createMany
   */
  export type tbNFItensCreateManyArgs = {
    /**
     * The data used to create many tbNFItens.
     */
    data: Enumerable<tbNFItensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbNFItens update
   */
  export type tbNFItensUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * The data needed to update a tbNFItens.
     */
    data: XOR<tbNFItensUpdateInput, tbNFItensUncheckedUpdateInput>
    /**
     * Choose, which tbNFItens to update.
     */
    where: tbNFItensWhereUniqueInput
  }


  /**
   * tbNFItens updateMany
   */
  export type tbNFItensUpdateManyArgs = {
    /**
     * The data used to update tbNFItens.
     */
    data: XOR<tbNFItensUpdateManyMutationInput, tbNFItensUncheckedUpdateManyInput>
    /**
     * Filter which tbNFItens to update
     */
    where?: tbNFItensWhereInput
  }


  /**
   * tbNFItens upsert
   */
  export type tbNFItensUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * The filter to search for the tbNFItens to update in case it exists.
     */
    where: tbNFItensWhereUniqueInput
    /**
     * In case the tbNFItens found by the `where` argument doesn't exist, create a new tbNFItens with this data.
     */
    create: XOR<tbNFItensCreateInput, tbNFItensUncheckedCreateInput>
    /**
     * In case the tbNFItens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbNFItensUpdateInput, tbNFItensUncheckedUpdateInput>
  }


  /**
   * tbNFItens delete
   */
  export type tbNFItensDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
    /**
     * Filter which tbNFItens to delete.
     */
    where: tbNFItensWhereUniqueInput
  }


  /**
   * tbNFItens deleteMany
   */
  export type tbNFItensDeleteManyArgs = {
    /**
     * Filter which tbNFItens to delete
     */
    where?: tbNFItensWhereInput
  }


  /**
   * tbNFItens without action
   */
  export type tbNFItensArgs = {
    /**
     * Select specific fields to fetch from the tbNFItens
     */
    select?: tbNFItensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFItensInclude | null
  }



  /**
   * Model tbProdComposicao
   */


  export type AggregateTbProdComposicao = {
    _count: TbProdComposicaoCountAggregateOutputType | null
    _avg: TbProdComposicaoAvgAggregateOutputType | null
    _sum: TbProdComposicaoSumAggregateOutputType | null
    _min: TbProdComposicaoMinAggregateOutputType | null
    _max: TbProdComposicaoMaxAggregateOutputType | null
  }

  export type TbProdComposicaoAvgAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: number | null
  }

  export type TbProdComposicaoSumAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: number | null
  }

  export type TbProdComposicaoMinAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: number | null
  }

  export type TbProdComposicaoMaxAggregateOutputType = {
    idcomp: number | null
    idproduto: number | null
    idprodutocomp: number | null
    quantidade: number | null
  }

  export type TbProdComposicaoCountAggregateOutputType = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
    quantidade: number
    _all: number
  }


  export type TbProdComposicaoAvgAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdComposicaoSumAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdComposicaoMinAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdComposicaoMaxAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
  }

  export type TbProdComposicaoCountAggregateInputType = {
    idcomp?: true
    idproduto?: true
    idprodutocomp?: true
    quantidade?: true
    _all?: true
  }

  export type TbProdComposicaoAggregateArgs = {
    /**
     * Filter which tbProdComposicao to aggregate.
     */
    where?: tbProdComposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdComposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbProdComposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdComposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdComposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbProdComposicaos
    **/
    _count?: true | TbProdComposicaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbProdComposicaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbProdComposicaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbProdComposicaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbProdComposicaoMaxAggregateInputType
  }

  export type GetTbProdComposicaoAggregateType<T extends TbProdComposicaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTbProdComposicao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbProdComposicao[P]>
      : GetScalarType<T[P], AggregateTbProdComposicao[P]>
  }




  export type TbProdComposicaoGroupByArgs = {
    where?: tbProdComposicaoWhereInput
    orderBy?: Enumerable<tbProdComposicaoOrderByWithAggregationInput>
    by: TbProdComposicaoScalarFieldEnum[]
    having?: tbProdComposicaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbProdComposicaoCountAggregateInputType | true
    _avg?: TbProdComposicaoAvgAggregateInputType
    _sum?: TbProdComposicaoSumAggregateInputType
    _min?: TbProdComposicaoMinAggregateInputType
    _max?: TbProdComposicaoMaxAggregateInputType
  }


  export type TbProdComposicaoGroupByOutputType = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
    quantidade: number | null
    _count: TbProdComposicaoCountAggregateOutputType | null
    _avg: TbProdComposicaoAvgAggregateOutputType | null
    _sum: TbProdComposicaoSumAggregateOutputType | null
    _min: TbProdComposicaoMinAggregateOutputType | null
    _max: TbProdComposicaoMaxAggregateOutputType | null
  }

  type GetTbProdComposicaoGroupByPayload<T extends TbProdComposicaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbProdComposicaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbProdComposicaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbProdComposicaoGroupByOutputType[P]>
            : GetScalarType<T[P], TbProdComposicaoGroupByOutputType[P]>
        }
      >
    >


  export type tbProdComposicaoSelect = {
    idcomp?: boolean
    idproduto?: boolean
    idprodutocomp?: boolean
    quantidade?: boolean
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: boolean | tbProdutosArgs
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: boolean | tbProdutosArgs
  }


  export type tbProdComposicaoInclude = {
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: boolean | tbProdutosArgs
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: boolean | tbProdutosArgs
  }

  export type tbProdComposicaoGetPayload<S extends boolean | null | undefined | tbProdComposicaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbProdComposicao :
    S extends undefined ? never :
    S extends { include: any } & (tbProdComposicaoArgs | tbProdComposicaoFindManyArgs)
    ? tbProdComposicao  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbProdutos_tbProdComposicao_idprodutoTotbProdutos' ? tbProdutosGetPayload<S['include'][P]> :
        P extends 'tbProdutos_tbProdComposicao_idprodutocompTotbProdutos' ? tbProdutosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbProdComposicaoArgs | tbProdComposicaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbProdutos_tbProdComposicao_idprodutoTotbProdutos' ? tbProdutosGetPayload<S['select'][P]> :
        P extends 'tbProdutos_tbProdComposicao_idprodutocompTotbProdutos' ? tbProdutosGetPayload<S['select'][P]> :  P extends keyof tbProdComposicao ? tbProdComposicao[P] : never
  } 
      : tbProdComposicao


  type tbProdComposicaoCountArgs = 
    Omit<tbProdComposicaoFindManyArgs, 'select' | 'include'> & {
      select?: TbProdComposicaoCountAggregateInputType | true
    }

  export interface tbProdComposicaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbProdComposicao that matches the filter.
     * @param {tbProdComposicaoFindUniqueArgs} args - Arguments to find a TbProdComposicao
     * @example
     * // Get one TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbProdComposicaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbProdComposicaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbProdComposicao'> extends True ? Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>> : Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T> | null, null>

    /**
     * Find one TbProdComposicao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbProdComposicaoFindUniqueOrThrowArgs} args - Arguments to find a TbProdComposicao
     * @example
     * // Get one TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbProdComposicaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbProdComposicaoFindUniqueOrThrowArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Find the first TbProdComposicao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdComposicaoFindFirstArgs} args - Arguments to find a TbProdComposicao
     * @example
     * // Get one TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbProdComposicaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbProdComposicaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbProdComposicao'> extends True ? Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>> : Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T> | null, null>

    /**
     * Find the first TbProdComposicao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdComposicaoFindFirstOrThrowArgs} args - Arguments to find a TbProdComposicao
     * @example
     * // Get one TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbProdComposicaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbProdComposicaoFindFirstOrThrowArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Find zero or more TbProdComposicaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdComposicaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbProdComposicaos
     * const tbProdComposicaos = await prisma.tbProdComposicao.findMany()
     * 
     * // Get first 10 TbProdComposicaos
     * const tbProdComposicaos = await prisma.tbProdComposicao.findMany({ take: 10 })
     * 
     * // Only select the `idcomp`
     * const tbProdComposicaoWithIdcompOnly = await prisma.tbProdComposicao.findMany({ select: { idcomp: true } })
     * 
    **/
    findMany<T extends tbProdComposicaoFindManyArgs>(
      args?: SelectSubset<T, tbProdComposicaoFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbProdComposicaoGetPayload<T>>>

    /**
     * Create a TbProdComposicao.
     * @param {tbProdComposicaoCreateArgs} args - Arguments to create a TbProdComposicao.
     * @example
     * // Create one TbProdComposicao
     * const TbProdComposicao = await prisma.tbProdComposicao.create({
     *   data: {
     *     // ... data to create a TbProdComposicao
     *   }
     * })
     * 
    **/
    create<T extends tbProdComposicaoCreateArgs>(
      args: SelectSubset<T, tbProdComposicaoCreateArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Create many TbProdComposicaos.
     *     @param {tbProdComposicaoCreateManyArgs} args - Arguments to create many TbProdComposicaos.
     *     @example
     *     // Create many TbProdComposicaos
     *     const tbProdComposicao = await prisma.tbProdComposicao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbProdComposicaoCreateManyArgs>(
      args?: SelectSubset<T, tbProdComposicaoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbProdComposicao.
     * @param {tbProdComposicaoDeleteArgs} args - Arguments to delete one TbProdComposicao.
     * @example
     * // Delete one TbProdComposicao
     * const TbProdComposicao = await prisma.tbProdComposicao.delete({
     *   where: {
     *     // ... filter to delete one TbProdComposicao
     *   }
     * })
     * 
    **/
    delete<T extends tbProdComposicaoDeleteArgs>(
      args: SelectSubset<T, tbProdComposicaoDeleteArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Update one TbProdComposicao.
     * @param {tbProdComposicaoUpdateArgs} args - Arguments to update one TbProdComposicao.
     * @example
     * // Update one TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbProdComposicaoUpdateArgs>(
      args: SelectSubset<T, tbProdComposicaoUpdateArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Delete zero or more TbProdComposicaos.
     * @param {tbProdComposicaoDeleteManyArgs} args - Arguments to filter TbProdComposicaos to delete.
     * @example
     * // Delete a few TbProdComposicaos
     * const { count } = await prisma.tbProdComposicao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbProdComposicaoDeleteManyArgs>(
      args?: SelectSubset<T, tbProdComposicaoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbProdComposicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdComposicaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbProdComposicaos
     * const tbProdComposicao = await prisma.tbProdComposicao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbProdComposicaoUpdateManyArgs>(
      args: SelectSubset<T, tbProdComposicaoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbProdComposicao.
     * @param {tbProdComposicaoUpsertArgs} args - Arguments to update or create a TbProdComposicao.
     * @example
     * // Update or create a TbProdComposicao
     * const tbProdComposicao = await prisma.tbProdComposicao.upsert({
     *   create: {
     *     // ... data to create a TbProdComposicao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbProdComposicao we want to update
     *   }
     * })
    **/
    upsert<T extends tbProdComposicaoUpsertArgs>(
      args: SelectSubset<T, tbProdComposicaoUpsertArgs>
    ): Prisma__tbProdComposicaoClient<tbProdComposicaoGetPayload<T>>

    /**
     * Count the number of TbProdComposicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbProdComposicaoCountArgs} args - Arguments to filter TbProdComposicaos to count.
     * @example
     * // Count the number of TbProdComposicaos
     * const count = await prisma.tbProdComposicao.count({
     *   where: {
     *     // ... the filter for the TbProdComposicaos we want to count
     *   }
     * })
    **/
    count<T extends tbProdComposicaoCountArgs>(
      args?: Subset<T, tbProdComposicaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbProdComposicaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbProdComposicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdComposicaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbProdComposicaoAggregateArgs>(args: Subset<T, TbProdComposicaoAggregateArgs>): Prisma.PrismaPromise<GetTbProdComposicaoAggregateType<T>>

    /**
     * Group by TbProdComposicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbProdComposicaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbProdComposicaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbProdComposicaoGroupByArgs['orderBy'] }
        : { orderBy?: TbProdComposicaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbProdComposicaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbProdComposicaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbProdComposicao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbProdComposicaoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbProdutos_tbProdComposicao_idprodutoTotbProdutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos<T extends tbProdutosArgs= {}>(args?: Subset<T, tbProdutosArgs>): Prisma__tbProdutosClient<tbProdutosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbProdComposicao base type for findUnique actions
   */
  export type tbProdComposicaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter, which tbProdComposicao to fetch.
     */
    where: tbProdComposicaoWhereUniqueInput
  }

  /**
   * tbProdComposicao findUnique
   */
  export interface tbProdComposicaoFindUniqueArgs extends tbProdComposicaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdComposicao findUniqueOrThrow
   */
  export type tbProdComposicaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter, which tbProdComposicao to fetch.
     */
    where: tbProdComposicaoWhereUniqueInput
  }


  /**
   * tbProdComposicao base type for findFirst actions
   */
  export type tbProdComposicaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter, which tbProdComposicao to fetch.
     */
    where?: tbProdComposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdComposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdComposicaos.
     */
    cursor?: tbProdComposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdComposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdComposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdComposicaos.
     */
    distinct?: Enumerable<TbProdComposicaoScalarFieldEnum>
  }

  /**
   * tbProdComposicao findFirst
   */
  export interface tbProdComposicaoFindFirstArgs extends tbProdComposicaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbProdComposicao findFirstOrThrow
   */
  export type tbProdComposicaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter, which tbProdComposicao to fetch.
     */
    where?: tbProdComposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdComposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbProdComposicaos.
     */
    cursor?: tbProdComposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdComposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdComposicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbProdComposicaos.
     */
    distinct?: Enumerable<TbProdComposicaoScalarFieldEnum>
  }


  /**
   * tbProdComposicao findMany
   */
  export type tbProdComposicaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter, which tbProdComposicaos to fetch.
     */
    where?: tbProdComposicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbProdComposicaos to fetch.
     */
    orderBy?: Enumerable<tbProdComposicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbProdComposicaos.
     */
    cursor?: tbProdComposicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbProdComposicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbProdComposicaos.
     */
    skip?: number
    distinct?: Enumerable<TbProdComposicaoScalarFieldEnum>
  }


  /**
   * tbProdComposicao create
   */
  export type tbProdComposicaoCreateArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * The data needed to create a tbProdComposicao.
     */
    data: XOR<tbProdComposicaoCreateInput, tbProdComposicaoUncheckedCreateInput>
  }


  /**
   * tbProdComposicao createMany
   */
  export type tbProdComposicaoCreateManyArgs = {
    /**
     * The data used to create many tbProdComposicaos.
     */
    data: Enumerable<tbProdComposicaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbProdComposicao update
   */
  export type tbProdComposicaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * The data needed to update a tbProdComposicao.
     */
    data: XOR<tbProdComposicaoUpdateInput, tbProdComposicaoUncheckedUpdateInput>
    /**
     * Choose, which tbProdComposicao to update.
     */
    where: tbProdComposicaoWhereUniqueInput
  }


  /**
   * tbProdComposicao updateMany
   */
  export type tbProdComposicaoUpdateManyArgs = {
    /**
     * The data used to update tbProdComposicaos.
     */
    data: XOR<tbProdComposicaoUpdateManyMutationInput, tbProdComposicaoUncheckedUpdateManyInput>
    /**
     * Filter which tbProdComposicaos to update
     */
    where?: tbProdComposicaoWhereInput
  }


  /**
   * tbProdComposicao upsert
   */
  export type tbProdComposicaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * The filter to search for the tbProdComposicao to update in case it exists.
     */
    where: tbProdComposicaoWhereUniqueInput
    /**
     * In case the tbProdComposicao found by the `where` argument doesn't exist, create a new tbProdComposicao with this data.
     */
    create: XOR<tbProdComposicaoCreateInput, tbProdComposicaoUncheckedCreateInput>
    /**
     * In case the tbProdComposicao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbProdComposicaoUpdateInput, tbProdComposicaoUncheckedUpdateInput>
  }


  /**
   * tbProdComposicao delete
   */
  export type tbProdComposicaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
    /**
     * Filter which tbProdComposicao to delete.
     */
    where: tbProdComposicaoWhereUniqueInput
  }


  /**
   * tbProdComposicao deleteMany
   */
  export type tbProdComposicaoDeleteManyArgs = {
    /**
     * Filter which tbProdComposicaos to delete
     */
    where?: tbProdComposicaoWhereInput
  }


  /**
   * tbProdComposicao without action
   */
  export type tbProdComposicaoArgs = {
    /**
     * Select specific fields to fetch from the tbProdComposicao
     */
    select?: tbProdComposicaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbProdComposicaoInclude | null
  }



  /**
   * Model tbUsuarios
   */


  export type AggregateTbUsuarios = {
    _count: TbUsuariosCountAggregateOutputType | null
    _avg: TbUsuariosAvgAggregateOutputType | null
    _sum: TbUsuariosSumAggregateOutputType | null
    _min: TbUsuariosMinAggregateOutputType | null
    _max: TbUsuariosMaxAggregateOutputType | null
  }

  export type TbUsuariosAvgAggregateOutputType = {
    idusuario: number | null
  }

  export type TbUsuariosSumAggregateOutputType = {
    idusuario: number | null
  }

  export type TbUsuariosMinAggregateOutputType = {
    idusuario: number | null
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
  }

  export type TbUsuariosMaxAggregateOutputType = {
    idusuario: number | null
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
  }

  export type TbUsuariosCountAggregateOutputType = {
    idusuario: number
    usu_login: number
    nome: number
    senha: number
    dtcriacao: number
    usu_admin: number
    _all: number
  }


  export type TbUsuariosAvgAggregateInputType = {
    idusuario?: true
  }

  export type TbUsuariosSumAggregateInputType = {
    idusuario?: true
  }

  export type TbUsuariosMinAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
  }

  export type TbUsuariosMaxAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
  }

  export type TbUsuariosCountAggregateInputType = {
    idusuario?: true
    usu_login?: true
    nome?: true
    senha?: true
    dtcriacao?: true
    usu_admin?: true
    _all?: true
  }

  export type TbUsuariosAggregateArgs = {
    /**
     * Filter which tbUsuarios to aggregate.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbUsuarios
    **/
    _count?: true | TbUsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbUsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbUsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbUsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbUsuariosMaxAggregateInputType
  }

  export type GetTbUsuariosAggregateType<T extends TbUsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateTbUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbUsuarios[P]>
      : GetScalarType<T[P], AggregateTbUsuarios[P]>
  }




  export type TbUsuariosGroupByArgs = {
    where?: tbUsuariosWhereInput
    orderBy?: Enumerable<tbUsuariosOrderByWithAggregationInput>
    by: TbUsuariosScalarFieldEnum[]
    having?: tbUsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbUsuariosCountAggregateInputType | true
    _avg?: TbUsuariosAvgAggregateInputType
    _sum?: TbUsuariosSumAggregateInputType
    _min?: TbUsuariosMinAggregateInputType
    _max?: TbUsuariosMaxAggregateInputType
  }


  export type TbUsuariosGroupByOutputType = {
    idusuario: number
    usu_login: string | null
    nome: string | null
    senha: string | null
    dtcriacao: Date | null
    usu_admin: boolean | null
    _count: TbUsuariosCountAggregateOutputType | null
    _avg: TbUsuariosAvgAggregateOutputType | null
    _sum: TbUsuariosSumAggregateOutputType | null
    _min: TbUsuariosMinAggregateOutputType | null
    _max: TbUsuariosMaxAggregateOutputType | null
  }

  type GetTbUsuariosGroupByPayload<T extends TbUsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TbUsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbUsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbUsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], TbUsuariosGroupByOutputType[P]>
        }
      >
    >


  export type tbUsuariosSelect = {
    idusuario?: boolean
    usu_login?: boolean
    nome?: boolean
    senha?: boolean
    dtcriacao?: boolean
    usu_admin?: boolean
    tbMovimentos?: boolean | tbUsuarios$tbMovimentosArgs
    tbNF?: boolean | tbUsuarios$tbNFArgs
    _count?: boolean | TbUsuariosCountOutputTypeArgs
  }


  export type tbUsuariosInclude = {
    tbMovimentos?: boolean | tbUsuarios$tbMovimentosArgs
    tbNF?: boolean | tbUsuarios$tbNFArgs
    _count?: boolean | TbUsuariosCountOutputTypeArgs
  }

  export type tbUsuariosGetPayload<S extends boolean | null | undefined | tbUsuariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? tbUsuarios :
    S extends undefined ? never :
    S extends { include: any } & (tbUsuariosArgs | tbUsuariosFindManyArgs)
    ? tbUsuarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tbMovimentos' ? Array < tbMovimentosGetPayload<S['include'][P]>>  :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['include'][P]>>  :
        P extends '_count' ? TbUsuariosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (tbUsuariosArgs | tbUsuariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tbMovimentos' ? Array < tbMovimentosGetPayload<S['select'][P]>>  :
        P extends 'tbNF' ? Array < tbNFGetPayload<S['select'][P]>>  :
        P extends '_count' ? TbUsuariosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbUsuarios ? tbUsuarios[P] : never
  } 
      : tbUsuarios


  type tbUsuariosCountArgs = 
    Omit<tbUsuariosFindManyArgs, 'select' | 'include'> & {
      select?: TbUsuariosCountAggregateInputType | true
    }

  export interface tbUsuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TbUsuarios that matches the filter.
     * @param {tbUsuariosFindUniqueArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbUsuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbUsuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbUsuarios'> extends True ? Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>> : Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | null, null>

    /**
     * Find one TbUsuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tbUsuariosFindUniqueOrThrowArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbUsuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbUsuariosFindUniqueOrThrowArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Find the first TbUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindFirstArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbUsuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbUsuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbUsuarios'> extends True ? Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>> : Prisma__tbUsuariosClient<tbUsuariosGetPayload<T> | null, null>

    /**
     * Find the first TbUsuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindFirstOrThrowArgs} args - Arguments to find a TbUsuarios
     * @example
     * // Get one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbUsuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbUsuariosFindFirstOrThrowArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Find zero or more TbUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findMany()
     * 
     * // Get first 10 TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.findMany({ take: 10 })
     * 
     * // Only select the `idusuario`
     * const tbUsuariosWithIdusuarioOnly = await prisma.tbUsuarios.findMany({ select: { idusuario: true } })
     * 
    **/
    findMany<T extends tbUsuariosFindManyArgs>(
      args?: SelectSubset<T, tbUsuariosFindManyArgs>
    ): Prisma.PrismaPromise<Array<tbUsuariosGetPayload<T>>>

    /**
     * Create a TbUsuarios.
     * @param {tbUsuariosCreateArgs} args - Arguments to create a TbUsuarios.
     * @example
     * // Create one TbUsuarios
     * const TbUsuarios = await prisma.tbUsuarios.create({
     *   data: {
     *     // ... data to create a TbUsuarios
     *   }
     * })
     * 
    **/
    create<T extends tbUsuariosCreateArgs>(
      args: SelectSubset<T, tbUsuariosCreateArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Create many TbUsuarios.
     *     @param {tbUsuariosCreateManyArgs} args - Arguments to create many TbUsuarios.
     *     @example
     *     // Create many TbUsuarios
     *     const tbUsuarios = await prisma.tbUsuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbUsuariosCreateManyArgs>(
      args?: SelectSubset<T, tbUsuariosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbUsuarios.
     * @param {tbUsuariosDeleteArgs} args - Arguments to delete one TbUsuarios.
     * @example
     * // Delete one TbUsuarios
     * const TbUsuarios = await prisma.tbUsuarios.delete({
     *   where: {
     *     // ... filter to delete one TbUsuarios
     *   }
     * })
     * 
    **/
    delete<T extends tbUsuariosDeleteArgs>(
      args: SelectSubset<T, tbUsuariosDeleteArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Update one TbUsuarios.
     * @param {tbUsuariosUpdateArgs} args - Arguments to update one TbUsuarios.
     * @example
     * // Update one TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbUsuariosUpdateArgs>(
      args: SelectSubset<T, tbUsuariosUpdateArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Delete zero or more TbUsuarios.
     * @param {tbUsuariosDeleteManyArgs} args - Arguments to filter TbUsuarios to delete.
     * @example
     * // Delete a few TbUsuarios
     * const { count } = await prisma.tbUsuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbUsuariosDeleteManyArgs>(
      args?: SelectSubset<T, tbUsuariosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbUsuariosUpdateManyArgs>(
      args: SelectSubset<T, tbUsuariosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbUsuarios.
     * @param {tbUsuariosUpsertArgs} args - Arguments to update or create a TbUsuarios.
     * @example
     * // Update or create a TbUsuarios
     * const tbUsuarios = await prisma.tbUsuarios.upsert({
     *   create: {
     *     // ... data to create a TbUsuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbUsuarios we want to update
     *   }
     * })
    **/
    upsert<T extends tbUsuariosUpsertArgs>(
      args: SelectSubset<T, tbUsuariosUpsertArgs>
    ): Prisma__tbUsuariosClient<tbUsuariosGetPayload<T>>

    /**
     * Count the number of TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbUsuariosCountArgs} args - Arguments to filter TbUsuarios to count.
     * @example
     * // Count the number of TbUsuarios
     * const count = await prisma.tbUsuarios.count({
     *   where: {
     *     // ... the filter for the TbUsuarios we want to count
     *   }
     * })
    **/
    count<T extends tbUsuariosCountArgs>(
      args?: Subset<T, tbUsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbUsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbUsuariosAggregateArgs>(args: Subset<T, TbUsuariosAggregateArgs>): Prisma.PrismaPromise<GetTbUsuariosAggregateType<T>>

    /**
     * Group by TbUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbUsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbUsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbUsuariosGroupByArgs['orderBy'] }
        : { orderBy?: TbUsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbUsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbUsuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbUsuariosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tbMovimentos<T extends tbUsuarios$tbMovimentosArgs= {}>(args?: Subset<T, tbUsuarios$tbMovimentosArgs>): Prisma.PrismaPromise<Array<tbMovimentosGetPayload<T>>| Null>;

    tbNF<T extends tbUsuarios$tbNFArgs= {}>(args?: Subset<T, tbUsuarios$tbNFArgs>): Prisma.PrismaPromise<Array<tbNFGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbUsuarios base type for findUnique actions
   */
  export type tbUsuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where: tbUsuariosWhereUniqueInput
  }

  /**
   * tbUsuarios findUnique
   */
  export interface tbUsuariosFindUniqueArgs extends tbUsuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUsuarios findUniqueOrThrow
   */
  export type tbUsuariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios base type for findFirst actions
   */
  export type tbUsuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUsuarios.
     */
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }

  /**
   * tbUsuarios findFirst
   */
  export interface tbUsuariosFindFirstArgs extends tbUsuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbUsuarios findFirstOrThrow
   */
  export type tbUsuariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbUsuarios.
     */
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }


  /**
   * tbUsuarios findMany
   */
  export type tbUsuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter, which tbUsuarios to fetch.
     */
    where?: tbUsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbUsuarios to fetch.
     */
    orderBy?: Enumerable<tbUsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbUsuarios.
     */
    cursor?: tbUsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbUsuarios.
     */
    skip?: number
    distinct?: Enumerable<TbUsuariosScalarFieldEnum>
  }


  /**
   * tbUsuarios create
   */
  export type tbUsuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The data needed to create a tbUsuarios.
     */
    data: XOR<tbUsuariosCreateInput, tbUsuariosUncheckedCreateInput>
  }


  /**
   * tbUsuarios createMany
   */
  export type tbUsuariosCreateManyArgs = {
    /**
     * The data used to create many tbUsuarios.
     */
    data: Enumerable<tbUsuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbUsuarios update
   */
  export type tbUsuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The data needed to update a tbUsuarios.
     */
    data: XOR<tbUsuariosUpdateInput, tbUsuariosUncheckedUpdateInput>
    /**
     * Choose, which tbUsuarios to update.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios updateMany
   */
  export type tbUsuariosUpdateManyArgs = {
    /**
     * The data used to update tbUsuarios.
     */
    data: XOR<tbUsuariosUpdateManyMutationInput, tbUsuariosUncheckedUpdateManyInput>
    /**
     * Filter which tbUsuarios to update
     */
    where?: tbUsuariosWhereInput
  }


  /**
   * tbUsuarios upsert
   */
  export type tbUsuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * The filter to search for the tbUsuarios to update in case it exists.
     */
    where: tbUsuariosWhereUniqueInput
    /**
     * In case the tbUsuarios found by the `where` argument doesn't exist, create a new tbUsuarios with this data.
     */
    create: XOR<tbUsuariosCreateInput, tbUsuariosUncheckedCreateInput>
    /**
     * In case the tbUsuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbUsuariosUpdateInput, tbUsuariosUncheckedUpdateInput>
  }


  /**
   * tbUsuarios delete
   */
  export type tbUsuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
    /**
     * Filter which tbUsuarios to delete.
     */
    where: tbUsuariosWhereUniqueInput
  }


  /**
   * tbUsuarios deleteMany
   */
  export type tbUsuariosDeleteManyArgs = {
    /**
     * Filter which tbUsuarios to delete
     */
    where?: tbUsuariosWhereInput
  }


  /**
   * tbUsuarios.tbMovimentos
   */
  export type tbUsuarios$tbMovimentosArgs = {
    /**
     * Select specific fields to fetch from the tbMovimentos
     */
    select?: tbMovimentosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbMovimentosInclude | null
    where?: tbMovimentosWhereInput
    orderBy?: Enumerable<tbMovimentosOrderByWithRelationInput>
    cursor?: tbMovimentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbMovimentosScalarFieldEnum>
  }


  /**
   * tbUsuarios.tbNF
   */
  export type tbUsuarios$tbNFArgs = {
    /**
     * Select specific fields to fetch from the tbNF
     */
    select?: tbNFSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbNFInclude | null
    where?: tbNFWhereInput
    orderBy?: Enumerable<tbNFOrderByWithRelationInput>
    cursor?: tbNFWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TbNFScalarFieldEnum>
  }


  /**
   * tbUsuarios without action
   */
  export type tbUsuariosArgs = {
    /**
     * Select specific fields to fetch from the tbUsuarios
     */
    select?: tbUsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tbUsuariosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TbEstoqueScalarFieldEnum: {
    idestoque: 'idestoque',
    idmovimento: 'idmovimento',
    seqitem: 'seqitem',
    idlocal: 'idlocal',
    idproduto: 'idproduto',
    quantidade: 'quantidade',
    dtinc: 'dtinc'
  };

  export type TbEstoqueScalarFieldEnum = (typeof TbEstoqueScalarFieldEnum)[keyof typeof TbEstoqueScalarFieldEnum]


  export const TbFornecedoresScalarFieldEnum: {
    idfor: 'idfor',
    nomefor: 'nomefor',
    fisjur: 'fisjur',
    cnpjcpf: 'cnpjcpf',
    telefone: 'telefone',
    cep: 'cep',
    cidade: 'cidade',
    rua: 'rua',
    bairro: 'bairro',
    numero: 'numero',
    complemento: 'complemento',
    email: 'email'
  };

  export type TbFornecedoresScalarFieldEnum = (typeof TbFornecedoresScalarFieldEnum)[keyof typeof TbFornecedoresScalarFieldEnum]


  export const TbLocaisScalarFieldEnum: {
    idlocal: 'idlocal',
    nomelocal: 'nomelocal'
  };

  export type TbLocaisScalarFieldEnum = (typeof TbLocaisScalarFieldEnum)[keyof typeof TbLocaisScalarFieldEnum]


  export const TbMovItensScalarFieldEnum: {
    idmovimento: 'idmovimento',
    seqitem: 'seqitem',
    idproduto: 'idproduto',
    idlocal: 'idlocal',
    dtinc: 'dtinc',
    quantidade: 'quantidade'
  };

  export type TbMovItensScalarFieldEnum = (typeof TbMovItensScalarFieldEnum)[keyof typeof TbMovItensScalarFieldEnum]


  export const TbMovimentosScalarFieldEnum: {
    idmovimento: 'idmovimento',
    tipmov: 'tipmov',
    idfor: 'idfor',
    idusuario_alteracao: 'idusuario_alteracao',
    dtinc: 'dtinc'
  };

  export type TbMovimentosScalarFieldEnum = (typeof TbMovimentosScalarFieldEnum)[keyof typeof TbMovimentosScalarFieldEnum]


  export const TbNFItensScalarFieldEnum: {
    idnf: 'idnf',
    idmovimento: 'idmovimento',
    seqitem: 'seqitem',
    idproduto: 'idproduto',
    vlrunitario: 'vlrunitario',
    quantidade: 'quantidade',
    vlrtotitem: 'vlrtotitem'
  };

  export type TbNFItensScalarFieldEnum = (typeof TbNFItensScalarFieldEnum)[keyof typeof TbNFItensScalarFieldEnum]


  export const TbNFScalarFieldEnum: {
    idnf: 'idnf',
    numnf: 'numnf',
    idmovimento: 'idmovimento',
    serienf: 'serienf',
    idfor: 'idfor',
    idusuario_inclusao: 'idusuario_inclusao',
    dtemissao: 'dtemissao',
    vlrtotal: 'vlrtotal'
  };

  export type TbNFScalarFieldEnum = (typeof TbNFScalarFieldEnum)[keyof typeof TbNFScalarFieldEnum]


  export const TbProdComposicaoScalarFieldEnum: {
    idcomp: 'idcomp',
    idproduto: 'idproduto',
    idprodutocomp: 'idprodutocomp',
    quantidade: 'quantidade'
  };

  export type TbProdComposicaoScalarFieldEnum = (typeof TbProdComposicaoScalarFieldEnum)[keyof typeof TbProdComposicaoScalarFieldEnum]


  export const TbProdutosScalarFieldEnum: {
    idproduto: 'idproduto',
    idtipprod: 'idtipprod',
    idunidade: 'idunidade',
    nomeprod: 'nomeprod',
    quantminima: 'quantminima'
  };

  export type TbProdutosScalarFieldEnum = (typeof TbProdutosScalarFieldEnum)[keyof typeof TbProdutosScalarFieldEnum]


  export const TbTiposProdutosScalarFieldEnum: {
    idtipprod: 'idtipprod',
    nometipprod: 'nometipprod'
  };

  export type TbTiposProdutosScalarFieldEnum = (typeof TbTiposProdutosScalarFieldEnum)[keyof typeof TbTiposProdutosScalarFieldEnum]


  export const TbUnidadeMedidaScalarFieldEnum: {
    idunidade: 'idunidade',
    siglaun: 'siglaun',
    nomeunidade: 'nomeunidade'
  };

  export type TbUnidadeMedidaScalarFieldEnum = (typeof TbUnidadeMedidaScalarFieldEnum)[keyof typeof TbUnidadeMedidaScalarFieldEnum]


  export const TbUsuariosScalarFieldEnum: {
    idusuario: 'idusuario',
    usu_login: 'usu_login',
    nome: 'nome',
    senha: 'senha',
    dtcriacao: 'dtcriacao',
    usu_admin: 'usu_admin'
  };

  export type TbUsuariosScalarFieldEnum = (typeof TbUsuariosScalarFieldEnum)[keyof typeof TbUsuariosScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type tbFornecedoresWhereInput = {
    AND?: Enumerable<tbFornecedoresWhereInput>
    OR?: Enumerable<tbFornecedoresWhereInput>
    NOT?: Enumerable<tbFornecedoresWhereInput>
    idfor?: IntFilter | number
    nomefor?: StringNullableFilter | string | null
    fisjur?: StringNullableFilter | string | null
    cnpjcpf?: StringNullableFilter | string | null
    telefone?: StringNullableFilter | string | null
    cep?: StringNullableFilter | string | null
    cidade?: StringNullableFilter | string | null
    rua?: StringNullableFilter | string | null
    bairro?: StringNullableFilter | string | null
    numero?: IntNullableFilter | number | null
    complemento?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    tbMovimentos?: TbMovimentosListRelationFilter
    tbNF?: TbNFListRelationFilter
  }

  export type tbFornecedoresOrderByWithRelationInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    tbMovimentos?: tbMovimentosOrderByRelationAggregateInput
    tbNF?: tbNFOrderByRelationAggregateInput
  }

  export type tbFornecedoresWhereUniqueInput = {
    idfor?: number
    cnpjcpf?: string
    email?: string
  }

  export type tbFornecedoresOrderByWithAggregationInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    _count?: tbFornecedoresCountOrderByAggregateInput
    _avg?: tbFornecedoresAvgOrderByAggregateInput
    _max?: tbFornecedoresMaxOrderByAggregateInput
    _min?: tbFornecedoresMinOrderByAggregateInput
    _sum?: tbFornecedoresSumOrderByAggregateInput
  }

  export type tbFornecedoresScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbFornecedoresScalarWhereWithAggregatesInput>
    idfor?: IntWithAggregatesFilter | number
    nomefor?: StringNullableWithAggregatesFilter | string | null
    fisjur?: StringNullableWithAggregatesFilter | string | null
    cnpjcpf?: StringNullableWithAggregatesFilter | string | null
    telefone?: StringNullableWithAggregatesFilter | string | null
    cep?: StringNullableWithAggregatesFilter | string | null
    cidade?: StringNullableWithAggregatesFilter | string | null
    rua?: StringNullableWithAggregatesFilter | string | null
    bairro?: StringNullableWithAggregatesFilter | string | null
    numero?: IntNullableWithAggregatesFilter | number | null
    complemento?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbProdutosWhereInput = {
    AND?: Enumerable<tbProdutosWhereInput>
    OR?: Enumerable<tbProdutosWhereInput>
    NOT?: Enumerable<tbProdutosWhereInput>
    idproduto?: IntFilter | number
    idtipprod?: IntNullableFilter | number | null
    idunidade?: IntNullableFilter | number | null
    nomeprod?: StringNullableFilter | string | null
    quantminima?: IntNullableFilter | number | null
    tbEstoque?: TbEstoqueListRelationFilter
    tbMovItens?: TbMovItensListRelationFilter
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: TbProdComposicaoListRelationFilter
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: TbProdComposicaoListRelationFilter
    tbTiposProdutos?: XOR<TbTiposProdutosRelationFilter, tbTiposProdutosWhereInput> | null
    tbUnidadeMedida?: XOR<TbUnidadeMedidaRelationFilter, tbUnidadeMedidaWhereInput> | null
  }

  export type tbProdutosOrderByWithRelationInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    nomeprod?: SortOrder
    quantminima?: SortOrder
    tbEstoque?: tbEstoqueOrderByRelationAggregateInput
    tbMovItens?: tbMovItensOrderByRelationAggregateInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoOrderByRelationAggregateInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoOrderByRelationAggregateInput
    tbTiposProdutos?: tbTiposProdutosOrderByWithRelationInput
    tbUnidadeMedida?: tbUnidadeMedidaOrderByWithRelationInput
  }

  export type tbProdutosWhereUniqueInput = {
    idproduto?: number
  }

  export type tbProdutosOrderByWithAggregationInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    nomeprod?: SortOrder
    quantminima?: SortOrder
    _count?: tbProdutosCountOrderByAggregateInput
    _avg?: tbProdutosAvgOrderByAggregateInput
    _max?: tbProdutosMaxOrderByAggregateInput
    _min?: tbProdutosMinOrderByAggregateInput
    _sum?: tbProdutosSumOrderByAggregateInput
  }

  export type tbProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbProdutosScalarWhereWithAggregatesInput>
    idproduto?: IntWithAggregatesFilter | number
    idtipprod?: IntNullableWithAggregatesFilter | number | null
    idunidade?: IntNullableWithAggregatesFilter | number | null
    nomeprod?: StringNullableWithAggregatesFilter | string | null
    quantminima?: IntNullableWithAggregatesFilter | number | null
  }

  export type tbTiposProdutosWhereInput = {
    AND?: Enumerable<tbTiposProdutosWhereInput>
    OR?: Enumerable<tbTiposProdutosWhereInput>
    NOT?: Enumerable<tbTiposProdutosWhereInput>
    idtipprod?: IntFilter | number
    nometipprod?: StringNullableFilter | string | null
    tbProdutos?: TbProdutosListRelationFilter
  }

  export type tbTiposProdutosOrderByWithRelationInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
    tbProdutos?: tbProdutosOrderByRelationAggregateInput
  }

  export type tbTiposProdutosWhereUniqueInput = {
    idtipprod?: number
  }

  export type tbTiposProdutosOrderByWithAggregationInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
    _count?: tbTiposProdutosCountOrderByAggregateInput
    _avg?: tbTiposProdutosAvgOrderByAggregateInput
    _max?: tbTiposProdutosMaxOrderByAggregateInput
    _min?: tbTiposProdutosMinOrderByAggregateInput
    _sum?: tbTiposProdutosSumOrderByAggregateInput
  }

  export type tbTiposProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbTiposProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbTiposProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbTiposProdutosScalarWhereWithAggregatesInput>
    idtipprod?: IntWithAggregatesFilter | number
    nometipprod?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbUnidadeMedidaWhereInput = {
    AND?: Enumerable<tbUnidadeMedidaWhereInput>
    OR?: Enumerable<tbUnidadeMedidaWhereInput>
    NOT?: Enumerable<tbUnidadeMedidaWhereInput>
    idunidade?: IntFilter | number
    siglaun?: StringNullableFilter | string | null
    nomeunidade?: StringNullableFilter | string | null
    tbProdutos?: TbProdutosListRelationFilter
  }

  export type tbUnidadeMedidaOrderByWithRelationInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
    tbProdutos?: tbProdutosOrderByRelationAggregateInput
  }

  export type tbUnidadeMedidaWhereUniqueInput = {
    idunidade?: number
    siglaun?: string
  }

  export type tbUnidadeMedidaOrderByWithAggregationInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
    _count?: tbUnidadeMedidaCountOrderByAggregateInput
    _avg?: tbUnidadeMedidaAvgOrderByAggregateInput
    _max?: tbUnidadeMedidaMaxOrderByAggregateInput
    _min?: tbUnidadeMedidaMinOrderByAggregateInput
    _sum?: tbUnidadeMedidaSumOrderByAggregateInput
  }

  export type tbUnidadeMedidaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbUnidadeMedidaScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbUnidadeMedidaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbUnidadeMedidaScalarWhereWithAggregatesInput>
    idunidade?: IntWithAggregatesFilter | number
    siglaun?: StringNullableWithAggregatesFilter | string | null
    nomeunidade?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbEstoqueWhereInput = {
    AND?: Enumerable<tbEstoqueWhereInput>
    OR?: Enumerable<tbEstoqueWhereInput>
    NOT?: Enumerable<tbEstoqueWhereInput>
    idestoque?: IntFilter | number
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    idproduto?: IntNullableFilter | number | null
    quantidade?: FloatNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    tbLocais?: XOR<TbLocaisRelationFilter, tbLocaisWhereInput> | null
    tbMovimentos?: XOR<TbMovimentosRelationFilter, tbMovimentosWhereInput>
    tbProdutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput> | null
    tbMovItens?: XOR<TbMovItensRelationFilter, tbMovItensWhereInput> | null
  }

  export type tbEstoqueOrderByWithRelationInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
    tbLocais?: tbLocaisOrderByWithRelationInput
    tbMovimentos?: tbMovimentosOrderByWithRelationInput
    tbProdutos?: tbProdutosOrderByWithRelationInput
    tbMovItens?: tbMovItensOrderByWithRelationInput
  }

  export type tbEstoqueWhereUniqueInput = {
    idestoque_idmovimento_seqitem?: tbEstoqueIdestoqueIdmovimentoSeqitemCompoundUniqueInput
  }

  export type tbEstoqueOrderByWithAggregationInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
    _count?: tbEstoqueCountOrderByAggregateInput
    _avg?: tbEstoqueAvgOrderByAggregateInput
    _max?: tbEstoqueMaxOrderByAggregateInput
    _min?: tbEstoqueMinOrderByAggregateInput
    _sum?: tbEstoqueSumOrderByAggregateInput
  }

  export type tbEstoqueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbEstoqueScalarWhereWithAggregatesInput>
    idestoque?: IntWithAggregatesFilter | number
    idmovimento?: IntWithAggregatesFilter | number
    seqitem?: IntWithAggregatesFilter | number
    idlocal?: IntNullableWithAggregatesFilter | number | null
    idproduto?: IntNullableWithAggregatesFilter | number | null
    quantidade?: FloatNullableWithAggregatesFilter | number | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type tbLocaisWhereInput = {
    AND?: Enumerable<tbLocaisWhereInput>
    OR?: Enumerable<tbLocaisWhereInput>
    NOT?: Enumerable<tbLocaisWhereInput>
    idlocal?: IntFilter | number
    nomelocal?: StringNullableFilter | string | null
    tbEstoque?: TbEstoqueListRelationFilter
    tbMovItens?: TbMovItensListRelationFilter
  }

  export type tbLocaisOrderByWithRelationInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
    tbEstoque?: tbEstoqueOrderByRelationAggregateInput
    tbMovItens?: tbMovItensOrderByRelationAggregateInput
  }

  export type tbLocaisWhereUniqueInput = {
    idlocal?: number
  }

  export type tbLocaisOrderByWithAggregationInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
    _count?: tbLocaisCountOrderByAggregateInput
    _avg?: tbLocaisAvgOrderByAggregateInput
    _max?: tbLocaisMaxOrderByAggregateInput
    _min?: tbLocaisMinOrderByAggregateInput
    _sum?: tbLocaisSumOrderByAggregateInput
  }

  export type tbLocaisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbLocaisScalarWhereWithAggregatesInput>
    idlocal?: IntWithAggregatesFilter | number
    nomelocal?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbMovItensWhereInput = {
    AND?: Enumerable<tbMovItensWhereInput>
    OR?: Enumerable<tbMovItensWhereInput>
    NOT?: Enumerable<tbMovItensWhereInput>
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    quantidade?: FloatNullableFilter | number | null
    tbEstoque?: TbEstoqueListRelationFilter
    tbLocais?: XOR<TbLocaisRelationFilter, tbLocaisWhereInput> | null
    tbMovimentos?: XOR<TbMovimentosRelationFilter, tbMovimentosWhereInput>
    tbProdutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
    tbNFItens?: TbNFItensListRelationFilter
  }

  export type tbMovItensOrderByWithRelationInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
    tbEstoque?: tbEstoqueOrderByRelationAggregateInput
    tbLocais?: tbLocaisOrderByWithRelationInput
    tbMovimentos?: tbMovimentosOrderByWithRelationInput
    tbProdutos?: tbProdutosOrderByWithRelationInput
    tbNFItens?: tbNFItensOrderByRelationAggregateInput
  }

  export type tbMovItensWhereUniqueInput = {
    idmovimento_seqitem_idproduto?: tbMovItensIdmovimentoSeqitemIdprodutoCompoundUniqueInput
  }

  export type tbMovItensOrderByWithAggregationInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
    _count?: tbMovItensCountOrderByAggregateInput
    _avg?: tbMovItensAvgOrderByAggregateInput
    _max?: tbMovItensMaxOrderByAggregateInput
    _min?: tbMovItensMinOrderByAggregateInput
    _sum?: tbMovItensSumOrderByAggregateInput
  }

  export type tbMovItensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbMovItensScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbMovItensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbMovItensScalarWhereWithAggregatesInput>
    idmovimento?: IntWithAggregatesFilter | number
    seqitem?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    idlocal?: IntNullableWithAggregatesFilter | number | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
    quantidade?: FloatNullableWithAggregatesFilter | number | null
  }

  export type tbMovimentosWhereInput = {
    AND?: Enumerable<tbMovimentosWhereInput>
    OR?: Enumerable<tbMovimentosWhereInput>
    NOT?: Enumerable<tbMovimentosWhereInput>
    idmovimento?: IntFilter | number
    tipmov?: StringNullableFilter | string | null
    idfor?: IntNullableFilter | number | null
    idusuario_alteracao?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    tbEstoque?: TbEstoqueListRelationFilter
    tbMovItens?: TbMovItensListRelationFilter
    tbFornecedores?: XOR<TbFornecedoresRelationFilter, tbFornecedoresWhereInput> | null
    tbUsuarios?: XOR<TbUsuariosRelationFilter, tbUsuariosWhereInput> | null
    tbNF?: TbNFListRelationFilter
  }

  export type tbMovimentosOrderByWithRelationInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
    tbEstoque?: tbEstoqueOrderByRelationAggregateInput
    tbMovItens?: tbMovItensOrderByRelationAggregateInput
    tbFornecedores?: tbFornecedoresOrderByWithRelationInput
    tbUsuarios?: tbUsuariosOrderByWithRelationInput
    tbNF?: tbNFOrderByRelationAggregateInput
  }

  export type tbMovimentosWhereUniqueInput = {
    idmovimento?: number
  }

  export type tbMovimentosOrderByWithAggregationInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
    _count?: tbMovimentosCountOrderByAggregateInput
    _avg?: tbMovimentosAvgOrderByAggregateInput
    _max?: tbMovimentosMaxOrderByAggregateInput
    _min?: tbMovimentosMinOrderByAggregateInput
    _sum?: tbMovimentosSumOrderByAggregateInput
  }

  export type tbMovimentosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbMovimentosScalarWhereWithAggregatesInput>
    idmovimento?: IntWithAggregatesFilter | number
    tipmov?: StringNullableWithAggregatesFilter | string | null
    idfor?: IntNullableWithAggregatesFilter | number | null
    idusuario_alteracao?: IntNullableWithAggregatesFilter | number | null
    dtinc?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type tbNFWhereInput = {
    AND?: Enumerable<tbNFWhereInput>
    OR?: Enumerable<tbNFWhereInput>
    NOT?: Enumerable<tbNFWhereInput>
    idnf?: IntFilter | number
    numnf?: IntNullableFilter | number | null
    idmovimento?: IntFilter | number
    serienf?: IntNullableFilter | number | null
    idfor?: IntNullableFilter | number | null
    idusuario_inclusao?: IntNullableFilter | number | null
    dtemissao?: DateTimeNullableFilter | Date | string | null
    vlrtotal?: FloatNullableFilter | number | null
    tbMovimentos?: XOR<TbMovimentosRelationFilter, tbMovimentosWhereInput>
    tbFornecedores?: XOR<TbFornecedoresRelationFilter, tbFornecedoresWhereInput> | null
    tbUsuarios?: XOR<TbUsuariosRelationFilter, tbUsuariosWhereInput> | null
    tbNFItens?: TbNFItensListRelationFilter
  }

  export type tbNFOrderByWithRelationInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
    tbMovimentos?: tbMovimentosOrderByWithRelationInput
    tbFornecedores?: tbFornecedoresOrderByWithRelationInput
    tbUsuarios?: tbUsuariosOrderByWithRelationInput
    tbNFItens?: tbNFItensOrderByRelationAggregateInput
  }

  export type tbNFWhereUniqueInput = {
    numnf?: number
    idnf_idmovimento?: tbNFIdnfIdmovimentoCompoundUniqueInput
  }

  export type tbNFOrderByWithAggregationInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
    _count?: tbNFCountOrderByAggregateInput
    _avg?: tbNFAvgOrderByAggregateInput
    _max?: tbNFMaxOrderByAggregateInput
    _min?: tbNFMinOrderByAggregateInput
    _sum?: tbNFSumOrderByAggregateInput
  }

  export type tbNFScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbNFScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbNFScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbNFScalarWhereWithAggregatesInput>
    idnf?: IntWithAggregatesFilter | number
    numnf?: IntNullableWithAggregatesFilter | number | null
    idmovimento?: IntWithAggregatesFilter | number
    serienf?: IntNullableWithAggregatesFilter | number | null
    idfor?: IntNullableWithAggregatesFilter | number | null
    idusuario_inclusao?: IntNullableWithAggregatesFilter | number | null
    dtemissao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    vlrtotal?: FloatNullableWithAggregatesFilter | number | null
  }

  export type tbNFItensWhereInput = {
    AND?: Enumerable<tbNFItensWhereInput>
    OR?: Enumerable<tbNFItensWhereInput>
    NOT?: Enumerable<tbNFItensWhereInput>
    idnf?: IntFilter | number
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    vlrunitario?: FloatNullableFilter | number | null
    quantidade?: FloatNullableFilter | number | null
    vlrtotitem?: FloatNullableFilter | number | null
    tbMovItens?: XOR<TbMovItensRelationFilter, tbMovItensWhereInput>
    tbNF?: XOR<TbNFRelationFilter, tbNFWhereInput>
  }

  export type tbNFItensOrderByWithRelationInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
    tbMovItens?: tbMovItensOrderByWithRelationInput
    tbNF?: tbNFOrderByWithRelationInput
  }

  export type tbNFItensWhereUniqueInput = {
    idnf_seqitem_idproduto_idmovimento?: tbNFItensIdnfSeqitemIdprodutoIdmovimentoCompoundUniqueInput
  }

  export type tbNFItensOrderByWithAggregationInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
    _count?: tbNFItensCountOrderByAggregateInput
    _avg?: tbNFItensAvgOrderByAggregateInput
    _max?: tbNFItensMaxOrderByAggregateInput
    _min?: tbNFItensMinOrderByAggregateInput
    _sum?: tbNFItensSumOrderByAggregateInput
  }

  export type tbNFItensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbNFItensScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbNFItensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbNFItensScalarWhereWithAggregatesInput>
    idnf?: IntWithAggregatesFilter | number
    idmovimento?: IntWithAggregatesFilter | number
    seqitem?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    vlrunitario?: FloatNullableWithAggregatesFilter | number | null
    quantidade?: FloatNullableWithAggregatesFilter | number | null
    vlrtotitem?: FloatNullableWithAggregatesFilter | number | null
  }

  export type tbProdComposicaoWhereInput = {
    AND?: Enumerable<tbProdComposicaoWhereInput>
    OR?: Enumerable<tbProdComposicaoWhereInput>
    NOT?: Enumerable<tbProdComposicaoWhereInput>
    idcomp?: IntFilter | number
    idproduto?: IntFilter | number
    idprodutocomp?: IntFilter | number
    quantidade?: FloatNullableFilter | number | null
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: XOR<TbProdutosRelationFilter, tbProdutosWhereInput>
  }

  export type tbProdComposicaoOrderByWithRelationInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: tbProdutosOrderByWithRelationInput
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: tbProdutosOrderByWithRelationInput
  }

  export type tbProdComposicaoWhereUniqueInput = {
    idcomp_idproduto_idprodutocomp?: tbProdComposicaoIdcompIdprodutoIdprodutocompCompoundUniqueInput
  }

  export type tbProdComposicaoOrderByWithAggregationInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
    _count?: tbProdComposicaoCountOrderByAggregateInput
    _avg?: tbProdComposicaoAvgOrderByAggregateInput
    _max?: tbProdComposicaoMaxOrderByAggregateInput
    _min?: tbProdComposicaoMinOrderByAggregateInput
    _sum?: tbProdComposicaoSumOrderByAggregateInput
  }

  export type tbProdComposicaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbProdComposicaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbProdComposicaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbProdComposicaoScalarWhereWithAggregatesInput>
    idcomp?: IntWithAggregatesFilter | number
    idproduto?: IntWithAggregatesFilter | number
    idprodutocomp?: IntWithAggregatesFilter | number
    quantidade?: FloatNullableWithAggregatesFilter | number | null
  }

  export type tbUsuariosWhereInput = {
    AND?: Enumerable<tbUsuariosWhereInput>
    OR?: Enumerable<tbUsuariosWhereInput>
    NOT?: Enumerable<tbUsuariosWhereInput>
    idusuario?: IntFilter | number
    usu_login?: StringNullableFilter | string | null
    nome?: StringNullableFilter | string | null
    senha?: StringNullableFilter | string | null
    dtcriacao?: DateTimeNullableFilter | Date | string | null
    usu_admin?: BoolNullableFilter | boolean | null
    tbMovimentos?: TbMovimentosListRelationFilter
    tbNF?: TbNFListRelationFilter
  }

  export type tbUsuariosOrderByWithRelationInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
    tbMovimentos?: tbMovimentosOrderByRelationAggregateInput
    tbNF?: tbNFOrderByRelationAggregateInput
  }

  export type tbUsuariosWhereUniqueInput = {
    idusuario?: number
    usu_login?: string
  }

  export type tbUsuariosOrderByWithAggregationInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
    _count?: tbUsuariosCountOrderByAggregateInput
    _avg?: tbUsuariosAvgOrderByAggregateInput
    _max?: tbUsuariosMaxOrderByAggregateInput
    _min?: tbUsuariosMinOrderByAggregateInput
    _sum?: tbUsuariosSumOrderByAggregateInput
  }

  export type tbUsuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbUsuariosScalarWhereWithAggregatesInput>
    idusuario?: IntWithAggregatesFilter | number
    usu_login?: StringNullableWithAggregatesFilter | string | null
    nome?: StringNullableWithAggregatesFilter | string | null
    senha?: StringNullableWithAggregatesFilter | string | null
    dtcriacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    usu_admin?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type tbFornecedoresCreateInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbMovimentos?: tbMovimentosCreateNestedManyWithoutTbFornecedoresInput
    tbNF?: tbNFCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbMovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbFornecedoresInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresUpdateInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovimentos?: tbMovimentosUpdateManyWithoutTbFornecedoresNestedInput
    tbNF?: tbNFUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbFornecedoresNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbFornecedoresCreateManyInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
  }

  export type tbFornecedoresUpdateManyMutationInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbFornecedoresUncheckedUpdateManyInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbProdutosCreateInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosUpdateInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbProdutosCreateManyInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateManyMutationInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosUncheckedUpdateManyInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbTiposProdutosCreateInput = {
    nometipprod?: string | null
    tbProdutos?: tbProdutosCreateNestedManyWithoutTbTiposProdutosInput
  }

  export type tbTiposProdutosUncheckedCreateInput = {
    idtipprod?: number
    nometipprod?: string | null
    tbProdutos?: tbProdutosUncheckedCreateNestedManyWithoutTbTiposProdutosInput
  }

  export type tbTiposProdutosUpdateInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
    tbProdutos?: tbProdutosUpdateManyWithoutTbTiposProdutosNestedInput
  }

  export type tbTiposProdutosUncheckedUpdateInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
    tbProdutos?: tbProdutosUncheckedUpdateManyWithoutTbTiposProdutosNestedInput
  }

  export type tbTiposProdutosCreateManyInput = {
    idtipprod?: number
    nometipprod?: string | null
  }

  export type tbTiposProdutosUpdateManyMutationInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbTiposProdutosUncheckedUpdateManyInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidadeMedidaCreateInput = {
    siglaun?: string | null
    nomeunidade?: string | null
    tbProdutos?: tbProdutosCreateNestedManyWithoutTbUnidadeMedidaInput
  }

  export type tbUnidadeMedidaUncheckedCreateInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
    tbProdutos?: tbProdutosUncheckedCreateNestedManyWithoutTbUnidadeMedidaInput
  }

  export type tbUnidadeMedidaUpdateInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
    tbProdutos?: tbProdutosUpdateManyWithoutTbUnidadeMedidaNestedInput
  }

  export type tbUnidadeMedidaUncheckedUpdateInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
    tbProdutos?: tbProdutosUncheckedUpdateManyWithoutTbUnidadeMedidaNestedInput
  }

  export type tbUnidadeMedidaCreateManyInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidadeMedidaUpdateManyMutationInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidadeMedidaUncheckedUpdateManyInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbEstoqueCreateInput = {
    idestoque?: number
    quantidade?: number | null
    dtinc?: Date | string | null
    tbLocais?: tbLocaisCreateNestedOneWithoutTbEstoqueInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbEstoqueInput
    tbProdutos?: tbProdutosCreateNestedOneWithoutTbEstoqueInput
    tbMovItens?: tbMovItensCreateNestedOneWithoutTbEstoqueInput
  }

  export type tbEstoqueUncheckedCreateInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idlocal?: number | null
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueUpdateInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbLocais?: tbLocaisUpdateOneWithoutTbEstoqueNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbEstoqueNestedInput
    tbProdutos?: tbProdutosUpdateOneWithoutTbEstoqueNestedInput
    tbMovItens?: tbMovItensUpdateOneWithoutTbEstoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    idproduto?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueCreateManyInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idlocal?: number | null
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueUpdateManyMutationInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueUncheckedUpdateManyInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    idproduto?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbLocaisCreateInput = {
    nomelocal?: string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbLocaisInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisUncheckedCreateInput = {
    idlocal?: number
    nomelocal?: string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbLocaisInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisUpdateInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbLocaisNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbLocaisNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbLocaisCreateManyInput = {
    idlocal?: number
    nomelocal?: string | null
  }

  export type tbLocaisUpdateManyMutationInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbLocaisUncheckedUpdateManyInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbMovItensCreateInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovItensInput
    tbLocais?: tbLocaisCreateNestedOneWithoutTbMovItensInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbMovItensInput
    tbProdutos: tbProdutosCreateNestedOneWithoutTbMovItensInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUpdateInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovItensNestedInput
    tbLocais?: tbLocaisUpdateOneWithoutTbMovItensNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbProdutos?: tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensCreateManyInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
  }

  export type tbMovItensUpdateManyMutationInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbMovItensUncheckedUpdateManyInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbMovimentosCreateInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbMovimentosInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbMovimentosInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbMovimentosInput
    tbNF?: tbNFCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUpdateInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbMovimentosNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbMovimentosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosCreateManyInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
  }

  export type tbMovimentosUpdateManyMutationInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovimentosUncheckedUpdateManyInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbNFCreateInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbNFInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbNFInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbNFInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbNFInput
  }

  export type tbNFUncheckedCreateInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbNFInput
  }

  export type tbNFUpdateInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbNFNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbNFNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbNFNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFCreateManyInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
  }

  export type tbNFUpdateManyMutationInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbNFUncheckedUpdateManyInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbNFItensCreateInput = {
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
    tbMovItens: tbMovItensCreateNestedOneWithoutTbNFItensInput
    tbNF: tbNFCreateNestedOneWithoutTbNFItensInput
  }

  export type tbNFItensUncheckedCreateInput = {
    idnf: number
    idmovimento: number
    seqitem: number
    idproduto: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbNFItensUpdateInput = {
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovItens?: tbMovItensUpdateOneRequiredWithoutTbNFItensNestedInput
    tbNF?: tbNFUpdateOneRequiredWithoutTbNFItensNestedInput
  }

  export type tbNFItensUncheckedUpdateInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbNFItensCreateManyInput = {
    idnf: number
    idmovimento: number
    seqitem: number
    idproduto: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbNFItensUpdateManyMutationInput = {
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbNFItensUncheckedUpdateManyInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoCreateInput = {
    idcomp?: number
    quantidade?: number | null
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos: tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos: tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdComposicaoUncheckedCreateInput = {
    idcomp?: number
    idproduto: number
    idprodutocomp: number
    quantidade?: number | null
  }

  export type tbProdComposicaoUpdateInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbProdComposicaoUncheckedUpdateInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoCreateManyInput = {
    idcomp?: number
    idproduto: number
    idprodutocomp: number
    quantidade?: number | null
  }

  export type tbProdComposicaoUpdateManyMutationInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoUncheckedUpdateManyInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbUsuariosCreateInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbMovimentos?: tbMovimentosCreateNestedManyWithoutTbUsuariosInput
    tbNF?: tbNFCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosUncheckedCreateInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbMovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbUsuariosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosUpdateInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbMovimentos?: tbMovimentosUpdateManyWithoutTbUsuariosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbMovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbUsuariosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbUsuariosCreateManyInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
  }

  export type tbUsuariosUpdateManyMutationInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type tbUsuariosUncheckedUpdateManyInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TbMovimentosListRelationFilter = {
    every?: tbMovimentosWhereInput
    some?: tbMovimentosWhereInput
    none?: tbMovimentosWhereInput
  }

  export type TbNFListRelationFilter = {
    every?: tbNFWhereInput
    some?: tbNFWhereInput
    none?: tbNFWhereInput
  }

  export type tbMovimentosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbNFOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbFornecedoresCountOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresAvgOrderByAggregateInput = {
    idfor?: SortOrder
    numero?: SortOrder
  }

  export type tbFornecedoresMaxOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresMinOrderByAggregateInput = {
    idfor?: SortOrder
    nomefor?: SortOrder
    fisjur?: SortOrder
    cnpjcpf?: SortOrder
    telefone?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    rua?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
  }

  export type tbFornecedoresSumOrderByAggregateInput = {
    idfor?: SortOrder
    numero?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type TbEstoqueListRelationFilter = {
    every?: tbEstoqueWhereInput
    some?: tbEstoqueWhereInput
    none?: tbEstoqueWhereInput
  }

  export type TbMovItensListRelationFilter = {
    every?: tbMovItensWhereInput
    some?: tbMovItensWhereInput
    none?: tbMovItensWhereInput
  }

  export type TbProdComposicaoListRelationFilter = {
    every?: tbProdComposicaoWhereInput
    some?: tbProdComposicaoWhereInput
    none?: tbProdComposicaoWhereInput
  }

  export type TbTiposProdutosRelationFilter = {
    is?: tbTiposProdutosWhereInput | null
    isNot?: tbTiposProdutosWhereInput | null
  }

  export type TbUnidadeMedidaRelationFilter = {
    is?: tbUnidadeMedidaWhereInput | null
    isNot?: tbUnidadeMedidaWhereInput | null
  }

  export type tbEstoqueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbMovItensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbProdComposicaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbProdutosCountOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    nomeprod?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosAvgOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosMaxOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    nomeprod?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosMinOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    nomeprod?: SortOrder
    quantminima?: SortOrder
  }

  export type tbProdutosSumOrderByAggregateInput = {
    idproduto?: SortOrder
    idtipprod?: SortOrder
    idunidade?: SortOrder
    quantminima?: SortOrder
  }

  export type TbProdutosListRelationFilter = {
    every?: tbProdutosWhereInput
    some?: tbProdutosWhereInput
    none?: tbProdutosWhereInput
  }

  export type tbProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbTiposProdutosCountOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposProdutosAvgOrderByAggregateInput = {
    idtipprod?: SortOrder
  }

  export type tbTiposProdutosMaxOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposProdutosMinOrderByAggregateInput = {
    idtipprod?: SortOrder
    nometipprod?: SortOrder
  }

  export type tbTiposProdutosSumOrderByAggregateInput = {
    idtipprod?: SortOrder
  }

  export type tbUnidadeMedidaCountOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidadeMedidaAvgOrderByAggregateInput = {
    idunidade?: SortOrder
  }

  export type tbUnidadeMedidaMaxOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidadeMedidaMinOrderByAggregateInput = {
    idunidade?: SortOrder
    siglaun?: SortOrder
    nomeunidade?: SortOrder
  }

  export type tbUnidadeMedidaSumOrderByAggregateInput = {
    idunidade?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type TbLocaisRelationFilter = {
    is?: tbLocaisWhereInput | null
    isNot?: tbLocaisWhereInput | null
  }

  export type TbMovimentosRelationFilter = {
    is?: tbMovimentosWhereInput
    isNot?: tbMovimentosWhereInput
  }

  export type TbProdutosRelationFilter = {
    is?: tbProdutosWhereInput
    isNot?: tbProdutosWhereInput
  }

  export type TbMovItensRelationFilter = {
    is?: tbMovItensWhereInput
    isNot?: tbMovItensWhereInput
  }

  export type tbEstoqueIdestoqueIdmovimentoSeqitemCompoundUniqueInput = {
    idestoque: number
    idmovimento: number
    seqitem: number
  }

  export type tbEstoqueCountOrderByAggregateInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueAvgOrderByAggregateInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
  }

  export type tbEstoqueMaxOrderByAggregateInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueMinOrderByAggregateInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
    dtinc?: SortOrder
  }

  export type tbEstoqueSumOrderByAggregateInput = {
    idestoque?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idlocal?: SortOrder
    idproduto?: SortOrder
    quantidade?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type tbLocaisCountOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisAvgOrderByAggregateInput = {
    idlocal?: SortOrder
  }

  export type tbLocaisMaxOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisMinOrderByAggregateInput = {
    idlocal?: SortOrder
    nomelocal?: SortOrder
  }

  export type tbLocaisSumOrderByAggregateInput = {
    idlocal?: SortOrder
  }

  export type TbNFItensListRelationFilter = {
    every?: tbNFItensWhereInput
    some?: tbNFItensWhereInput
    none?: tbNFItensWhereInput
  }

  export type tbNFItensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbMovItensIdmovimentoSeqitemIdprodutoCompoundUniqueInput = {
    idmovimento: number
    seqitem: number
    idproduto: number
  }

  export type tbMovItensCountOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovItensAvgOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovItensMaxOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovItensMinOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    dtinc?: SortOrder
    quantidade?: SortOrder
  }

  export type tbMovItensSumOrderByAggregateInput = {
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    idlocal?: SortOrder
    quantidade?: SortOrder
  }

  export type TbFornecedoresRelationFilter = {
    is?: tbFornecedoresWhereInput | null
    isNot?: tbFornecedoresWhereInput | null
  }

  export type TbUsuariosRelationFilter = {
    is?: tbUsuariosWhereInput | null
    isNot?: tbUsuariosWhereInput | null
  }

  export type tbMovimentosCountOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosAvgOrderByAggregateInput = {
    idmovimento?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
  }

  export type tbMovimentosMaxOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosMinOrderByAggregateInput = {
    idmovimento?: SortOrder
    tipmov?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
    dtinc?: SortOrder
  }

  export type tbMovimentosSumOrderByAggregateInput = {
    idmovimento?: SortOrder
    idfor?: SortOrder
    idusuario_alteracao?: SortOrder
  }

  export type tbNFIdnfIdmovimentoCompoundUniqueInput = {
    idnf: number
    idmovimento: number
  }

  export type tbNFCountOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNFAvgOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNFMaxOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNFMinOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    dtemissao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type tbNFSumOrderByAggregateInput = {
    idnf?: SortOrder
    numnf?: SortOrder
    idmovimento?: SortOrder
    serienf?: SortOrder
    idfor?: SortOrder
    idusuario_inclusao?: SortOrder
    vlrtotal?: SortOrder
  }

  export type TbNFRelationFilter = {
    is?: tbNFWhereInput
    isNot?: tbNFWhereInput
  }

  export type tbNFItensIdnfSeqitemIdprodutoIdmovimentoCompoundUniqueInput = {
    idnf: number
    seqitem: number
    idproduto: number
    idmovimento: number
  }

  export type tbNFItensCountOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNFItensAvgOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNFItensMaxOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNFItensMinOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbNFItensSumOrderByAggregateInput = {
    idnf?: SortOrder
    idmovimento?: SortOrder
    seqitem?: SortOrder
    idproduto?: SortOrder
    vlrunitario?: SortOrder
    quantidade?: SortOrder
    vlrtotitem?: SortOrder
  }

  export type tbProdComposicaoIdcompIdprodutoIdprodutocompCompoundUniqueInput = {
    idcomp: number
    idproduto: number
    idprodutocomp: number
  }

  export type tbProdComposicaoCountOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdComposicaoAvgOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdComposicaoMaxOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdComposicaoMinOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type tbProdComposicaoSumOrderByAggregateInput = {
    idcomp?: SortOrder
    idproduto?: SortOrder
    idprodutocomp?: SortOrder
    quantidade?: SortOrder
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type tbUsuariosCountOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosAvgOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type tbUsuariosMaxOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosMinOrderByAggregateInput = {
    idusuario?: SortOrder
    usu_login?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    dtcriacao?: SortOrder
    usu_admin?: SortOrder
  }

  export type tbUsuariosSumOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type tbMovimentosCreateNestedManyWithoutTbFornecedoresInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbFornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbFornecedoresInput>
    createMany?: tbMovimentosCreateManyTbFornecedoresInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNFCreateNestedManyWithoutTbFornecedoresInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbFornecedoresInput>, Enumerable<tbNFUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbFornecedoresInput>
    createMany?: tbNFCreateManyTbFornecedoresInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type tbMovimentosUncheckedCreateNestedManyWithoutTbFornecedoresInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbFornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbFornecedoresInput>
    createMany?: tbMovimentosCreateManyTbFornecedoresInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNFUncheckedCreateNestedManyWithoutTbFornecedoresInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbFornecedoresInput>, Enumerable<tbNFUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbFornecedoresInput>
    createMany?: tbNFCreateManyTbFornecedoresInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tbMovimentosUpdateManyWithoutTbFornecedoresNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbFornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbFornecedoresInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbFornecedoresInput>
    createMany?: tbMovimentosCreateManyTbFornecedoresInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbFornecedoresInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbFornecedoresInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNFUpdateManyWithoutTbFornecedoresNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbFornecedoresInput>, Enumerable<tbNFUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbFornecedoresInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbFornecedoresInput>
    createMany?: tbNFCreateManyTbFornecedoresInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbFornecedoresInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbFornecedoresInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbFornecedoresNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbFornecedoresInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbFornecedoresInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbFornecedoresInput>
    createMany?: tbMovimentosCreateManyTbFornecedoresInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbFornecedoresInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbFornecedoresInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNFUncheckedUpdateManyWithoutTbFornecedoresNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbFornecedoresInput>, Enumerable<tbNFUncheckedCreateWithoutTbFornecedoresInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbFornecedoresInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbFornecedoresInput>
    createMany?: tbNFCreateManyTbFornecedoresInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbFornecedoresInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbFornecedoresInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTbProdutosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbProdutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbProdutosInput>
    createMany?: tbEstoqueCreateManyTbProdutosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensCreateNestedManyWithoutTbProdutosInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbProdutosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbProdutosInput>
    createMany?: tbMovItensCreateManyTbProdutosInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInputEnvelope
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
  }

  export type tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInputEnvelope
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
  }

  export type tbTiposProdutosCreateNestedOneWithoutTbProdutosInput = {
    create?: XOR<tbTiposProdutosCreateWithoutTbProdutosInput, tbTiposProdutosUncheckedCreateWithoutTbProdutosInput>
    connectOrCreate?: tbTiposProdutosCreateOrConnectWithoutTbProdutosInput
    connect?: tbTiposProdutosWhereUniqueInput
  }

  export type tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput = {
    create?: XOR<tbUnidadeMedidaCreateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedCreateWithoutTbProdutosInput>
    connectOrCreate?: tbUnidadeMedidaCreateOrConnectWithoutTbProdutosInput
    connect?: tbUnidadeMedidaWhereUniqueInput
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbProdutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbProdutosInput>
    createMany?: tbEstoqueCreateManyTbProdutosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbProdutosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbProdutosInput>
    createMany?: tbMovItensCreateManyTbProdutosInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInputEnvelope
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
  }

  export type tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInputEnvelope
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTbProdutosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbProdutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbProdutosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbProdutosInput>
    createMany?: tbEstoqueCreateManyTbProdutosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbProdutosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbProdutosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUpdateManyWithoutTbProdutosNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbProdutosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbProdutosInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbProdutosInput>
    createMany?: tbMovItensCreateManyTbProdutosInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbProdutosInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbProdutosInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    upsert?: Enumerable<tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInputEnvelope
    set?: Enumerable<tbProdComposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdComposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    update?: Enumerable<tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    updateMany?: Enumerable<tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    deleteMany?: Enumerable<tbProdComposicaoScalarWhereInput>
  }

  export type tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    upsert?: Enumerable<tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInputEnvelope
    set?: Enumerable<tbProdComposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdComposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    update?: Enumerable<tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    updateMany?: Enumerable<tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    deleteMany?: Enumerable<tbProdComposicaoScalarWhereInput>
  }

  export type tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput = {
    create?: XOR<tbTiposProdutosCreateWithoutTbProdutosInput, tbTiposProdutosUncheckedCreateWithoutTbProdutosInput>
    connectOrCreate?: tbTiposProdutosCreateOrConnectWithoutTbProdutosInput
    upsert?: tbTiposProdutosUpsertWithoutTbProdutosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbTiposProdutosWhereUniqueInput
    update?: XOR<tbTiposProdutosUpdateWithoutTbProdutosInput, tbTiposProdutosUncheckedUpdateWithoutTbProdutosInput>
  }

  export type tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput = {
    create?: XOR<tbUnidadeMedidaCreateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedCreateWithoutTbProdutosInput>
    connectOrCreate?: tbUnidadeMedidaCreateOrConnectWithoutTbProdutosInput
    upsert?: tbUnidadeMedidaUpsertWithoutTbProdutosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUnidadeMedidaWhereUniqueInput
    update?: XOR<tbUnidadeMedidaUpdateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedUpdateWithoutTbProdutosInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbProdutosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbProdutosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbProdutosInput>
    createMany?: tbEstoqueCreateManyTbProdutosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbProdutosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbProdutosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbProdutosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbProdutosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbProdutosInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbProdutosInput>
    createMany?: tbMovItensCreateManyTbProdutosInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbProdutosInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbProdutosInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    upsert?: Enumerable<tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInputEnvelope
    set?: Enumerable<tbProdComposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdComposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    update?: Enumerable<tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    updateMany?: Enumerable<tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    deleteMany?: Enumerable<tbProdComposicaoScalarWhereInput>
  }

  export type tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>, Enumerable<tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>>
    connectOrCreate?: Enumerable<tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    upsert?: Enumerable<tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    createMany?: tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInputEnvelope
    set?: Enumerable<tbProdComposicaoWhereUniqueInput>
    disconnect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    delete?: Enumerable<tbProdComposicaoWhereUniqueInput>
    connect?: Enumerable<tbProdComposicaoWhereUniqueInput>
    update?: Enumerable<tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    updateMany?: Enumerable<tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    deleteMany?: Enumerable<tbProdComposicaoScalarWhereInput>
  }

  export type tbProdutosCreateNestedManyWithoutTbTiposProdutosInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbTiposProdutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbTiposProdutosInput>
    createMany?: tbProdutosCreateManyTbTiposProdutosInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUncheckedCreateNestedManyWithoutTbTiposProdutosInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbTiposProdutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbTiposProdutosInput>
    createMany?: tbProdutosCreateManyTbTiposProdutosInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUpdateManyWithoutTbTiposProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbTiposProdutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbTiposProdutosInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbTiposProdutosInput>
    createMany?: tbProdutosCreateManyTbTiposProdutosInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbTiposProdutosInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbTiposProdutosInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbTiposProdutosNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbTiposProdutosInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbTiposProdutosInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbTiposProdutosInput>
    createMany?: tbProdutosCreateManyTbTiposProdutosInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbTiposProdutosInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbTiposProdutosInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosCreateNestedManyWithoutTbUnidadeMedidaInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbUnidadeMedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbUnidadeMedidaInput>
    createMany?: tbProdutosCreateManyTbUnidadeMedidaInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUncheckedCreateNestedManyWithoutTbUnidadeMedidaInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbUnidadeMedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbUnidadeMedidaInput>
    createMany?: tbProdutosCreateManyTbUnidadeMedidaInputEnvelope
    connect?: Enumerable<tbProdutosWhereUniqueInput>
  }

  export type tbProdutosUpdateManyWithoutTbUnidadeMedidaNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbUnidadeMedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbUnidadeMedidaInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbUnidadeMedidaInput>
    createMany?: tbProdutosCreateManyTbUnidadeMedidaInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbUnidadeMedidaInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbUnidadeMedidaInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbUnidadeMedidaNestedInput = {
    create?: XOR<Enumerable<tbProdutosCreateWithoutTbUnidadeMedidaInput>, Enumerable<tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>>
    connectOrCreate?: Enumerable<tbProdutosCreateOrConnectWithoutTbUnidadeMedidaInput>
    upsert?: Enumerable<tbProdutosUpsertWithWhereUniqueWithoutTbUnidadeMedidaInput>
    createMany?: tbProdutosCreateManyTbUnidadeMedidaInputEnvelope
    set?: Enumerable<tbProdutosWhereUniqueInput>
    disconnect?: Enumerable<tbProdutosWhereUniqueInput>
    delete?: Enumerable<tbProdutosWhereUniqueInput>
    connect?: Enumerable<tbProdutosWhereUniqueInput>
    update?: Enumerable<tbProdutosUpdateWithWhereUniqueWithoutTbUnidadeMedidaInput>
    updateMany?: Enumerable<tbProdutosUpdateManyWithWhereWithoutTbUnidadeMedidaInput>
    deleteMany?: Enumerable<tbProdutosScalarWhereInput>
  }

  export type tbLocaisCreateNestedOneWithoutTbEstoqueInput = {
    create?: XOR<tbLocaisCreateWithoutTbEstoqueInput, tbLocaisUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbEstoqueInput
    connect?: tbLocaisWhereUniqueInput
  }

  export type tbMovimentosCreateNestedOneWithoutTbEstoqueInput = {
    create?: XOR<tbMovimentosCreateWithoutTbEstoqueInput, tbMovimentosUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbEstoqueInput
    connect?: tbMovimentosWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbEstoqueInput = {
    create?: XOR<tbProdutosCreateWithoutTbEstoqueInput, tbProdutosUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbEstoqueInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbMovItensCreateNestedOneWithoutTbEstoqueInput = {
    create?: XOR<tbMovItensCreateWithoutTbEstoqueInput, tbMovItensUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbMovItensCreateOrConnectWithoutTbEstoqueInput
    connect?: tbMovItensWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type tbLocaisUpdateOneWithoutTbEstoqueNestedInput = {
    create?: XOR<tbLocaisCreateWithoutTbEstoqueInput, tbLocaisUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbEstoqueInput
    upsert?: tbLocaisUpsertWithoutTbEstoqueInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbLocaisWhereUniqueInput
    update?: XOR<tbLocaisUpdateWithoutTbEstoqueInput, tbLocaisUncheckedUpdateWithoutTbEstoqueInput>
  }

  export type tbMovimentosUpdateOneRequiredWithoutTbEstoqueNestedInput = {
    create?: XOR<tbMovimentosCreateWithoutTbEstoqueInput, tbMovimentosUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbEstoqueInput
    upsert?: tbMovimentosUpsertWithoutTbEstoqueInput
    connect?: tbMovimentosWhereUniqueInput
    update?: XOR<tbMovimentosUpdateWithoutTbEstoqueInput, tbMovimentosUncheckedUpdateWithoutTbEstoqueInput>
  }

  export type tbProdutosUpdateOneWithoutTbEstoqueNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbEstoqueInput, tbProdutosUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbEstoqueInput
    upsert?: tbProdutosUpsertWithoutTbEstoqueInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbEstoqueInput, tbProdutosUncheckedUpdateWithoutTbEstoqueInput>
  }

  export type tbMovItensUpdateOneWithoutTbEstoqueNestedInput = {
    create?: XOR<tbMovItensCreateWithoutTbEstoqueInput, tbMovItensUncheckedCreateWithoutTbEstoqueInput>
    connectOrCreate?: tbMovItensCreateOrConnectWithoutTbEstoqueInput
    upsert?: tbMovItensUpsertWithoutTbEstoqueInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbMovItensWhereUniqueInput
    update?: XOR<tbMovItensUpdateWithoutTbEstoqueInput, tbMovItensUncheckedUpdateWithoutTbEstoqueInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTbLocaisInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbLocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbLocaisInput>
    createMany?: tbEstoqueCreateManyTbLocaisInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensCreateNestedManyWithoutTbLocaisInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbLocaisInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbLocaisInput>
    createMany?: tbMovItensCreateManyTbLocaisInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTbLocaisInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbLocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbLocaisInput>
    createMany?: tbEstoqueCreateManyTbLocaisInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensUncheckedCreateNestedManyWithoutTbLocaisInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbLocaisInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbLocaisInput>
    createMany?: tbMovItensCreateManyTbLocaisInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTbLocaisNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbLocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbLocaisInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbLocaisInput>
    createMany?: tbEstoqueCreateManyTbLocaisInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbLocaisInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbLocaisInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUpdateManyWithoutTbLocaisNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbLocaisInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbLocaisInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbLocaisInput>
    createMany?: tbMovItensCreateManyTbLocaisInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbLocaisInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbLocaisInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbLocaisNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbLocaisInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbLocaisInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbLocaisInput>
    createMany?: tbEstoqueCreateManyTbLocaisInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbLocaisInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbLocaisInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUncheckedUpdateManyWithoutTbLocaisNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbLocaisInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbLocaisInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbLocaisInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbLocaisInput>
    createMany?: tbMovItensCreateManyTbLocaisInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbLocaisInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbLocaisInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTbMovItensInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovItensInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovItensInput>
    createMany?: tbEstoqueCreateManyTbMovItensInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbLocaisCreateNestedOneWithoutTbMovItensInput = {
    create?: XOR<tbLocaisCreateWithoutTbMovItensInput, tbLocaisUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbMovItensInput
    connect?: tbLocaisWhereUniqueInput
  }

  export type tbMovimentosCreateNestedOneWithoutTbMovItensInput = {
    create?: XOR<tbMovimentosCreateWithoutTbMovItensInput, tbMovimentosUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbMovItensInput
    connect?: tbMovimentosWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbMovItensInput = {
    create?: XOR<tbProdutosCreateWithoutTbMovItensInput, tbProdutosUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbMovItensInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbNFItensCreateNestedManyWithoutTbMovItensInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbMovItensInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbMovItensInput>
    createMany?: tbNFItensCreateManyTbMovItensInputEnvelope
    connect?: Enumerable<tbNFItensWhereUniqueInput>
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovItensInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovItensInput>
    createMany?: tbEstoqueCreateManyTbMovItensInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbMovItensInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbMovItensInput>
    createMany?: tbNFItensCreateManyTbMovItensInputEnvelope
    connect?: Enumerable<tbNFItensWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTbMovItensNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovItensInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovItensInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbMovItensInput>
    createMany?: tbEstoqueCreateManyTbMovItensInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbMovItensInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbMovItensInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbLocaisUpdateOneWithoutTbMovItensNestedInput = {
    create?: XOR<tbLocaisCreateWithoutTbMovItensInput, tbLocaisUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbLocaisCreateOrConnectWithoutTbMovItensInput
    upsert?: tbLocaisUpsertWithoutTbMovItensInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbLocaisWhereUniqueInput
    update?: XOR<tbLocaisUpdateWithoutTbMovItensInput, tbLocaisUncheckedUpdateWithoutTbMovItensInput>
  }

  export type tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput = {
    create?: XOR<tbMovimentosCreateWithoutTbMovItensInput, tbMovimentosUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbMovItensInput
    upsert?: tbMovimentosUpsertWithoutTbMovItensInput
    connect?: tbMovimentosWhereUniqueInput
    update?: XOR<tbMovimentosUpdateWithoutTbMovItensInput, tbMovimentosUncheckedUpdateWithoutTbMovItensInput>
  }

  export type tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbMovItensInput, tbProdutosUncheckedCreateWithoutTbMovItensInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbMovItensInput
    upsert?: tbProdutosUpsertWithoutTbMovItensInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbMovItensInput, tbProdutosUncheckedUpdateWithoutTbMovItensInput>
  }

  export type tbNFItensUpdateManyWithoutTbMovItensNestedInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbMovItensInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbMovItensInput>
    upsert?: Enumerable<tbNFItensUpsertWithWhereUniqueWithoutTbMovItensInput>
    createMany?: tbNFItensCreateManyTbMovItensInputEnvelope
    set?: Enumerable<tbNFItensWhereUniqueInput>
    disconnect?: Enumerable<tbNFItensWhereUniqueInput>
    delete?: Enumerable<tbNFItensWhereUniqueInput>
    connect?: Enumerable<tbNFItensWhereUniqueInput>
    update?: Enumerable<tbNFItensUpdateWithWhereUniqueWithoutTbMovItensInput>
    updateMany?: Enumerable<tbNFItensUpdateManyWithWhereWithoutTbMovItensInput>
    deleteMany?: Enumerable<tbNFItensScalarWhereInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovItensInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovItensInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbMovItensInput>
    createMany?: tbEstoqueCreateManyTbMovItensInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbMovItensInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbMovItensInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbMovItensInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbMovItensInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbMovItensInput>
    upsert?: Enumerable<tbNFItensUpsertWithWhereUniqueWithoutTbMovItensInput>
    createMany?: tbNFItensCreateManyTbMovItensInputEnvelope
    set?: Enumerable<tbNFItensWhereUniqueInput>
    disconnect?: Enumerable<tbNFItensWhereUniqueInput>
    delete?: Enumerable<tbNFItensWhereUniqueInput>
    connect?: Enumerable<tbNFItensWhereUniqueInput>
    update?: Enumerable<tbNFItensUpdateWithWhereUniqueWithoutTbMovItensInput>
    updateMany?: Enumerable<tbNFItensUpdateManyWithWhereWithoutTbMovItensInput>
    deleteMany?: Enumerable<tbNFItensScalarWhereInput>
  }

  export type tbEstoqueCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovimentosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbEstoqueCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbMovimentosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbMovItensCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbFornecedoresCreateNestedOneWithoutTbMovimentosInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbMovimentosInput, tbFornecedoresUncheckedCreateWithoutTbMovimentosInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbMovimentosInput
    connect?: tbFornecedoresWhereUniqueInput
  }

  export type tbUsuariosCreateNestedOneWithoutTbMovimentosInput = {
    create?: XOR<tbUsuariosCreateWithoutTbMovimentosInput, tbUsuariosUncheckedCreateWithoutTbMovimentosInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbMovimentosInput
    connect?: tbUsuariosWhereUniqueInput
  }

  export type tbNFCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbMovimentosInput>, Enumerable<tbNFUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbNFCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovimentosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbEstoqueCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
  }

  export type tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbMovimentosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbMovItensCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbMovItensWhereUniqueInput>
  }

  export type tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbMovimentosInput>, Enumerable<tbNFUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbMovimentosInput>
    createMany?: tbNFCreateManyTbMovimentosInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type tbEstoqueUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovimentosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbEstoqueCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbMovimentosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbMovItensCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbMovimentosInput, tbFornecedoresUncheckedCreateWithoutTbMovimentosInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbMovimentosInput
    upsert?: tbFornecedoresUpsertWithoutTbMovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbFornecedoresWhereUniqueInput
    update?: XOR<tbFornecedoresUpdateWithoutTbMovimentosInput, tbFornecedoresUncheckedUpdateWithoutTbMovimentosInput>
  }

  export type tbUsuariosUpdateOneWithoutTbMovimentosNestedInput = {
    create?: XOR<tbUsuariosCreateWithoutTbMovimentosInput, tbUsuariosUncheckedCreateWithoutTbMovimentosInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbMovimentosInput
    upsert?: tbUsuariosUpsertWithoutTbMovimentosInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUsuariosWhereUniqueInput
    update?: XOR<tbUsuariosUpdateWithoutTbMovimentosInput, tbUsuariosUncheckedUpdateWithoutTbMovimentosInput>
  }

  export type tbNFUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbMovimentosInput>, Enumerable<tbNFUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbNFCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbEstoqueCreateWithoutTbMovimentosInput>, Enumerable<tbEstoqueUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbEstoqueCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbEstoqueUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbEstoqueCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbEstoqueWhereUniqueInput>
    disconnect?: Enumerable<tbEstoqueWhereUniqueInput>
    delete?: Enumerable<tbEstoqueWhereUniqueInput>
    connect?: Enumerable<tbEstoqueWhereUniqueInput>
    update?: Enumerable<tbEstoqueUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbEstoqueUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbEstoqueScalarWhereInput>
  }

  export type tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbMovItensCreateWithoutTbMovimentosInput>, Enumerable<tbMovItensUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbMovItensCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbMovItensUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbMovItensCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbMovItensWhereUniqueInput>
    disconnect?: Enumerable<tbMovItensWhereUniqueInput>
    delete?: Enumerable<tbMovItensWhereUniqueInput>
    connect?: Enumerable<tbMovItensWhereUniqueInput>
    update?: Enumerable<tbMovItensUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbMovItensUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbMovItensScalarWhereInput>
  }

  export type tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbMovimentosInput>, Enumerable<tbNFUncheckedCreateWithoutTbMovimentosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbMovimentosInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbMovimentosInput>
    createMany?: tbNFCreateManyTbMovimentosInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbMovimentosInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbMovimentosInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type tbMovimentosCreateNestedOneWithoutTbNFInput = {
    create?: XOR<tbMovimentosCreateWithoutTbNFInput, tbMovimentosUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbNFInput
    connect?: tbMovimentosWhereUniqueInput
  }

  export type tbFornecedoresCreateNestedOneWithoutTbNFInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbNFInput, tbFornecedoresUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbNFInput
    connect?: tbFornecedoresWhereUniqueInput
  }

  export type tbUsuariosCreateNestedOneWithoutTbNFInput = {
    create?: XOR<tbUsuariosCreateWithoutTbNFInput, tbUsuariosUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbNFInput
    connect?: tbUsuariosWhereUniqueInput
  }

  export type tbNFItensCreateNestedManyWithoutTbNFInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbNFInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbNFInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbNFInput>
    createMany?: tbNFItensCreateManyTbNFInputEnvelope
    connect?: Enumerable<tbNFItensWhereUniqueInput>
  }

  export type tbNFItensUncheckedCreateNestedManyWithoutTbNFInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbNFInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbNFInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbNFInput>
    createMany?: tbNFItensCreateManyTbNFInputEnvelope
    connect?: Enumerable<tbNFItensWhereUniqueInput>
  }

  export type tbMovimentosUpdateOneRequiredWithoutTbNFNestedInput = {
    create?: XOR<tbMovimentosCreateWithoutTbNFInput, tbMovimentosUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbMovimentosCreateOrConnectWithoutTbNFInput
    upsert?: tbMovimentosUpsertWithoutTbNFInput
    connect?: tbMovimentosWhereUniqueInput
    update?: XOR<tbMovimentosUpdateWithoutTbNFInput, tbMovimentosUncheckedUpdateWithoutTbNFInput>
  }

  export type tbFornecedoresUpdateOneWithoutTbNFNestedInput = {
    create?: XOR<tbFornecedoresCreateWithoutTbNFInput, tbFornecedoresUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbFornecedoresCreateOrConnectWithoutTbNFInput
    upsert?: tbFornecedoresUpsertWithoutTbNFInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbFornecedoresWhereUniqueInput
    update?: XOR<tbFornecedoresUpdateWithoutTbNFInput, tbFornecedoresUncheckedUpdateWithoutTbNFInput>
  }

  export type tbUsuariosUpdateOneWithoutTbNFNestedInput = {
    create?: XOR<tbUsuariosCreateWithoutTbNFInput, tbUsuariosUncheckedCreateWithoutTbNFInput>
    connectOrCreate?: tbUsuariosCreateOrConnectWithoutTbNFInput
    upsert?: tbUsuariosUpsertWithoutTbNFInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbUsuariosWhereUniqueInput
    update?: XOR<tbUsuariosUpdateWithoutTbNFInput, tbUsuariosUncheckedUpdateWithoutTbNFInput>
  }

  export type tbNFItensUpdateManyWithoutTbNFNestedInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbNFInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbNFInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbNFInput>
    upsert?: Enumerable<tbNFItensUpsertWithWhereUniqueWithoutTbNFInput>
    createMany?: tbNFItensCreateManyTbNFInputEnvelope
    set?: Enumerable<tbNFItensWhereUniqueInput>
    disconnect?: Enumerable<tbNFItensWhereUniqueInput>
    delete?: Enumerable<tbNFItensWhereUniqueInput>
    connect?: Enumerable<tbNFItensWhereUniqueInput>
    update?: Enumerable<tbNFItensUpdateWithWhereUniqueWithoutTbNFInput>
    updateMany?: Enumerable<tbNFItensUpdateManyWithWhereWithoutTbNFInput>
    deleteMany?: Enumerable<tbNFItensScalarWhereInput>
  }

  export type tbNFItensUncheckedUpdateManyWithoutTbNFNestedInput = {
    create?: XOR<Enumerable<tbNFItensCreateWithoutTbNFInput>, Enumerable<tbNFItensUncheckedCreateWithoutTbNFInput>>
    connectOrCreate?: Enumerable<tbNFItensCreateOrConnectWithoutTbNFInput>
    upsert?: Enumerable<tbNFItensUpsertWithWhereUniqueWithoutTbNFInput>
    createMany?: tbNFItensCreateManyTbNFInputEnvelope
    set?: Enumerable<tbNFItensWhereUniqueInput>
    disconnect?: Enumerable<tbNFItensWhereUniqueInput>
    delete?: Enumerable<tbNFItensWhereUniqueInput>
    connect?: Enumerable<tbNFItensWhereUniqueInput>
    update?: Enumerable<tbNFItensUpdateWithWhereUniqueWithoutTbNFInput>
    updateMany?: Enumerable<tbNFItensUpdateManyWithWhereWithoutTbNFInput>
    deleteMany?: Enumerable<tbNFItensScalarWhereInput>
  }

  export type tbMovItensCreateNestedOneWithoutTbNFItensInput = {
    create?: XOR<tbMovItensCreateWithoutTbNFItensInput, tbMovItensUncheckedCreateWithoutTbNFItensInput>
    connectOrCreate?: tbMovItensCreateOrConnectWithoutTbNFItensInput
    connect?: tbMovItensWhereUniqueInput
  }

  export type tbNFCreateNestedOneWithoutTbNFItensInput = {
    create?: XOR<tbNFCreateWithoutTbNFItensInput, tbNFUncheckedCreateWithoutTbNFItensInput>
    connectOrCreate?: tbNFCreateOrConnectWithoutTbNFItensInput
    connect?: tbNFWhereUniqueInput
  }

  export type tbMovItensUpdateOneRequiredWithoutTbNFItensNestedInput = {
    create?: XOR<tbMovItensCreateWithoutTbNFItensInput, tbMovItensUncheckedCreateWithoutTbNFItensInput>
    connectOrCreate?: tbMovItensCreateOrConnectWithoutTbNFItensInput
    upsert?: tbMovItensUpsertWithoutTbNFItensInput
    connect?: tbMovItensWhereUniqueInput
    update?: XOR<tbMovItensUpdateWithoutTbNFItensInput, tbMovItensUncheckedUpdateWithoutTbNFItensInput>
  }

  export type tbNFUpdateOneRequiredWithoutTbNFItensNestedInput = {
    create?: XOR<tbNFCreateWithoutTbNFItensInput, tbNFUncheckedCreateWithoutTbNFItensInput>
    connectOrCreate?: tbNFCreateOrConnectWithoutTbNFItensInput
    upsert?: tbNFUpsertWithoutTbNFItensInput
    connect?: tbNFWhereUniqueInput
    update?: XOR<tbNFUpdateWithoutTbNFItensInput, tbNFUncheckedUpdateWithoutTbNFItensInput>
  }

  export type tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    create?: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    create?: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput
    connect?: tbProdutosWhereUniqueInput
  }

  export type tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput
    upsert?: tbProdutosUpsertWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosNestedInput = {
    create?: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
    connectOrCreate?: tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput
    upsert?: tbProdutosUpsertWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput
    connect?: tbProdutosWhereUniqueInput
    update?: XOR<tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbMovimentosCreateNestedManyWithoutTbUsuariosInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbUsuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbUsuariosInput>
    createMany?: tbMovimentosCreateManyTbUsuariosInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNFCreateNestedManyWithoutTbUsuariosInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbUsuariosInput>, Enumerable<tbNFUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbUsuariosInput>
    createMany?: tbNFCreateManyTbUsuariosInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type tbMovimentosUncheckedCreateNestedManyWithoutTbUsuariosInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbUsuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbUsuariosInput>
    createMany?: tbMovimentosCreateManyTbUsuariosInputEnvelope
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
  }

  export type tbNFUncheckedCreateNestedManyWithoutTbUsuariosInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbUsuariosInput>, Enumerable<tbNFUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbUsuariosInput>
    createMany?: tbNFCreateManyTbUsuariosInputEnvelope
    connect?: Enumerable<tbNFWhereUniqueInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type tbMovimentosUpdateManyWithoutTbUsuariosNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbUsuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbUsuariosInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbUsuariosInput>
    createMany?: tbMovimentosCreateManyTbUsuariosInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbUsuariosInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbUsuariosInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNFUpdateManyWithoutTbUsuariosNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbUsuariosInput>, Enumerable<tbNFUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbUsuariosInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbUsuariosInput>
    createMany?: tbNFCreateManyTbUsuariosInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbUsuariosInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbUsuariosInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbUsuariosNestedInput = {
    create?: XOR<Enumerable<tbMovimentosCreateWithoutTbUsuariosInput>, Enumerable<tbMovimentosUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbMovimentosCreateOrConnectWithoutTbUsuariosInput>
    upsert?: Enumerable<tbMovimentosUpsertWithWhereUniqueWithoutTbUsuariosInput>
    createMany?: tbMovimentosCreateManyTbUsuariosInputEnvelope
    set?: Enumerable<tbMovimentosWhereUniqueInput>
    disconnect?: Enumerable<tbMovimentosWhereUniqueInput>
    delete?: Enumerable<tbMovimentosWhereUniqueInput>
    connect?: Enumerable<tbMovimentosWhereUniqueInput>
    update?: Enumerable<tbMovimentosUpdateWithWhereUniqueWithoutTbUsuariosInput>
    updateMany?: Enumerable<tbMovimentosUpdateManyWithWhereWithoutTbUsuariosInput>
    deleteMany?: Enumerable<tbMovimentosScalarWhereInput>
  }

  export type tbNFUncheckedUpdateManyWithoutTbUsuariosNestedInput = {
    create?: XOR<Enumerable<tbNFCreateWithoutTbUsuariosInput>, Enumerable<tbNFUncheckedCreateWithoutTbUsuariosInput>>
    connectOrCreate?: Enumerable<tbNFCreateOrConnectWithoutTbUsuariosInput>
    upsert?: Enumerable<tbNFUpsertWithWhereUniqueWithoutTbUsuariosInput>
    createMany?: tbNFCreateManyTbUsuariosInputEnvelope
    set?: Enumerable<tbNFWhereUniqueInput>
    disconnect?: Enumerable<tbNFWhereUniqueInput>
    delete?: Enumerable<tbNFWhereUniqueInput>
    connect?: Enumerable<tbNFWhereUniqueInput>
    update?: Enumerable<tbNFUpdateWithWhereUniqueWithoutTbUsuariosInput>
    updateMany?: Enumerable<tbNFUpdateManyWithWhereWithoutTbUsuariosInput>
    deleteMany?: Enumerable<tbNFScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type tbMovimentosCreateWithoutTbFornecedoresInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbMovimentosInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbMovimentosInput
    tbNF?: tbNFCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbFornecedoresInput = {
    idmovimento?: number
    tipmov?: string | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbFornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbFornecedoresInput, tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>
  }

  export type tbMovimentosCreateManyTbFornecedoresInputEnvelope = {
    data: Enumerable<tbMovimentosCreateManyTbFornecedoresInput>
    skipDuplicates?: boolean
  }

  export type tbNFCreateWithoutTbFornecedoresInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbNFInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbNFInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbNFInput
  }

  export type tbNFUncheckedCreateWithoutTbFornecedoresInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbNFInput
  }

  export type tbNFCreateOrConnectWithoutTbFornecedoresInput = {
    where: tbNFWhereUniqueInput
    create: XOR<tbNFCreateWithoutTbFornecedoresInput, tbNFUncheckedCreateWithoutTbFornecedoresInput>
  }

  export type tbNFCreateManyTbFornecedoresInputEnvelope = {
    data: Enumerable<tbNFCreateManyTbFornecedoresInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithWhereUniqueWithoutTbFornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    update: XOR<tbMovimentosUpdateWithoutTbFornecedoresInput, tbMovimentosUncheckedUpdateWithoutTbFornecedoresInput>
    create: XOR<tbMovimentosCreateWithoutTbFornecedoresInput, tbMovimentosUncheckedCreateWithoutTbFornecedoresInput>
  }

  export type tbMovimentosUpdateWithWhereUniqueWithoutTbFornecedoresInput = {
    where: tbMovimentosWhereUniqueInput
    data: XOR<tbMovimentosUpdateWithoutTbFornecedoresInput, tbMovimentosUncheckedUpdateWithoutTbFornecedoresInput>
  }

  export type tbMovimentosUpdateManyWithWhereWithoutTbFornecedoresInput = {
    where: tbMovimentosScalarWhereInput
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyWithoutTbMovimentosInput>
  }

  export type tbMovimentosScalarWhereInput = {
    AND?: Enumerable<tbMovimentosScalarWhereInput>
    OR?: Enumerable<tbMovimentosScalarWhereInput>
    NOT?: Enumerable<tbMovimentosScalarWhereInput>
    idmovimento?: IntFilter | number
    tipmov?: StringNullableFilter | string | null
    idfor?: IntNullableFilter | number | null
    idusuario_alteracao?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
  }

  export type tbNFUpsertWithWhereUniqueWithoutTbFornecedoresInput = {
    where: tbNFWhereUniqueInput
    update: XOR<tbNFUpdateWithoutTbFornecedoresInput, tbNFUncheckedUpdateWithoutTbFornecedoresInput>
    create: XOR<tbNFCreateWithoutTbFornecedoresInput, tbNFUncheckedCreateWithoutTbFornecedoresInput>
  }

  export type tbNFUpdateWithWhereUniqueWithoutTbFornecedoresInput = {
    where: tbNFWhereUniqueInput
    data: XOR<tbNFUpdateWithoutTbFornecedoresInput, tbNFUncheckedUpdateWithoutTbFornecedoresInput>
  }

  export type tbNFUpdateManyWithWhereWithoutTbFornecedoresInput = {
    where: tbNFScalarWhereInput
    data: XOR<tbNFUpdateManyMutationInput, tbNFUncheckedUpdateManyWithoutTbNFInput>
  }

  export type tbNFScalarWhereInput = {
    AND?: Enumerable<tbNFScalarWhereInput>
    OR?: Enumerable<tbNFScalarWhereInput>
    NOT?: Enumerable<tbNFScalarWhereInput>
    idnf?: IntFilter | number
    numnf?: IntNullableFilter | number | null
    idmovimento?: IntFilter | number
    serienf?: IntNullableFilter | number | null
    idfor?: IntNullableFilter | number | null
    idusuario_inclusao?: IntNullableFilter | number | null
    dtemissao?: DateTimeNullableFilter | Date | string | null
    vlrtotal?: FloatNullableFilter | number | null
  }

  export type tbEstoqueCreateWithoutTbProdutosInput = {
    idestoque?: number
    quantidade?: number | null
    dtinc?: Date | string | null
    tbLocais?: tbLocaisCreateNestedOneWithoutTbEstoqueInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbEstoqueInput
    tbMovItens?: tbMovItensCreateNestedOneWithoutTbEstoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTbProdutosInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idlocal?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTbProdutosInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTbProdutosInput, tbEstoqueUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbEstoqueCreateManyTbProdutosInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTbProdutosInput>
    skipDuplicates?: boolean
  }

  export type tbMovItensCreateWithoutTbProdutosInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovItensInput
    tbLocais?: tbLocaisCreateNestedOneWithoutTbMovItensInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbMovItensInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateWithoutTbProdutosInput = {
    idmovimento: number
    seqitem?: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensCreateOrConnectWithoutTbProdutosInput = {
    where: tbMovItensWhereUniqueInput
    create: XOR<tbMovItensCreateWithoutTbProdutosInput, tbMovItensUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbMovItensCreateManyTbProdutosInputEnvelope = {
    data: Enumerable<tbMovItensCreateManyTbProdutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: number
    quantidade?: number | null
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos: tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: number
    idprodutocomp: number
    quantidade?: number | null
  }

  export type tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    create: XOR<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput, tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInputEnvelope = {
    data: Enumerable<tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: number
    quantidade?: number | null
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos: tbProdutosCreateNestedOneWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput
  }

  export type tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: number
    idproduto: number
    quantidade?: number | null
  }

  export type tbProdComposicaoCreateOrConnectWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    create: XOR<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInputEnvelope = {
    data: Enumerable<tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    skipDuplicates?: boolean
  }

  export type tbTiposProdutosCreateWithoutTbProdutosInput = {
    nometipprod?: string | null
  }

  export type tbTiposProdutosUncheckedCreateWithoutTbProdutosInput = {
    idtipprod?: number
    nometipprod?: string | null
  }

  export type tbTiposProdutosCreateOrConnectWithoutTbProdutosInput = {
    where: tbTiposProdutosWhereUniqueInput
    create: XOR<tbTiposProdutosCreateWithoutTbProdutosInput, tbTiposProdutosUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbUnidadeMedidaCreateWithoutTbProdutosInput = {
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidadeMedidaUncheckedCreateWithoutTbProdutosInput = {
    idunidade?: number
    siglaun?: string | null
    nomeunidade?: string | null
  }

  export type tbUnidadeMedidaCreateOrConnectWithoutTbProdutosInput = {
    where: tbUnidadeMedidaWhereUniqueInput
    create: XOR<tbUnidadeMedidaCreateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTbProdutosInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTbProdutosInput, tbEstoqueUncheckedUpdateWithoutTbProdutosInput>
    create: XOR<tbEstoqueCreateWithoutTbProdutosInput, tbEstoqueUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTbProdutosInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTbProdutosInput, tbEstoqueUncheckedUpdateWithoutTbProdutosInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTbProdutosInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbEstoqueInput>
  }

  export type tbEstoqueScalarWhereInput = {
    AND?: Enumerable<tbEstoqueScalarWhereInput>
    OR?: Enumerable<tbEstoqueScalarWhereInput>
    NOT?: Enumerable<tbEstoqueScalarWhereInput>
    idestoque?: IntFilter | number
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    idproduto?: IntNullableFilter | number | null
    quantidade?: FloatNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
  }

  export type tbMovItensUpsertWithWhereUniqueWithoutTbProdutosInput = {
    where: tbMovItensWhereUniqueInput
    update: XOR<tbMovItensUpdateWithoutTbProdutosInput, tbMovItensUncheckedUpdateWithoutTbProdutosInput>
    create: XOR<tbMovItensCreateWithoutTbProdutosInput, tbMovItensUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbMovItensUpdateWithWhereUniqueWithoutTbProdutosInput = {
    where: tbMovItensWhereUniqueInput
    data: XOR<tbMovItensUpdateWithoutTbProdutosInput, tbMovItensUncheckedUpdateWithoutTbProdutosInput>
  }

  export type tbMovItensUpdateManyWithWhereWithoutTbProdutosInput = {
    where: tbMovItensScalarWhereInput
    data: XOR<tbMovItensUpdateManyMutationInput, tbMovItensUncheckedUpdateManyWithoutTbMovItensInput>
  }

  export type tbMovItensScalarWhereInput = {
    AND?: Enumerable<tbMovItensScalarWhereInput>
    OR?: Enumerable<tbMovItensScalarWhereInput>
    NOT?: Enumerable<tbMovItensScalarWhereInput>
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    idlocal?: IntNullableFilter | number | null
    dtinc?: DateTimeNullableFilter | Date | string | null
    quantidade?: FloatNullableFilter | number | null
  }

  export type tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    update: XOR<tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput, tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
    create: XOR<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput, tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    data: XOR<tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput, tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    where: tbProdComposicaoScalarWhereInput
    data: XOR<tbProdComposicaoUpdateManyMutationInput, tbProdComposicaoUncheckedUpdateManyWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdComposicaoScalarWhereInput = {
    AND?: Enumerable<tbProdComposicaoScalarWhereInput>
    OR?: Enumerable<tbProdComposicaoScalarWhereInput>
    NOT?: Enumerable<tbProdComposicaoScalarWhereInput>
    idcomp?: IntFilter | number
    idproduto?: IntFilter | number
    idprodutocomp?: IntFilter | number
    quantidade?: FloatNullableFilter | number | null
  }

  export type tbProdComposicaoUpsertWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    update: XOR<tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
    create: XOR<tbProdComposicaoCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdComposicaoUncheckedCreateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbProdComposicaoUpdateWithWhereUniqueWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    where: tbProdComposicaoWhereUniqueInput
    data: XOR<tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbProdComposicaoUpdateManyWithWhereWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    where: tbProdComposicaoScalarWhereInput
    data: XOR<tbProdComposicaoUpdateManyMutationInput, tbProdComposicaoUncheckedUpdateManyWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbTiposProdutosUpsertWithoutTbProdutosInput = {
    update: XOR<tbTiposProdutosUpdateWithoutTbProdutosInput, tbTiposProdutosUncheckedUpdateWithoutTbProdutosInput>
    create: XOR<tbTiposProdutosCreateWithoutTbProdutosInput, tbTiposProdutosUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbTiposProdutosUpdateWithoutTbProdutosInput = {
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbTiposProdutosUncheckedUpdateWithoutTbProdutosInput = {
    idtipprod?: IntFieldUpdateOperationsInput | number
    nometipprod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidadeMedidaUpsertWithoutTbProdutosInput = {
    update: XOR<tbUnidadeMedidaUpdateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedUpdateWithoutTbProdutosInput>
    create: XOR<tbUnidadeMedidaCreateWithoutTbProdutosInput, tbUnidadeMedidaUncheckedCreateWithoutTbProdutosInput>
  }

  export type tbUnidadeMedidaUpdateWithoutTbProdutosInput = {
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbUnidadeMedidaUncheckedUpdateWithoutTbProdutosInput = {
    idunidade?: IntFieldUpdateOperationsInput | number
    siglaun?: NullableStringFieldUpdateOperationsInput | string | null
    nomeunidade?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbProdutosCreateWithoutTbTiposProdutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbTiposProdutosInput = {
    idproduto?: number
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbTiposProdutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbTiposProdutosInput, tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>
  }

  export type tbProdutosCreateManyTbTiposProdutosInputEnvelope = {
    data: Enumerable<tbProdutosCreateManyTbTiposProdutosInput>
    skipDuplicates?: boolean
  }

  export type tbProdutosUpsertWithWhereUniqueWithoutTbTiposProdutosInput = {
    where: tbProdutosWhereUniqueInput
    update: XOR<tbProdutosUpdateWithoutTbTiposProdutosInput, tbProdutosUncheckedUpdateWithoutTbTiposProdutosInput>
    create: XOR<tbProdutosCreateWithoutTbTiposProdutosInput, tbProdutosUncheckedCreateWithoutTbTiposProdutosInput>
  }

  export type tbProdutosUpdateWithWhereUniqueWithoutTbTiposProdutosInput = {
    where: tbProdutosWhereUniqueInput
    data: XOR<tbProdutosUpdateWithoutTbTiposProdutosInput, tbProdutosUncheckedUpdateWithoutTbTiposProdutosInput>
  }

  export type tbProdutosUpdateManyWithWhereWithoutTbTiposProdutosInput = {
    where: tbProdutosScalarWhereInput
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyWithoutTbProdutosInput>
  }

  export type tbProdutosScalarWhereInput = {
    AND?: Enumerable<tbProdutosScalarWhereInput>
    OR?: Enumerable<tbProdutosScalarWhereInput>
    NOT?: Enumerable<tbProdutosScalarWhereInput>
    idproduto?: IntFilter | number
    idtipprod?: IntNullableFilter | number | null
    idunidade?: IntNullableFilter | number | null
    nomeprod?: StringNullableFilter | string | null
    quantminima?: IntNullableFilter | number | null
  }

  export type tbProdutosCreateWithoutTbUnidadeMedidaInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput = {
    idproduto?: number
    idtipprod?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbUnidadeMedidaInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbUnidadeMedidaInput, tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>
  }

  export type tbProdutosCreateManyTbUnidadeMedidaInputEnvelope = {
    data: Enumerable<tbProdutosCreateManyTbUnidadeMedidaInput>
    skipDuplicates?: boolean
  }

  export type tbProdutosUpsertWithWhereUniqueWithoutTbUnidadeMedidaInput = {
    where: tbProdutosWhereUniqueInput
    update: XOR<tbProdutosUpdateWithoutTbUnidadeMedidaInput, tbProdutosUncheckedUpdateWithoutTbUnidadeMedidaInput>
    create: XOR<tbProdutosCreateWithoutTbUnidadeMedidaInput, tbProdutosUncheckedCreateWithoutTbUnidadeMedidaInput>
  }

  export type tbProdutosUpdateWithWhereUniqueWithoutTbUnidadeMedidaInput = {
    where: tbProdutosWhereUniqueInput
    data: XOR<tbProdutosUpdateWithoutTbUnidadeMedidaInput, tbProdutosUncheckedUpdateWithoutTbUnidadeMedidaInput>
  }

  export type tbProdutosUpdateManyWithWhereWithoutTbUnidadeMedidaInput = {
    where: tbProdutosScalarWhereInput
    data: XOR<tbProdutosUpdateManyMutationInput, tbProdutosUncheckedUpdateManyWithoutTbProdutosInput>
  }

  export type tbLocaisCreateWithoutTbEstoqueInput = {
    nomelocal?: string | null
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisUncheckedCreateWithoutTbEstoqueInput = {
    idlocal?: number
    nomelocal?: string | null
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisCreateOrConnectWithoutTbEstoqueInput = {
    where: tbLocaisWhereUniqueInput
    create: XOR<tbLocaisCreateWithoutTbEstoqueInput, tbLocaisUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbMovimentosCreateWithoutTbEstoqueInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbMovimentosInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbMovimentosInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbMovimentosInput
    tbNF?: tbNFCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbEstoqueInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbEstoqueInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbEstoqueInput, tbMovimentosUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbProdutosCreateWithoutTbEstoqueInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbEstoqueInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbEstoqueInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbEstoqueInput, tbProdutosUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbMovItensCreateWithoutTbEstoqueInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbLocais?: tbLocaisCreateNestedOneWithoutTbMovItensInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbMovItensInput
    tbProdutos: tbProdutosCreateNestedOneWithoutTbMovItensInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateWithoutTbEstoqueInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensCreateOrConnectWithoutTbEstoqueInput = {
    where: tbMovItensWhereUniqueInput
    create: XOR<tbMovItensCreateWithoutTbEstoqueInput, tbMovItensUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbLocaisUpsertWithoutTbEstoqueInput = {
    update: XOR<tbLocaisUpdateWithoutTbEstoqueInput, tbLocaisUncheckedUpdateWithoutTbEstoqueInput>
    create: XOR<tbLocaisCreateWithoutTbEstoqueInput, tbLocaisUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbLocaisUpdateWithoutTbEstoqueInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovItens?: tbMovItensUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateWithoutTbEstoqueInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbMovimentosUpsertWithoutTbEstoqueInput = {
    update: XOR<tbMovimentosUpdateWithoutTbEstoqueInput, tbMovimentosUncheckedUpdateWithoutTbEstoqueInput>
    create: XOR<tbMovimentosCreateWithoutTbEstoqueInput, tbMovimentosUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbMovimentosUpdateWithoutTbEstoqueInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbMovItens?: tbMovItensUpdateManyWithoutTbMovimentosNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbMovimentosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbEstoqueInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbProdutosUpsertWithoutTbEstoqueInput = {
    update: XOR<tbProdutosUpdateWithoutTbEstoqueInput, tbProdutosUncheckedUpdateWithoutTbEstoqueInput>
    create: XOR<tbProdutosCreateWithoutTbEstoqueInput, tbProdutosUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbProdutosUpdateWithoutTbEstoqueInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbEstoqueInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbMovItensUpsertWithoutTbEstoqueInput = {
    update: XOR<tbMovItensUpdateWithoutTbEstoqueInput, tbMovItensUncheckedUpdateWithoutTbEstoqueInput>
    create: XOR<tbMovItensCreateWithoutTbEstoqueInput, tbMovItensUncheckedCreateWithoutTbEstoqueInput>
  }

  export type tbMovItensUpdateWithoutTbEstoqueInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbLocais?: tbLocaisUpdateOneWithoutTbMovItensNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbProdutos?: tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateWithoutTbEstoqueInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbEstoqueCreateWithoutTbLocaisInput = {
    idestoque?: number
    quantidade?: number | null
    dtinc?: Date | string | null
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbEstoqueInput
    tbProdutos?: tbProdutosCreateNestedOneWithoutTbEstoqueInput
    tbMovItens?: tbMovItensCreateNestedOneWithoutTbEstoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTbLocaisInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTbLocaisInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTbLocaisInput, tbEstoqueUncheckedCreateWithoutTbLocaisInput>
  }

  export type tbEstoqueCreateManyTbLocaisInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTbLocaisInput>
    skipDuplicates?: boolean
  }

  export type tbMovItensCreateWithoutTbLocaisInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovItensInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbMovItensInput
    tbProdutos: tbProdutosCreateNestedOneWithoutTbMovItensInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateWithoutTbLocaisInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensCreateOrConnectWithoutTbLocaisInput = {
    where: tbMovItensWhereUniqueInput
    create: XOR<tbMovItensCreateWithoutTbLocaisInput, tbMovItensUncheckedCreateWithoutTbLocaisInput>
  }

  export type tbMovItensCreateManyTbLocaisInputEnvelope = {
    data: Enumerable<tbMovItensCreateManyTbLocaisInput>
    skipDuplicates?: boolean
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTbLocaisInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTbLocaisInput, tbEstoqueUncheckedUpdateWithoutTbLocaisInput>
    create: XOR<tbEstoqueCreateWithoutTbLocaisInput, tbEstoqueUncheckedCreateWithoutTbLocaisInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTbLocaisInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTbLocaisInput, tbEstoqueUncheckedUpdateWithoutTbLocaisInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTbLocaisInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbEstoqueInput>
  }

  export type tbMovItensUpsertWithWhereUniqueWithoutTbLocaisInput = {
    where: tbMovItensWhereUniqueInput
    update: XOR<tbMovItensUpdateWithoutTbLocaisInput, tbMovItensUncheckedUpdateWithoutTbLocaisInput>
    create: XOR<tbMovItensCreateWithoutTbLocaisInput, tbMovItensUncheckedCreateWithoutTbLocaisInput>
  }

  export type tbMovItensUpdateWithWhereUniqueWithoutTbLocaisInput = {
    where: tbMovItensWhereUniqueInput
    data: XOR<tbMovItensUpdateWithoutTbLocaisInput, tbMovItensUncheckedUpdateWithoutTbLocaisInput>
  }

  export type tbMovItensUpdateManyWithWhereWithoutTbLocaisInput = {
    where: tbMovItensScalarWhereInput
    data: XOR<tbMovItensUpdateManyMutationInput, tbMovItensUncheckedUpdateManyWithoutTbMovItensInput>
  }

  export type tbEstoqueCreateWithoutTbMovItensInput = {
    idestoque?: number
    quantidade?: number | null
    dtinc?: Date | string | null
    tbLocais?: tbLocaisCreateNestedOneWithoutTbEstoqueInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbEstoqueInput
    tbProdutos?: tbProdutosCreateNestedOneWithoutTbEstoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTbMovItensInput = {
    idestoque?: number
    idlocal?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTbMovItensInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTbMovItensInput, tbEstoqueUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbEstoqueCreateManyTbMovItensInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTbMovItensInput>
    skipDuplicates?: boolean
  }

  export type tbLocaisCreateWithoutTbMovItensInput = {
    nomelocal?: string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisUncheckedCreateWithoutTbMovItensInput = {
    idlocal?: number
    nomelocal?: string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbLocaisInput
  }

  export type tbLocaisCreateOrConnectWithoutTbMovItensInput = {
    where: tbLocaisWhereUniqueInput
    create: XOR<tbLocaisCreateWithoutTbMovItensInput, tbLocaisUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbMovimentosCreateWithoutTbMovItensInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovimentosInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbMovimentosInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbMovimentosInput
    tbNF?: tbNFCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbMovItensInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbMovItensInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbMovItensInput, tbMovimentosUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbProdutosCreateWithoutTbMovItensInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbMovItensInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbMovItensInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbMovItensInput, tbProdutosUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbNFItensCreateWithoutTbMovItensInput = {
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
    tbNF: tbNFCreateNestedOneWithoutTbNFItensInput
  }

  export type tbNFItensUncheckedCreateWithoutTbMovItensInput = {
    idnf: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbNFItensCreateOrConnectWithoutTbMovItensInput = {
    where: tbNFItensWhereUniqueInput
    create: XOR<tbNFItensCreateWithoutTbMovItensInput, tbNFItensUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbNFItensCreateManyTbMovItensInputEnvelope = {
    data: Enumerable<tbNFItensCreateManyTbMovItensInput>
    skipDuplicates?: boolean
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTbMovItensInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTbMovItensInput, tbEstoqueUncheckedUpdateWithoutTbMovItensInput>
    create: XOR<tbEstoqueCreateWithoutTbMovItensInput, tbEstoqueUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTbMovItensInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTbMovItensInput, tbEstoqueUncheckedUpdateWithoutTbMovItensInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTbMovItensInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbEstoqueInput>
  }

  export type tbLocaisUpsertWithoutTbMovItensInput = {
    update: XOR<tbLocaisUpdateWithoutTbMovItensInput, tbLocaisUncheckedUpdateWithoutTbMovItensInput>
    create: XOR<tbLocaisCreateWithoutTbMovItensInput, tbLocaisUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbLocaisUpdateWithoutTbMovItensInput = {
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbLocaisUncheckedUpdateWithoutTbMovItensInput = {
    idlocal?: IntFieldUpdateOperationsInput | number
    nomelocal?: NullableStringFieldUpdateOperationsInput | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbLocaisNestedInput
  }

  export type tbMovimentosUpsertWithoutTbMovItensInput = {
    update: XOR<tbMovimentosUpdateWithoutTbMovItensInput, tbMovimentosUncheckedUpdateWithoutTbMovItensInput>
    create: XOR<tbMovimentosCreateWithoutTbMovItensInput, tbMovimentosUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbMovimentosUpdateWithoutTbMovItensInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovimentosNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbMovimentosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbMovItensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbProdutosUpsertWithoutTbMovItensInput = {
    update: XOR<tbProdutosUpdateWithoutTbMovItensInput, tbProdutosUncheckedUpdateWithoutTbMovItensInput>
    create: XOR<tbProdutosCreateWithoutTbMovItensInput, tbProdutosUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbProdutosUpdateWithoutTbMovItensInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbMovItensInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbNFItensUpsertWithWhereUniqueWithoutTbMovItensInput = {
    where: tbNFItensWhereUniqueInput
    update: XOR<tbNFItensUpdateWithoutTbMovItensInput, tbNFItensUncheckedUpdateWithoutTbMovItensInput>
    create: XOR<tbNFItensCreateWithoutTbMovItensInput, tbNFItensUncheckedCreateWithoutTbMovItensInput>
  }

  export type tbNFItensUpdateWithWhereUniqueWithoutTbMovItensInput = {
    where: tbNFItensWhereUniqueInput
    data: XOR<tbNFItensUpdateWithoutTbMovItensInput, tbNFItensUncheckedUpdateWithoutTbMovItensInput>
  }

  export type tbNFItensUpdateManyWithWhereWithoutTbMovItensInput = {
    where: tbNFItensScalarWhereInput
    data: XOR<tbNFItensUpdateManyMutationInput, tbNFItensUncheckedUpdateManyWithoutTbNFItensInput>
  }

  export type tbNFItensScalarWhereInput = {
    AND?: Enumerable<tbNFItensScalarWhereInput>
    OR?: Enumerable<tbNFItensScalarWhereInput>
    NOT?: Enumerable<tbNFItensScalarWhereInput>
    idnf?: IntFilter | number
    idmovimento?: IntFilter | number
    seqitem?: IntFilter | number
    idproduto?: IntFilter | number
    vlrunitario?: FloatNullableFilter | number | null
    quantidade?: FloatNullableFilter | number | null
    vlrtotitem?: FloatNullableFilter | number | null
  }

  export type tbEstoqueCreateWithoutTbMovimentosInput = {
    idestoque?: number
    quantidade?: number | null
    dtinc?: Date | string | null
    tbLocais?: tbLocaisCreateNestedOneWithoutTbEstoqueInput
    tbProdutos?: tbProdutosCreateNestedOneWithoutTbEstoqueInput
    tbMovItens?: tbMovItensCreateNestedOneWithoutTbEstoqueInput
  }

  export type tbEstoqueUncheckedCreateWithoutTbMovimentosInput = {
    idestoque?: number
    seqitem: number
    idlocal?: number | null
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbEstoqueCreateOrConnectWithoutTbMovimentosInput = {
    where: tbEstoqueWhereUniqueInput
    create: XOR<tbEstoqueCreateWithoutTbMovimentosInput, tbEstoqueUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbEstoqueCreateManyTbMovimentosInputEnvelope = {
    data: Enumerable<tbEstoqueCreateManyTbMovimentosInput>
    skipDuplicates?: boolean
  }

  export type tbMovItensCreateWithoutTbMovimentosInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovItensInput
    tbLocais?: tbLocaisCreateNestedOneWithoutTbMovItensInput
    tbProdutos: tbProdutosCreateNestedOneWithoutTbMovItensInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateWithoutTbMovimentosInput = {
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensCreateOrConnectWithoutTbMovimentosInput = {
    where: tbMovItensWhereUniqueInput
    create: XOR<tbMovItensCreateWithoutTbMovimentosInput, tbMovItensUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbMovItensCreateManyTbMovimentosInputEnvelope = {
    data: Enumerable<tbMovItensCreateManyTbMovimentosInput>
    skipDuplicates?: boolean
  }

  export type tbFornecedoresCreateWithoutTbMovimentosInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbNF?: tbNFCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateWithoutTbMovimentosInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresCreateOrConnectWithoutTbMovimentosInput = {
    where: tbFornecedoresWhereUniqueInput
    create: XOR<tbFornecedoresCreateWithoutTbMovimentosInput, tbFornecedoresUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbUsuariosCreateWithoutTbMovimentosInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbNF?: tbNFCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosUncheckedCreateWithoutTbMovimentosInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosCreateOrConnectWithoutTbMovimentosInput = {
    where: tbUsuariosWhereUniqueInput
    create: XOR<tbUsuariosCreateWithoutTbMovimentosInput, tbUsuariosUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbNFCreateWithoutTbMovimentosInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbNFInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbNFInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbNFInput
  }

  export type tbNFUncheckedCreateWithoutTbMovimentosInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbNFInput
  }

  export type tbNFCreateOrConnectWithoutTbMovimentosInput = {
    where: tbNFWhereUniqueInput
    create: XOR<tbNFCreateWithoutTbMovimentosInput, tbNFUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbNFCreateManyTbMovimentosInputEnvelope = {
    data: Enumerable<tbNFCreateManyTbMovimentosInput>
    skipDuplicates?: boolean
  }

  export type tbEstoqueUpsertWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbEstoqueWhereUniqueInput
    update: XOR<tbEstoqueUpdateWithoutTbMovimentosInput, tbEstoqueUncheckedUpdateWithoutTbMovimentosInput>
    create: XOR<tbEstoqueCreateWithoutTbMovimentosInput, tbEstoqueUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbEstoqueUpdateWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbEstoqueWhereUniqueInput
    data: XOR<tbEstoqueUpdateWithoutTbMovimentosInput, tbEstoqueUncheckedUpdateWithoutTbMovimentosInput>
  }

  export type tbEstoqueUpdateManyWithWhereWithoutTbMovimentosInput = {
    where: tbEstoqueScalarWhereInput
    data: XOR<tbEstoqueUpdateManyMutationInput, tbEstoqueUncheckedUpdateManyWithoutTbEstoqueInput>
  }

  export type tbMovItensUpsertWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbMovItensWhereUniqueInput
    update: XOR<tbMovItensUpdateWithoutTbMovimentosInput, tbMovItensUncheckedUpdateWithoutTbMovimentosInput>
    create: XOR<tbMovItensCreateWithoutTbMovimentosInput, tbMovItensUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbMovItensUpdateWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbMovItensWhereUniqueInput
    data: XOR<tbMovItensUpdateWithoutTbMovimentosInput, tbMovItensUncheckedUpdateWithoutTbMovimentosInput>
  }

  export type tbMovItensUpdateManyWithWhereWithoutTbMovimentosInput = {
    where: tbMovItensScalarWhereInput
    data: XOR<tbMovItensUpdateManyMutationInput, tbMovItensUncheckedUpdateManyWithoutTbMovItensInput>
  }

  export type tbFornecedoresUpsertWithoutTbMovimentosInput = {
    update: XOR<tbFornecedoresUpdateWithoutTbMovimentosInput, tbFornecedoresUncheckedUpdateWithoutTbMovimentosInput>
    create: XOR<tbFornecedoresCreateWithoutTbMovimentosInput, tbFornecedoresUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbFornecedoresUpdateWithoutTbMovimentosInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbNF?: tbNFUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateWithoutTbMovimentosInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbNF?: tbNFUncheckedUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbUsuariosUpsertWithoutTbMovimentosInput = {
    update: XOR<tbUsuariosUpdateWithoutTbMovimentosInput, tbUsuariosUncheckedUpdateWithoutTbMovimentosInput>
    create: XOR<tbUsuariosCreateWithoutTbMovimentosInput, tbUsuariosUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbUsuariosUpdateWithoutTbMovimentosInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbNF?: tbNFUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateWithoutTbMovimentosInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbNF?: tbNFUncheckedUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbNFUpsertWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbNFWhereUniqueInput
    update: XOR<tbNFUpdateWithoutTbMovimentosInput, tbNFUncheckedUpdateWithoutTbMovimentosInput>
    create: XOR<tbNFCreateWithoutTbMovimentosInput, tbNFUncheckedCreateWithoutTbMovimentosInput>
  }

  export type tbNFUpdateWithWhereUniqueWithoutTbMovimentosInput = {
    where: tbNFWhereUniqueInput
    data: XOR<tbNFUpdateWithoutTbMovimentosInput, tbNFUncheckedUpdateWithoutTbMovimentosInput>
  }

  export type tbNFUpdateManyWithWhereWithoutTbMovimentosInput = {
    where: tbNFScalarWhereInput
    data: XOR<tbNFUpdateManyMutationInput, tbNFUncheckedUpdateManyWithoutTbNFInput>
  }

  export type tbMovimentosCreateWithoutTbNFInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbMovimentosInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbMovimentosInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbNFInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbNFInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbNFInput, tbMovimentosUncheckedCreateWithoutTbNFInput>
  }

  export type tbFornecedoresCreateWithoutTbNFInput = {
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbMovimentos?: tbMovimentosCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresUncheckedCreateWithoutTbNFInput = {
    idfor?: number
    nomefor?: string | null
    fisjur?: string | null
    cnpjcpf?: string | null
    telefone?: string | null
    cep?: string | null
    cidade?: string | null
    rua?: string | null
    bairro?: string | null
    numero?: number | null
    complemento?: string | null
    email?: string | null
    tbMovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbFornecedoresInput
  }

  export type tbFornecedoresCreateOrConnectWithoutTbNFInput = {
    where: tbFornecedoresWhereUniqueInput
    create: XOR<tbFornecedoresCreateWithoutTbNFInput, tbFornecedoresUncheckedCreateWithoutTbNFInput>
  }

  export type tbUsuariosCreateWithoutTbNFInput = {
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbMovimentos?: tbMovimentosCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosUncheckedCreateWithoutTbNFInput = {
    idusuario?: number
    usu_login?: string | null
    nome?: string | null
    senha?: string | null
    dtcriacao?: Date | string | null
    usu_admin?: boolean | null
    tbMovimentos?: tbMovimentosUncheckedCreateNestedManyWithoutTbUsuariosInput
  }

  export type tbUsuariosCreateOrConnectWithoutTbNFInput = {
    where: tbUsuariosWhereUniqueInput
    create: XOR<tbUsuariosCreateWithoutTbNFInput, tbUsuariosUncheckedCreateWithoutTbNFInput>
  }

  export type tbNFItensCreateWithoutTbNFInput = {
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
    tbMovItens: tbMovItensCreateNestedOneWithoutTbNFItensInput
  }

  export type tbNFItensUncheckedCreateWithoutTbNFInput = {
    seqitem: number
    idproduto: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbNFItensCreateOrConnectWithoutTbNFInput = {
    where: tbNFItensWhereUniqueInput
    create: XOR<tbNFItensCreateWithoutTbNFInput, tbNFItensUncheckedCreateWithoutTbNFInput>
  }

  export type tbNFItensCreateManyTbNFInputEnvelope = {
    data: Enumerable<tbNFItensCreateManyTbNFInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithoutTbNFInput = {
    update: XOR<tbMovimentosUpdateWithoutTbNFInput, tbMovimentosUncheckedUpdateWithoutTbNFInput>
    create: XOR<tbMovimentosCreateWithoutTbNFInput, tbMovimentosUncheckedCreateWithoutTbNFInput>
  }

  export type tbMovimentosUpdateWithoutTbNFInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbMovimentosNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbNFInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbFornecedoresUpsertWithoutTbNFInput = {
    update: XOR<tbFornecedoresUpdateWithoutTbNFInput, tbFornecedoresUncheckedUpdateWithoutTbNFInput>
    create: XOR<tbFornecedoresCreateWithoutTbNFInput, tbFornecedoresUncheckedCreateWithoutTbNFInput>
  }

  export type tbFornecedoresUpdateWithoutTbNFInput = {
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovimentos?: tbMovimentosUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbFornecedoresUncheckedUpdateWithoutTbNFInput = {
    idfor?: IntFieldUpdateOperationsInput | number
    nomefor?: NullableStringFieldUpdateOperationsInput | string | null
    fisjur?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjcpf?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    rua?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tbMovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbFornecedoresNestedInput
  }

  export type tbUsuariosUpsertWithoutTbNFInput = {
    update: XOR<tbUsuariosUpdateWithoutTbNFInput, tbUsuariosUncheckedUpdateWithoutTbNFInput>
    create: XOR<tbUsuariosCreateWithoutTbNFInput, tbUsuariosUncheckedCreateWithoutTbNFInput>
  }

  export type tbUsuariosUpdateWithoutTbNFInput = {
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbMovimentos?: tbMovimentosUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbUsuariosUncheckedUpdateWithoutTbNFInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    usu_login?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    dtcriacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usu_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tbMovimentos?: tbMovimentosUncheckedUpdateManyWithoutTbUsuariosNestedInput
  }

  export type tbNFItensUpsertWithWhereUniqueWithoutTbNFInput = {
    where: tbNFItensWhereUniqueInput
    update: XOR<tbNFItensUpdateWithoutTbNFInput, tbNFItensUncheckedUpdateWithoutTbNFInput>
    create: XOR<tbNFItensCreateWithoutTbNFInput, tbNFItensUncheckedCreateWithoutTbNFInput>
  }

  export type tbNFItensUpdateWithWhereUniqueWithoutTbNFInput = {
    where: tbNFItensWhereUniqueInput
    data: XOR<tbNFItensUpdateWithoutTbNFInput, tbNFItensUncheckedUpdateWithoutTbNFInput>
  }

  export type tbNFItensUpdateManyWithWhereWithoutTbNFInput = {
    where: tbNFItensScalarWhereInput
    data: XOR<tbNFItensUpdateManyMutationInput, tbNFItensUncheckedUpdateManyWithoutTbNFItensInput>
  }

  export type tbMovItensCreateWithoutTbNFItensInput = {
    seqitem?: number
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovItensInput
    tbLocais?: tbLocaisCreateNestedOneWithoutTbMovItensInput
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbMovItensInput
    tbProdutos: tbProdutosCreateNestedOneWithoutTbMovItensInput
  }

  export type tbMovItensUncheckedCreateWithoutTbNFItensInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovItensInput
  }

  export type tbMovItensCreateOrConnectWithoutTbNFItensInput = {
    where: tbMovItensWhereUniqueInput
    create: XOR<tbMovItensCreateWithoutTbNFItensInput, tbMovItensUncheckedCreateWithoutTbNFItensInput>
  }

  export type tbNFCreateWithoutTbNFItensInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbNFInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbNFInput
    tbUsuarios?: tbUsuariosCreateNestedOneWithoutTbNFInput
  }

  export type tbNFUncheckedCreateWithoutTbNFItensInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
  }

  export type tbNFCreateOrConnectWithoutTbNFItensInput = {
    where: tbNFWhereUniqueInput
    create: XOR<tbNFCreateWithoutTbNFItensInput, tbNFUncheckedCreateWithoutTbNFItensInput>
  }

  export type tbMovItensUpsertWithoutTbNFItensInput = {
    update: XOR<tbMovItensUpdateWithoutTbNFItensInput, tbMovItensUncheckedUpdateWithoutTbNFItensInput>
    create: XOR<tbMovItensCreateWithoutTbNFItensInput, tbMovItensUncheckedCreateWithoutTbNFItensInput>
  }

  export type tbMovItensUpdateWithoutTbNFItensInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovItensNestedInput
    tbLocais?: tbLocaisUpdateOneWithoutTbMovItensNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbProdutos?: tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateWithoutTbNFItensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbNFUpsertWithoutTbNFItensInput = {
    update: XOR<tbNFUpdateWithoutTbNFItensInput, tbNFUncheckedUpdateWithoutTbNFItensInput>
    create: XOR<tbNFCreateWithoutTbNFItensInput, tbNFUncheckedCreateWithoutTbNFItensInput>
  }

  export type tbNFUpdateWithoutTbNFItensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbNFNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbNFNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateWithoutTbNFItensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
    tbTiposProdutos?: tbTiposProdutosCreateNestedOneWithoutTbProdutosInput
    tbUnidadeMedida?: tbUnidadeMedidaCreateNestedOneWithoutTbProdutosInput
  }

  export type tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idproduto?: number
    idtipprod?: number | null
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbProdutosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbProdutosInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedCreateNestedManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput
  }

  export type tbProdutosCreateOrConnectWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    where: tbProdutosWhereUniqueInput
    create: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbProdutosUpsertWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    update: XOR<tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
    create: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput>
  }

  export type tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbProdutosUpsertWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    update: XOR<tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
    create: XOR<tbProdutosCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput, tbProdutosUncheckedCreateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput>
  }

  export type tbProdutosUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
  }

  export type tbMovimentosCreateWithoutTbUsuariosInput = {
    tipmov?: string | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensCreateNestedManyWithoutTbMovimentosInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbMovimentosInput
    tbNF?: tbNFCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosUncheckedCreateWithoutTbUsuariosInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    dtinc?: Date | string | null
    tbEstoque?: tbEstoqueUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbMovItens?: tbMovItensUncheckedCreateNestedManyWithoutTbMovimentosInput
    tbNF?: tbNFUncheckedCreateNestedManyWithoutTbMovimentosInput
  }

  export type tbMovimentosCreateOrConnectWithoutTbUsuariosInput = {
    where: tbMovimentosWhereUniqueInput
    create: XOR<tbMovimentosCreateWithoutTbUsuariosInput, tbMovimentosUncheckedCreateWithoutTbUsuariosInput>
  }

  export type tbMovimentosCreateManyTbUsuariosInputEnvelope = {
    data: Enumerable<tbMovimentosCreateManyTbUsuariosInput>
    skipDuplicates?: boolean
  }

  export type tbNFCreateWithoutTbUsuariosInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbMovimentos: tbMovimentosCreateNestedOneWithoutTbNFInput
    tbFornecedores?: tbFornecedoresCreateNestedOneWithoutTbNFInput
    tbNFItens?: tbNFItensCreateNestedManyWithoutTbNFInput
  }

  export type tbNFUncheckedCreateWithoutTbUsuariosInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idfor?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
    tbNFItens?: tbNFItensUncheckedCreateNestedManyWithoutTbNFInput
  }

  export type tbNFCreateOrConnectWithoutTbUsuariosInput = {
    where: tbNFWhereUniqueInput
    create: XOR<tbNFCreateWithoutTbUsuariosInput, tbNFUncheckedCreateWithoutTbUsuariosInput>
  }

  export type tbNFCreateManyTbUsuariosInputEnvelope = {
    data: Enumerable<tbNFCreateManyTbUsuariosInput>
    skipDuplicates?: boolean
  }

  export type tbMovimentosUpsertWithWhereUniqueWithoutTbUsuariosInput = {
    where: tbMovimentosWhereUniqueInput
    update: XOR<tbMovimentosUpdateWithoutTbUsuariosInput, tbMovimentosUncheckedUpdateWithoutTbUsuariosInput>
    create: XOR<tbMovimentosCreateWithoutTbUsuariosInput, tbMovimentosUncheckedCreateWithoutTbUsuariosInput>
  }

  export type tbMovimentosUpdateWithWhereUniqueWithoutTbUsuariosInput = {
    where: tbMovimentosWhereUniqueInput
    data: XOR<tbMovimentosUpdateWithoutTbUsuariosInput, tbMovimentosUncheckedUpdateWithoutTbUsuariosInput>
  }

  export type tbMovimentosUpdateManyWithWhereWithoutTbUsuariosInput = {
    where: tbMovimentosScalarWhereInput
    data: XOR<tbMovimentosUpdateManyMutationInput, tbMovimentosUncheckedUpdateManyWithoutTbMovimentosInput>
  }

  export type tbNFUpsertWithWhereUniqueWithoutTbUsuariosInput = {
    where: tbNFWhereUniqueInput
    update: XOR<tbNFUpdateWithoutTbUsuariosInput, tbNFUncheckedUpdateWithoutTbUsuariosInput>
    create: XOR<tbNFCreateWithoutTbUsuariosInput, tbNFUncheckedCreateWithoutTbUsuariosInput>
  }

  export type tbNFUpdateWithWhereUniqueWithoutTbUsuariosInput = {
    where: tbNFWhereUniqueInput
    data: XOR<tbNFUpdateWithoutTbUsuariosInput, tbNFUncheckedUpdateWithoutTbUsuariosInput>
  }

  export type tbNFUpdateManyWithWhereWithoutTbUsuariosInput = {
    where: tbNFScalarWhereInput
    data: XOR<tbNFUpdateManyMutationInput, tbNFUncheckedUpdateManyWithoutTbNFInput>
  }

  export type tbMovimentosCreateManyTbFornecedoresInput = {
    idmovimento?: number
    tipmov?: string | null
    idusuario_alteracao?: number | null
    dtinc?: Date | string | null
  }

  export type tbNFCreateManyTbFornecedoresInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
  }

  export type tbMovimentosUpdateWithoutTbFornecedoresInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbMovimentosNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbMovimentosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbFornecedoresInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateManyWithoutTbMovimentosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idusuario_alteracao?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbNFUpdateWithoutTbFornecedoresInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbNFNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbNFNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateWithoutTbFornecedoresInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateManyWithoutTbNFInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbEstoqueCreateManyTbProdutosInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idlocal?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbMovItensCreateManyTbProdutosInput = {
    idmovimento: number
    seqitem?: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
  }

  export type tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: number
    idprodutocomp: number
    quantidade?: number | null
  }

  export type tbProdComposicaoCreateManyTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: number
    idproduto: number
    quantidade?: number | null
  }

  export type tbEstoqueUpdateWithoutTbProdutosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbLocais?: tbLocaisUpdateOneWithoutTbEstoqueNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbEstoqueNestedInput
    tbMovItens?: tbMovItensUpdateOneWithoutTbEstoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTbProdutosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbEstoqueUncheckedUpdateManyWithoutTbEstoqueInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovItensUpdateWithoutTbProdutosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovItensNestedInput
    tbLocais?: tbLocaisUpdateOneWithoutTbMovItensNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateWithoutTbProdutosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateManyWithoutTbMovItensInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbProdutos_tbProdComposicao_idprodutocompTotbProdutos?: tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoUncheckedUpdateManyWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idprodutocomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbProdutos_tbProdComposicao_idprodutoTotbProdutos?: tbProdutosUpdateOneRequiredWithoutTbProdComposicao_tbProdComposicao_idprodutoTotbProdutosNestedInput
  }

  export type tbProdComposicaoUncheckedUpdateWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdComposicaoUncheckedUpdateManyWithoutTbProdComposicao_tbProdComposicao_idprodutocompTotbProdutosInput = {
    idcomp?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosCreateManyTbTiposProdutosInput = {
    idproduto?: number
    idunidade?: number | null
    nomeprod?: string | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateWithoutTbTiposProdutosInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbUnidadeMedida?: tbUnidadeMedidaUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbTiposProdutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateManyWithoutTbProdutosInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idunidade?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbProdutosCreateManyTbUnidadeMedidaInput = {
    idproduto?: number
    idtipprod?: number | null
    nomeprod?: string | null
    quantminima?: number | null
  }

  export type tbProdutosUpdateWithoutTbUnidadeMedidaInput = {
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
    tbTiposProdutos?: tbTiposProdutosUpdateOneWithoutTbProdutosNestedInput
  }

  export type tbProdutosUncheckedUpdateWithoutTbUnidadeMedidaInput = {
    idproduto?: IntFieldUpdateOperationsInput | number
    idtipprod?: NullableIntFieldUpdateOperationsInput | number | null
    nomeprod?: NullableStringFieldUpdateOperationsInput | string | null
    quantminima?: NullableIntFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutoTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutoTotbProdutosNestedInput
    tbProdComposicao_tbProdComposicao_idprodutocompTotbProdutos?: tbProdComposicaoUncheckedUpdateManyWithoutTbProdutos_tbProdComposicao_idprodutocompTotbProdutosNestedInput
  }

  export type tbEstoqueCreateManyTbLocaisInput = {
    idestoque?: number
    idmovimento: number
    seqitem: number
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbMovItensCreateManyTbLocaisInput = {
    idmovimento: number
    seqitem?: number
    idproduto: number
    dtinc?: Date | string | null
    quantidade?: number | null
  }

  export type tbEstoqueUpdateWithoutTbLocaisInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbEstoqueNestedInput
    tbProdutos?: tbProdutosUpdateOneWithoutTbEstoqueNestedInput
    tbMovItens?: tbMovItensUpdateOneWithoutTbEstoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTbLocaisInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovItensUpdateWithoutTbLocaisInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovItensNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbProdutos?: tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateWithoutTbLocaisInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbEstoqueCreateManyTbMovItensInput = {
    idestoque?: number
    idlocal?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbNFItensCreateManyTbMovItensInput = {
    idnf: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbEstoqueUpdateWithoutTbMovItensInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbLocais?: tbLocaisUpdateOneWithoutTbEstoqueNestedInput
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbEstoqueNestedInput
    tbProdutos?: tbProdutosUpdateOneWithoutTbEstoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTbMovItensInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbNFItensUpdateWithoutTbMovItensInput = {
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNF?: tbNFUpdateOneRequiredWithoutTbNFItensNestedInput
  }

  export type tbNFItensUncheckedUpdateWithoutTbMovItensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbNFItensUncheckedUpdateManyWithoutTbNFItensInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbEstoqueCreateManyTbMovimentosInput = {
    idestoque?: number
    seqitem: number
    idlocal?: number | null
    idproduto?: number | null
    quantidade?: number | null
    dtinc?: Date | string | null
  }

  export type tbMovItensCreateManyTbMovimentosInput = {
    seqitem?: number
    idproduto: number
    idlocal?: number | null
    dtinc?: Date | string | null
    quantidade?: number | null
  }

  export type tbNFCreateManyTbMovimentosInput = {
    idnf?: number
    numnf?: number | null
    serienf?: number | null
    idfor?: number | null
    idusuario_inclusao?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
  }

  export type tbEstoqueUpdateWithoutTbMovimentosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbLocais?: tbLocaisUpdateOneWithoutTbEstoqueNestedInput
    tbProdutos?: tbProdutosUpdateOneWithoutTbEstoqueNestedInput
    tbMovItens?: tbMovItensUpdateOneWithoutTbEstoqueNestedInput
  }

  export type tbEstoqueUncheckedUpdateWithoutTbMovimentosInput = {
    idestoque?: IntFieldUpdateOperationsInput | number
    seqitem?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    idproduto?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tbMovItensUpdateWithoutTbMovimentosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovItensNestedInput
    tbLocais?: tbLocaisUpdateOneWithoutTbMovItensNestedInput
    tbProdutos?: tbProdutosUpdateOneRequiredWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbMovItensUncheckedUpdateWithoutTbMovimentosInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    idlocal?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovItensNestedInput
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbMovItensNestedInput
  }

  export type tbNFUpdateWithoutTbMovimentosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbNFNestedInput
    tbUsuarios?: tbUsuariosUpdateOneWithoutTbNFNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateWithoutTbMovimentosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    idusuario_inclusao?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFItensCreateManyTbNFInput = {
    seqitem: number
    idproduto: number
    vlrunitario?: number | null
    quantidade?: number | null
    vlrtotitem?: number | null
  }

  export type tbNFItensUpdateWithoutTbNFInput = {
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovItens?: tbMovItensUpdateOneRequiredWithoutTbNFItensNestedInput
  }

  export type tbNFItensUncheckedUpdateWithoutTbNFInput = {
    seqitem?: IntFieldUpdateOperationsInput | number
    idproduto?: IntFieldUpdateOperationsInput | number
    vlrunitario?: NullableFloatFieldUpdateOperationsInput | number | null
    quantidade?: NullableFloatFieldUpdateOperationsInput | number | null
    vlrtotitem?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tbMovimentosCreateManyTbUsuariosInput = {
    idmovimento?: number
    tipmov?: string | null
    idfor?: number | null
    dtinc?: Date | string | null
  }

  export type tbNFCreateManyTbUsuariosInput = {
    idnf?: number
    numnf?: number | null
    idmovimento: number
    serienf?: number | null
    idfor?: number | null
    dtemissao?: Date | string | null
    vlrtotal?: number | null
  }

  export type tbMovimentosUpdateWithoutTbUsuariosInput = {
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUpdateManyWithoutTbMovimentosNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbMovimentosNestedInput
    tbNF?: tbNFUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbMovimentosUncheckedUpdateWithoutTbUsuariosInput = {
    idmovimento?: IntFieldUpdateOperationsInput | number
    tipmov?: NullableStringFieldUpdateOperationsInput | string | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    dtinc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tbEstoque?: tbEstoqueUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbMovItens?: tbMovItensUncheckedUpdateManyWithoutTbMovimentosNestedInput
    tbNF?: tbNFUncheckedUpdateManyWithoutTbMovimentosNestedInput
  }

  export type tbNFUpdateWithoutTbUsuariosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbMovimentos?: tbMovimentosUpdateOneRequiredWithoutTbNFNestedInput
    tbFornecedores?: tbFornecedoresUpdateOneWithoutTbNFNestedInput
    tbNFItens?: tbNFItensUpdateManyWithoutTbNFNestedInput
  }

  export type tbNFUncheckedUpdateWithoutTbUsuariosInput = {
    idnf?: IntFieldUpdateOperationsInput | number
    numnf?: NullableIntFieldUpdateOperationsInput | number | null
    idmovimento?: IntFieldUpdateOperationsInput | number
    serienf?: NullableIntFieldUpdateOperationsInput | number | null
    idfor?: NullableIntFieldUpdateOperationsInput | number | null
    dtemissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vlrtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    tbNFItens?: tbNFItensUncheckedUpdateManyWithoutTbNFNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}